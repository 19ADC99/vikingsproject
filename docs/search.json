[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Farmhouse ale cultures preserve brewing’s lost yeast diversity",
    "section": "",
    "text": "Abstract\nSince its inception over 10.000 years ago, beer brewing transformed from a domestic activity based on uncontrolled spontaneous fermentations into a highly optimized industrial process that uses pure single-strain starter cultures of Saccharomyces yeasts. Along with the storage of frozen yeast stocks, this shift halted the domestication process of beer yeasts and led to a massive loss of beer yeast biodiversity. However, a few traditional farmhouse brewers in Northern and Eastern Europe still rely on artisanal fermentation methods, using mixed cultures of yeasts that are passed on from one fermentation to the next. We genetically and phenotypically analyzed 1760 isolates from 44 traditional European farmhouse ale yeast cultures from Norway, Latvia, Lithuania and Russia. We find that farmhouse cultures harbour remarkable genetic diversity, from nearly pure S. cerevisiae strains to intricate communities of over 30 unique variants. Farmhouse yeast genomes exhibit clear geographic structuring, but also reveal signs of within-culture mating and occasional admixture between populations, alongside lineage-specific genomic features, such as a horizontally transferred gene cluster unique to Baltic strains. Large-scale phenotyping showed that the farmhouse yeasts show much greater stress tolerance and a more diverse flavour production profile compared to current industrial beer strains. Together, our study reveals the complex structure and enormous diversity of microbial communities in traditional fermentations and provides a reservoir of new yeast strains that could drive a next wave of beer innovation.",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html",
    "href": "p01-01-qc-and-genome-composition.html",
    "title": "1  QC and Genome Composition assessment",
    "section": "",
    "text": "1.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 6.5.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#on-this-page",
    "href": "p01-01-qc-and-genome-composition.html#on-this-page",
    "title": "1  QC and Genome Composition assessment",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#reads-qc-and-filtering",
    "href": "p01-01-qc-and-genome-composition.html#reads-qc-and-filtering",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.2 Reads QC and Filtering",
    "text": "1.2 Reads QC and Filtering\nJust trim low quality bases with Trimmomatic and discard short reads. I keep only properly paired reads and I discard the unpaired, since the latter are just a tiny fraction of my total data, they complicate the analysis and there is not much added value in them (at least for the analysis we run).\nThe file sample.lst just contains the names of my kveiks samples.\n\n# generate FastQC report\nfor file in *.fastq; do\n  ~/bin/FastQC/fastqc $file &\ndone\n\n# LowQ base trimming and filtering\nwhile read line; do\n    java -jar ~/bin/trimmomatic/trimmomatic.jar PE \\\n        -threads 72 \\\n        -phred33 \\\n        $line.R1.fq.gz $line.R2.fq.gz \\\n        $line.R1.tr.fq.gz $line.R1.tr.un.fq.gz $line.R2.tr.fq.gz $line.R2.tr.un.fq.gz \\\n        SLIDINGWINDOW:10:30 \\\n        TRAILING:30 \\\n        MINLEN:50\ndone &lt; sample.lst",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#genome-composition",
    "href": "p01-01-qc-and-genome-composition.html#genome-composition",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.3 Genome Composition",
    "text": "1.3 Genome Composition\nWe check the composition of the sequenced kveiks by aligning the reads to a set of Saccharomyces reference genomes.\n\n\n\n\n\n\nFirst, we align the reads to the six Saccharomyces reference genomes. Then we create 10kb windows with bedtools and we calculate the average coverage for each window.\n\n## index the reference genome\n~/bin/bwa/bwa index Saccharomyces_RefGen.fa\n\n## reads alignment\nwhile read line ; do\n\n    bwa mem -t 72 \\\n        -K 100000000 \\\n        Saccharomyces_RefGen.fa \\\n      \"${line}\".R1.tr.fq.gz \\\n      \"${line}\".R2.tr.fq.gz \\\n    &gt; \"${line}\".align.sam\n    \n  samtools view -@ 72 -Sb \\\n    \"${line}\".align.sam &gt; \"${line}\".align.bam\n    \n  samtools sort -@ 72 \n    \"${line}\".align.bam \"${line}\".align.sort\n    \ndone &lt; ../sample.lst \n\n## bam2bed\n# prepare reference genomes\nsamtools-1.9/samtools faidx Saccharomyces_RefGen.fa\ngatk CreateSequenceDictionary --R Saccharomyces_RefGen.fa\ncut -f 2,3 Saccharomyces_RefGen.dict \\\n  | tail -n +2 \\\n  | sed 's/LN://g' \\\n  | sed 's/SN://g' \\\n  &gt; Saccharomyces_RefGen.bedchor\nbedtools makewindows \\\n  -g Saccharomyces_RefGen.bedchor \\\n    -w 1000 \\\n    &gt; Saccharomyces_RefGen.1kb_win.tab\n\n# calculate mean coverage\nwhile read line; do\n    bedtools coverage \\\n      -a Saccharomyces_RefGen.1kb_win.tab \\\n      -b \"${line}\".align.sort.bam -mean \\\n      &gt; \"${line}\".align.sort.1kb_cov.bed;\ndone\n\n# format output\nfor file in *.1kb_cov.bed ; do\n    sed -i 's/Scere_/Scere\\t/g' $file;\n    sed -i 's/Seuba_/Seuba\\t/g' $file;\n    sed -i 's/Skudr_/Skudr\\t/g' $file;\n    sed -i 's/Smika_/Smika\\t/g' $file;\n    sed -i 's/Spara_/Spara\\t/g' $file;\n    sed -i 's/Suvar_/Suvar\\t/g' $file;\n    python bed_remove0coverage.py \\\n      --input $file \\\n      | sed '/^[[:space:]]*$/d' \\\n      &gt; $(basename $file .bed).no0.bed;\ndone\n\nfor file in *.no0.bed; do\n    NAME=$(basename $file .align.sort.1kb_cov.no0.bed);\n    sed -i \"s/^/$NAME\\t/\" $file;\ndone\n\ncat *.1kb_cov.no0.bed &gt; Viking.species.cov.bed\n\n\n# generate per chromosomes coverages\nwhile read line; do\n    OLD=$(echo $line | cut -d \" \" -f 1)\n    NEW=$(echo $line | cut -d \" \" -f 2)\n    sed -i \"s/$OLD\\t/$NEW\\t/g\" Viking.species.cov.chr.bed\ndone &lt; ref_chr_names.lst \n\n# clean output\nfor file in *.no0.bed; do\n    cp $file $file.1;\n    while read line; do\n        OLD=$(echo $line | cut -d \" \" -f 1);\n        NEW=$(echo $line | cut -d \" \" -f 2);\n        sed -i \"s/$OLD\\t/$NEW\\t/g\" $file.1;\n    done &lt; ../00_ref_genomes/ref_chr_names.lst;\n    grep Chr $file.1 &gt; $(basename $file .bed).chr.bed;\n    rm $file.1 &\ndone\n\nWe then remove windows with 0 coverage to have a clearer figure, and we plot the coverages with transforming the y axis in log10 scale, since Krogerus kveiks have much higher coverage than the strains we sequenced.\n\ndata_cov = read.delim(\"data/p01-01/Viking.species.cov.chr.bed\", header = FALSE)\ndata_cov$V7 = ifelse(data_cov$V6 &gt;= 1, \"Up\", \"Down\")\n\n# ylim = 1500\nggplot(data_cov, aes(x = V2, y = V6)) +\n  geom_jitter(aes(color = V7),\n              show.legend = FALSE,\n              alpha = 0.035,\n              shape = \".\",\n              position = position_jitter(0.475)) +\n  geom_hline(yintercept = 1, linetype = 2, color = \"red\") +\n  coord_cartesian(expand = FALSE) +\n  scale_color_manual(values  = c(\"grey75\", \"cyan4\")) + \n  scale_y_continuous(limits = c(-4, 9000),\n                     trans = \"log2\",\n                     breaks = c(1, 10, 100, 1000),\n                     labels = scales::comma) +\n  labs(title = \"Coverage of Reference Genomes\",\n       x = \"Reference Species\",\n       y = \"Coverage\") +\n  facet_wrap(~V1, scales = \"free_y\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 20),\n        panel.background = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_line(colour = \"gray75\", size = 0.5),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text = element_text(size = 8),\n        axis.ticks.y = element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 0.65))\n\n\n\n\nFigure 1: Coverage of Reference Genomes.\n\n\n\n\nAll sequenced farmhouse yeasts are pure S. cerevisiae strains, except for Muri and k7R25 that are S. cerevisiae, S. eubayanus and S. uvarum triple hybrids.\nWe can dig in into the coverage of the single chromosomes and visualize the extent of hybridization and eventual aneuploidies.\n\n14R3014R616R2316R3717P519R181R1621P121R3827R1728P128P628R2128R3328R82R2338R1639R203R1140R1440R140R2041R1041R1542R2042R3144R3244R745P545R1146R1246R376R157R78R199R40Granvin1Hornindal1Hornindal2k7R15k7R25Laerdal2MuriSortdalEbbe1Voss1\n\n\n\nplot_lst[[\"14R30\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"14R6\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"16R23\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"16R37\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"17P5\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"19R18\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"1R16\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"21P1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"21R38\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"27R17\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28P1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28P6\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28R21\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28R33\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28R8\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"2R23\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"38R16\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"39R20\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"3R11\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"40R14\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"40R1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"40R20\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"41R10\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"41R15\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"42R20\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"42R31\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"44R32\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"44R7\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"45P5\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"45R11\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"46R12\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"46R37\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"6R15\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"7R7\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"8R19\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"9R40\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Granvin1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Hornindal1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Hornindal2\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"k7R15\"]]\n\nNULL\n\n\n\n\n\nplot_lst[[\"k7R25\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Laerdal2\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Muri\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"SortdalEbbe1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Voss1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nMuri and k7R25 are triple hybrids S. cerevisiae X S. eubayanus X S. uvarum. What is extremely interesting is that they share the same genomic composition in terms of origin of the chromosomes, but they have distinct CNVs patterns. I would suggest a common origin for such hybrid.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#ploydies-estimation",
    "href": "p01-01-qc-and-genome-composition.html#ploydies-estimation",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.4 Ploydies estimation",
    "text": "1.4 Ploydies estimation\nWe can estimates Kveiks ploidy by looking at the k-mer frequency distributions of the sequenced reads obtained from whole genome sequencing.\n\n\n# calculate kmer freq\nfor file in 01_alignments/*bam; do\n  ~/bin/ntCard/bin/ntcard \\\n    --threads=64 \\\n    --kmer=41 \\\n    --pref=$(basename $file .align.sort.md.r.bam).kmer41freq \\\n    $file;\ndone\n\n# merge outputs\nfor file in *.hist; do\n  tail -n +3 $file &gt; $file.1;\n  mv $file.1 $file;\n  cat $file | sed \"s/^/$(basename $file .kmer41freq_k41.hist)\\t/g\";\ndone &gt; Viking.species.kmer41freq.txt\n\nKmer frequency distribution plots can suggest us the degree of heterozygosity of kveiks genomes. All Kveiks seems to have a high degree of heterozygosity, except for hybrid strains Muri and k7R25. This support the idea that the sequenced kveiks so far are tetraploid S. cerevisiae, while Muri and k7R25 are triploid hybrids S. cerevisiae X Seubayanus X S. uvarum.\n\ndata_k = read.delim(\"./data/p01-01/Viking.species.kmer41freq.mod.txt\", header = FALSE)\ndata_k$V2 = as.numeric(data_k$V2)\ndata_k$V3 = as.numeric(data_k$V3)\n\n# plot kmer distributions\nggplot(data_k, aes(x = V2, y = V3)) +\n  geom_line(color = \"steelblue\", size = 1) +\n  scale_y_continuous(labels = function(x) format(x, big.mark = \",\", scientific = FALSE)) +\n  facet_wrap(~V1, scales = \"free\") +\n  labs(title = \"K-mer frequencies distribution\",\n       x = \"k-mer depth\",\n       y = \"k-mer frequency\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5),\n        axis.title = element_text(size = 18),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        panel.background = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill = NA),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text = element_text(size = 8))\n\n\n\n\nFigure 2: K-mer frequencies distribution.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#sec-lesson-learnt-feature-selection",
    "href": "p01-01-qc-and-genome-composition.html#sec-lesson-learnt-feature-selection",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.5 Lessons Learnt",
    "text": "1.5 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#session-information",
    "href": "p01-01-qc-and-genome-composition.html#session-information",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.6 Session Information",
    "text": "1.6 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] magrittr_2.0.3 gridExtra_2.3  ggplot2_3.5.2 \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5        cli_3.6.5          knitr_1.50         rlang_1.1.6       \n [5] xfun_0.52          generics_0.1.4     jsonlite_2.0.0     labeling_0.4.3    \n [9] glue_1.8.0         DT_0.33            htmltools_0.5.8.1  sass_0.4.10       \n[13] scales_1.4.0       rmarkdown_2.29     jquerylib_0.1.4    crosstalk_1.2.1   \n[17] evaluate_1.0.4     tibble_3.3.0       fastmap_1.2.0      yaml_2.3.10       \n[21] lifecycle_1.0.4    compiler_4.3.3     dplyr_1.1.4        RColorBrewer_1.1-3\n[25] htmlwidgets_1.6.4  pkgconfig_2.0.3    farver_2.1.2       digest_0.6.37     \n[29] R6_2.6.1           tidyselect_1.2.1   dichromat_2.0-0.1  pillar_1.11.0     \n[33] bslib_0.9.0        withr_3.0.2        tools_4.3.3        gtable_0.3.6      \n[37] cachem_1.1.0",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html",
    "href": "p01-02-genome-assembly-and-annotation.html",
    "title": "2  Genome Assembly and Annotation",
    "section": "",
    "text": "2.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 6.5.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#on-this-page",
    "href": "p01-02-genome-assembly-and-annotation.html#on-this-page",
    "title": "2  Genome Assembly and Annotation",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#de-novo-assembly",
    "href": "p01-02-genome-assembly-and-annotation.html#de-novo-assembly",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.2 De novo assembly",
    "text": "2.2 De novo assembly\nTo determine the genes in Kveiks samples, we need to do a de novo assembly and then to run an ab initio prediction of genes (using Saccharomyces proteins and genes as guide). We will use SPAdes assembler, follower by Redundans pipeline to collapse redundant contigs.\n\n\n## SPAdes assembly \nwhile read line ; do\n    python ~/bin/SPAdes-3.13.0-Linux/bin/spades.py \\\n        -1 ../00_trim_reads/\"${line}\".R1.tr.fq.gz \\\n        -2 ../00_trim_reads/\"${line}\".R2.tr.fq.gz \\\n        -o \"${line}\"_SPAdes \\\n        --threads 72 \\\n        -k 21,29,39,59,79,99,119,127\ndone &lt; ../sample.lst\n\n## redundans\ndocker run -v /home/andrea/03_KVEIK/:/mydata:rw -it lpryszcz/redundan2\n\nwhile read line ; do\n    /root/src/redundans/redundans.py \\\n        --verbose \\\n        --fastq /mydata/00_trim_reads/\"${line}\".R1.tr.fq.gz \\\n        /mydata/00_trim_reads/\"${line}\".R2.tr.fq.gz \\\n        --fasta /mydata/03_assemblies/\"${line}\".SPAdes.fa \\\n        --outdir /mydata/04_redundans/\"${line}\" \\\n        --threads 72 \\\n        --log /mydata/04_redundans/\"${line}\".SPAdes.redundans.log\ndone &lt; mydata/sample.lst \n\n## Generate assembly stats\nfor file in *redundans.fa; do \n    perl ~/scripts/Nstat.pl $file &gt; $file.Nstat;\ndone\n\necho \"Sample\"$'\\t'\"Total length (bp)\"$'\\t'\"# contigs\"$'\\t'\"longest (bp)\"$'\\t'\"N50 (bp)\" &gt; Vikings.assembly.stats.txt;\n    \nfor file in *.Nstat; do\n    NAME=$(basename $file .SPAdes.redundans.fa.Nstat);\n    LONGEST=$(tail $file | head -n 1 | tr ':' '\\t' | cut -f 1);\n    TOT_LEN=$(grep \"Total length\" $file | sed 's/Total length of sequence://g');\n    NCONT=$(grep \"Total number\" $file | sed 's/Total number of sequences://g');\n    N50=$(grep \"N50 stats:\" $file | sed 's/.*sequences &gt;= //g');\n    echo $NAME$'\\t'$TOT_LEN$'\\t'$NCONT$'\\t'$LONGEST$'\\t'$N50; done |\\\n        sed 's/ bp//g' &gt;&gt; Vikings.assembly.stats.txt;\ndone\n\n\n\n\n\n\n\nDespite being more or less fragmented, all assembled genomes are in the range of Saccharomyces sizes. Notable exceptions are: Granvin1 (???), Muri and k7R25 (which are S. cerevisiae, _ X S. eubayanus X S. uvarum triple hybrids).",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#genome-annotation",
    "href": "p01-02-genome-assembly-and-annotation.html#genome-annotation",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.3 Genome Annotation",
    "text": "2.3 Genome Annotation\nWe will perform ab initio annotation of the assembled genomes with the MAKER pipeline. We will use Saccharomyces RepeatMasker to mask repetitive regions, ab intio gene models are predicted with SNAP and augustus with the corresponding S. cerevisiae HMM models, ORFs from S288C_reference_genome_R64-2-1_20150113 reference genome and 1011 S. cerevisiae genomes as ESTs evidences, proteins from S288C_reference_genome_R64-2-1_20150113 genome and the following yeast proteomes as proteins evidences.\n\n\n\n\n\n\n\n2.3.1 Gene Models Annotation\n\n# run the MAKER pipeline\nfor file in *.redundans.fa; do\n    ~/bin/maker/bin/maker -genome $file \\\n        maker_bopts.ctl \\\n        maker_opts.ctl \\\n        maker_exe.ctl; \ndone \n\n# summary of transcripts and proteins\nfor DIR in *.maker.output; do\n    ~/bin/maker/bin/fasta_merge -d ./$DIR/*master_datastore_index.log;\n    ~/bin/maker/bin/gff3_merge -d ./$DIR/*master_datastore_index.log;\ndone\n\n# create gene IDs\nfor file in *.all.gff ; do\n    ~/bin/maker/bin/maker_map_ids \\\n        --prefix $(basename $file | sed 's/\\..*//g') \\\n        $file &gt; $(basename $file .gff).id.map;\n    ~/bin/maker/bin/map_gff_ids \\\n        $(basename $file .gff).id.map \\\n        $file;\n    ~/bin/maker/bin/map_fasta_ids \\\n        $(basename $file .gff).id.map \\\n        $(basename $file .gff).maker.transcripts.fasta;\n    ~/bin/maker/bin/map_fasta_ids \\\n        $(basename $file .gff).id.map \\\n        $(basename $file .gff).maker.proteins.fasta;\ndone\n\n## Generate annotation stats\necho \"Sample\"$'\\t'\"# Transcripts\"$'\\t'\"# Proteins\" &gt; Vikings.annotation.stats.txt;\nwhile read line; do\n    NAME=$line;\n    TRANS=$(grep \"&gt;\" $line.SPAdes.redundans.all.maker.transcripts.fasta | wc -l);\n    PROT=$(grep \"&gt;\" $line.SPAdes.redundans.all.maker.proteins.fasta | wc -l);\n    echo $NAME$'\\t'$TRANS$'\\t'$PROT &gt;&gt; Vikings.annotation.stats.txt;\ndone &lt; ../sample.lst\n\nBelow are the number of genes predicted for each de novo assembled farmhouse genome.\n\n\n\n\n\n\n\n\n2.3.2 Identification of Farmhouse-specific Gene Families\nDo kveiks harbor kveik-specific gene families? To answer this question we build protein orthogroups using proteomes from Kveiks, 302 industrail strains (from Gallone et al. 2019) and reference proteomes for S. cerevisiae, S. kudriavzevii, S. eubayanus, S. uvarum using the Orthofinder pipeline. This approach resulted to be successful for clustering HGT, so hopefully we can identify Orthogroups specific for kveik strains.\n\n# create Gene Families\n~/bin/OrthoFinder-2.3.3/orthofinder -f 00_aa_start/ \\\n  -t 72 \\\n  -M msa \\\n  -S diamond \\\n  -A mafft \\\n  -T iqtree \\\n  -I 2\n  \n# filter for Orthogroups enriched for kveiks\npython3.8 Vikings.GeneFamiliesFilter.py \\\n  --in Vikings.Orthogroups.GeneCount.tsv \\\n  &gt; Vikings.Orthoclusters.counts.tab\n\nWe select Orthogroups with 10 genes or more (6,811 out of 13,508 groups), and we look for gene families specific for kveiks or enriched in kveiks.\n\n# get yeasts gene families\nOrthogroups = read.delim(\"data/p01-02/Vikings.Orthoclusters.counts.tab\", header = FALSE)\ncolnames(Orthogroups) = Orthogroups[1, ]\nrownames(Orthogroups) = Orthogroups$Orthogroups\nOrthogroups = Orthogroups[-which(Orthogroups$Orthogroup == \"Orthogroups\"), ]\nOrthogroups = Orthogroups[, -which(colnames(Orthogroups) == \"Orthogroups\")]\nOrthogroups = dplyr::mutate_all(Orthogroups, function(x) as.numeric(as.character(x)))\n\n# drop columns if empty\nOrthogroups = Orthogroups[, colSums(Orthogroups != 0) &gt; 0]\n\n# reorder columns\nkveiks = c(\"14R30\", \"14R6\", \"16R23\", \"16R37\", \"17P5\", \"19R18\", \"1R16\", \"21P1\", \"21R38\",\n           \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\", \"2R23\", \"38R16\", \"39R20\", \n           \"3R11\", \"40R14\", \"40R1\", \"40R20\", \"41R10\", \"41R15\", \"42R20\", \"42R31\", \"44R32\", \"44R7\", \n           \"45P5\", \"45R11\", \"46R12\", \"46R37\", \"6R15\", \"7R7\", \"8R19\", \"9R40\", \"Granvin1\", \n           \"Hornindal1\", \"Hornindal2\", \"k7R25\", \"Laerdal2\", \"Muri\", \"SortdalEbbe1\", \"Voss1\")\nOrthogroups_k = Orthogroups[, which(colnames(Orthogroups) %in% kveiks)]\nOrthogroups_nk = Orthogroups[, -which(colnames(Orthogroups) %in% kveiks)]\nOrthogroups = cbind(Orthogroups_k, Orthogroups_nk)\n\n# plot heatmap\nComplexHeatmap::Heatmap(t(Orthogroups),\n                        cluster_rows = FALSE,\n                        cluster_columns = TRUE,\n                        column_dend_reorder = TRUE,\n                        col = colorRamp2(c(-1, 0, 1), rev(brewer.pal(n = 3, name = \"RdBu\"))),\n                        na_col = \"grey75\",\n                        show_row_names = TRUE,\n                        show_column_names = FALSE,\n                        show_row_dend = TRUE,\n                        show_heatmap_legend = FALSE,\n                        row_title = \"Orthogroups\",\n                        column_title_side = \"bottom\")\n\n\n\n\nFigure 1: Kveiks-specific gene families.\n\n\n\n\nWe could not identify any obvious evidences for Farmhouse-specific Orthogroups.\n\n\n2.3.3 Horizontal Gene Transfer\nTo identify genuine Bacterial (or Fungal) Horizontal Gene Transfer, we apply the following protocol:\n\nsequence similarity search against non-redundant proteins database, including taxonomic annotations\nidentify protein coding genes with best hits (top 5) to Bacterial proteins\nselect assembled contigs where putative bacterial genes are\ndiscard short contigs with only one bacterial hit (Noise)\nif putative bacterial gene flanked by Eukaryotic genes, manual sequence similarity search to confirm a bona fide hit\n\nTo have internal controls in this (and in the following analyses), we will add the ones of 18 S. cerevisiae industrial strains as well.\n\n2.3.3.1 Taxonomic annotation of predicted genes\nFor each predicted protein-coding gene, we can make a sequence similarity search against the non-redundant protein database at NCBI (nr). To assign the taxonomy id of the nr BLAST hit, we need the prot.accession2taxid.gz and nodes.dmp files provided by NCBI taxonomy. This can help us identify horizontal gene transfer and traces of contamination in the library prep of yeast samples.\nFor each sample, first we do a blast search using DIAMOND, and then we associate to the protein_id of the top 5 best hits to the corresponding taxonomy the python library ete and customs scripts. BLAST is run against nr, excluding Saccharomyces cerevisiae, so that we can judge if the protein was present in other yeasts, or if it is indeed of bacterial origin.\n\n# BLAST search\nfor file in *.all.maker.proteins.fasta; do\n  ~/bin/DIAMOND/diamond blastp \\\n    --query $file \\\n    --db ~/taxonomy/nr \\\n    --taxonmap ~/taxonomy/prot.accession2taxid.gz \\\n    --taxonnodes ~/taxonomy/nodes.dmp \\\n    --threads 70 \\\n    --sensitive \\\n    --max-target-seqs 5 \\\n    --outfmt 6 qseqid sseqid pident length mismatch gapopen qstart qend\n    sstart send evalue bitscore staxids &gt; $file.diamond\ndone\n\n# BLAST to taxid\nfor file in *.diamond; do\n  ~/anaconda_ete/bin/python3.6 Vikings.tax.topath.py --input $file &gt; $file.tax\ndone\nfor file in *.tax ; do\n  while read line ; do\n    grep $line $file | cut -f 1,5;\n    echo;\n  done &lt; &lt;(grep Bacteria $file | cut -f 1 | sort -u) &gt; $file.bact\ndone\n\nNow we have the full taxonomic annotation of the five best hits for each of the protein coding genes we annotated on the kveiks.\n\n\n2.3.3.2 Evidence for bacterial HGT\n\n# filter annot.gff files\nfor file in *.gff ; do\n  grep CDS $file &gt; $(basename $file .gff).CDSonly.gff;\n  gzip $file;\ndone\n\n# identify putative bacterial genes and the assembled contigs harbouring them\nfor file in *.tax; do cut -f 1,5 $file &gt; $file.all; done\nfor file in *.all; do grep Bact $file &gt; $(basename $file .all).bact; done\nfor file in *.bact; do\n  while read line; do\n    if [[ $line = \"\" ]]; then\n      continue;\n    else\n      GENE=$(echo $line | cut -d \" \" -f 1 );\n      CHR=$(grep \"${GENE}\" $(basename $file .maker.proteins.fasta.diamond.tax.bact).CDSonly.gff | cut -f 1 );\n      grep \"${CHR}\" $(basename $file .bact).all \\\n        | uniq \\\n        | grep -C5 \"${GENE}\" \\\n        | grep -v \"${GENE}\" \\\n        &gt;&gt; $(basename $file .maker.proteins.fasta.diamond.tax.bact).\"${GENE}\".tmp;\n    fi;\n  done &lt; &lt;(cut -f 1 $file | sort -u);\ndone\n\n# pull the putative bacterial contigs\nfor file in *.bact; do\n  cut -f 1 $file | sort -u &gt; $file.lst;\n  perl ~/scripts/SelectList_Fasta.pl \\\n    $(basename $file .diamond.tax.bact) \\\n    $file.lst \\\n    &gt; $file.fa;\ndone\n\n# check if putative bacterial transcripts are flanked by Euk genes\npython3.6 Vikings.check_eukbact_contigs.1.py --input ../samples.lst\nfor file in *HGT.table; do uniq $file &gt; temp; mv temp $file ; done\nfor file in *HGT.table; do\n  python3 ../Vikings.Bactmatch.py --input $file | cut -f 2 &gt; temp;\n  cp temp temp2;\n  paste temp temp2 | sed 's/\\t/\\|\\&gt;/g' &gt; $file.lst;\n  rm temp temp2;\ndone\nfor file in *HGT.table.lst; do\n  perl ~/scripts/SelectList_Fasta.pl \\\n    $(basename $file .HGT.table.lst).bact.fa \\\n    $file \\\n    &gt; $(basename $file .lst).fa;\ndone\n\nTHERE ARE NO EVIDENCES FOR SIGNIFICANT BACTERIAL HORIZONTAL GENE TRANSFER.\n\n\n2.3.3.3 Evidence for HGT from Ascomycota\nWe can check the presence of fungal non-Saccharomyces genes and operons starting from the DIAMOND blast results we have.\n\n# Select non Saccharomyces genes\n# filter for genes with no top hits to Saccharomyces\nfor file in *tax; do\n  grep Ascomycota $file | grep -v Saccharomyces &gt; $file.Asco;\n  while read line; do\n    grep $line $file &gt; $file.Asco.all;\n    if [[ $(grep $line $file | grep Saccharomyces) ]]; then\n      continue;\n    else\n      echo $line;\n    fi;\n  done &lt; &lt;(cut -f 1 $file.Asco | sort -u) &gt; $file.Asco.candidates;\ndone\n\n# retrieve fasta sequences\nfor file in *candidates; do\nperl ~/scripts/SelectList_Fasta.pl \\\n  ../../11_domestication/00_prot_DB/$(basename $file\n  .diamond.tax.Asco.candidates) \\\n  $file &gt; $file.fa;\ndone\n\n# generate table stats\nfor i in 2 3; do\n  wc -l *candidates \\\n    | sed \"s/.SPAdes.*//g\" \\\n    | sed \"s/.aa.*//g\" \\\n    | sed \"s/.contigs.*//g\" \\\n    | grep -v total \\\n    | sed \"s/  / /g\" \\\n    | sed \"s/  / /g\" \\\n    | cut -f $i -d \" \" \\\n    &gt; temp.$i;\ndone;\n\npaste temp.3 temp.2 &gt; Vikings.Asco.HGT.stats;\n\n# clean up\nrm temp.2 temp.3\n\n\n\n\n\n\n\nKveik strains seems to have a significant higher number of Ascomycetes genes than the other industrial strains analysed. Are there additional proteins shared between all the kveiks (or by some kveiks with same geographical origin?). We can group these proteins in gene families and see if we see a common pattern. If not, we can BLAST back the proteins and see which specific genes have been acquired.\n\n# group candidates in gene families\n~/bin/OrthoFinder-2.3.3/orthofinder -f ./ \\\n  -t 20 \\\n  -M msa \\\n  -S diamond \\\n  -A mafft \\\n  -T iqtree \\\n  -I 2\n\nFrom OrthoFinder output we can identify 49 orthogroups containing four genes or more. We visualize them as heatmap, anc we can see that kveiks strains have a higher number of common additional orthogroups that are absent from S288C and industrial strains. Interestingly, the distribution pattern does not seem to overlap with the geographical isolation of the kveik culture.\n\n# import table\nheatfile = read.delim(\"data/p01-02/Vikings.Asco.HGT.heatmap.tab\", header = FALSE)\nheatfile$V2 = stringr::str_replace_all(heatfile$V2, \"x\", \"X\")\nheatfile = heatfile[which(heatfile$V2 %in% c(\n  \"Voss1\", \"SortdalEbbe1\", \"Muri\", \"Laerdal2\", \"k7R25\", \"Hornindal2\", \"Hornindal1\",\n  \"Granvin1\", \"9R40\", \"8R19\", \"7R7\", \"6R15\", \"46R37\", \"46R12\", \"45R11\", \"45P5\", \"44R7\", \"44R32\",\n  \"42R31\", \"42R20\", \"41R15\", \"41R10\", \"40R20\", \"40R1\", \"40R14\", \"3R11\", \"39R20\", \"38R16\", \"2R23\",\n  \"28R8\", \"28R33\", \"28R21\", \"28P6\", \"28P1\", \"27R17\", \"21R38\", \"21P1\", \"1R16\", \"19R18\", \"17P5\",\n  \"16R37\", \"16R23\", \"14R6\", \"14R30\"\n)), ]\n\n# relevel\nheatfile$V2 = factor(\n  heatfile$V2,\n  levels = c(\"41R10\", \"21R38\", \"9R40\", \"17P5\", \"SortdalEbbe1\", \"3R11\", \"21P1\", \"41R15\", \"Hornindal1\",\n             \"Hornindal2\", \"1R16\", \"2R23\", \"8R19\", \"Muri\",\n             \"k7R25\", \"38R16\", \"44R32\", \"19R18\", \"44R7\", \"6R15\", \"Laerdal2\", \"7R7\", \"14R6\", \"14R30\",\n             \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\",\n             \"42R20\", \"42R31\", \"45P5\", \"45R11\", \n             \"46R12\", \"46R37\", \"16R23\", \"16R37\",\n             \"39R20\", \"40R14\", \"40R1\", \"40R20\",\n             \"Granvin1\", \"Voss1\")\n)\n\n# set color labels\ncol_label = fills = c(\"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\",\n                      \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#92C5DE\", \"#92C5DE\",\n                      \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\",\n                      \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#FFDA00\", \"#FFDA00\",\n                      \"#FFDA00\", \"#FFDA00\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#A6611A\", \"#A6611A\",\n                      \"#A6611A\", \"#A6611A\", \"grey75\", \"grey75\")\n\n\n# prepare heatmap\nggplot(heatfile) +\n  geom_tile(aes(x = V1, y = V2, fill = V3), color = \"grey75\") +\n  scale_fill_gradientn(na.value = \"white\", limits = c(0, 2),\n                       colours = c(\"white\", \"steelblue\", \"steelblue\"),\n                       breaks = c(0, 1, 2)) +\n  coord_cartesian(expand = FALSE) +\n  labs(fill = \"Gene presence\",\n       y = \"Strain\",\n       x = \"Orthologous groups\") +\n  theme(axis.title = element_text(size = 16),\n        axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.5),\n        axis.text.y = element_text(size = 16, colour = col_label),\n        legend.position = \"none\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = 0.75)) +\n  annotate(xmin = 25.5, xmax = 32.5, \n           ymin = -Inf, ymax = Inf, \n           geom = \"rect\", alpha = 0,\n           colour = \"red\", linewidth = 1.5)\n\n\n\n\nFigure 2: Ascomycota HTG orthogroup candidates.\n\n\n\n\nVery well. Now, what are the gene families that are transferred to kveiks strains? Are they genuine HGT, or it is just artifacts from heuristic sequence similarity search? Let’s do manual BLAST to NCBI for the Orthogroups and see what pops up.\n\n\n\n\n\n\nWe can clearly identify two operons (OG0000024-OG0000031) that were transferred from Zygosaccharomzces parabailli to kveik strains 16R37, 42R31, 45P5, 45R11 and 46R37.\nThese strains come all from a small geographic area (Latvia [42R31, 45P5, 45R11] and Lithuania [16R37, 46R37]), suggesting a common origin of the HGT event that then spread. Interestingly, other isolates from the same culture (i.e.: 16R23, 42R20, 46R12) do not present such a HGT, supporting the idea of heterogeneous kvieks cultures.\n\n\n2.3.3.4 Zygosaccharomyces parabailli transferred operon\nThe transferred operons code for the genes: YNR058W, YHR204W, YHR205W, YHR206W, YHR207C, YHR208W, YER182W, YER183C.\n\n\n\n\n\n\nIt appears that indeed a genomic region with these 8 genes were transferred from Z. parabailli to the farmhouse yeasts. Noticeably, all farmhouse yeasts has the same relocation of YHR208W and an interrupted YHR205W.\n\n# genome seq\nyeast_seqs = utils::read.delim(\"data/p01-02/Vikings.Asco.HCT.seqs.txt\", header = TRUE, stringsAsFactors = FALSE) %&gt;%\n  dplyr::mutate(seq_id = stringr::str_replace_all(seq_id, \"\\\\\\\\n\", \"\\n\"))\nyeast_genes = utils::read.delim(\"data/p01-02/Vikings.Asco.HCT.genes.txt\", header = TRUE, stringsAsFactors = FALSE) %&gt;%\n  dplyr::mutate(seq_id = stringr::str_replace_all(seq_id, \"\\\\\\\\n\", \"\\n\"))\nyeast_ava = utils::read.delim(\"data/p01-02/Vikings.Asco.HCT.ava.txt\", header = TRUE, stringsAsFactors = FALSE) %&gt;%\n  dplyr::mutate(seq_id = stringr::str_replace_all(seq_id, \"\\\\\\\\n\", \"\\n\")) %&gt;%\n  dplyr::mutate(seq_id2 = stringr::str_replace_all(seq_id2, \"\\\\\\\\n\", \"\\n\"))\n\np_HGT3 = gggenomes::gggenomes(seqs = yeast_seqs, genes = yeast_genes, links = yeast_ava) +\n  geom_seq(size = 1) +\n  geom_bin_label(size = 4) +\n  geom_gene(aes(fill = name)) +\n  scale_fill_brewer(\"HGT genes\", palette = \"Set3\") +\n  geom_link(alpha = 0.25, show.legend = FALSE)\np_HGT3\n\n\n\n\nFigure 3: Ascomycota HTG microsynteny.\n\n\n\n\n\n2.3.3.4.1 Overrepresented GO BP terms\n\n### run over-represented analysis\nenriched_GOs = enrichGO(gene = HGT_genes$ENTREZ,\n                               universe = GO_universe,\n                               OrgDb = ref_DB_list[[1]],\n                               ont = \"BP\",\n                               pAdjustMethod = \"BH\",\n                               pvalueCutoff = 0.05,\n                               qvalueCutoff = 0.05)\n\nmy_table = enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ]\nmy_table = my_table %&gt;%\n  dplyr::mutate(\n    pvalue = base::signif(pvalue, digits = 3),\n    p.adjust = base::signif(p.adjust, digits = 3),\n    qvalue = base::signif(qvalue, digits = 3)\n  )\n\n# print table\nDT::datatable(\n  my_table,\n  extensions = c(\"FixedColumns\", \"FixedHeader\"),\n  caption = \"Table 7: Overrepresented BP terms in Zygosaccharomyces parabailli transferred operon.\", \n  plugins = \"ellipsis\",\n  options = list(\n    columnDefs = list(list(\n      targets = \"_all\",\n      render = JS(\"$.fn.dataTable.render.ellipsis( 30, false )\")\n    )),\n    overflow = \"hidden\",\n    whiteSpace = \"nowrap\",\n    scrollX = TRUE,\n    paging = TRUE,\n    fixedHeader = FALSE,\n    pageLength = 10\n  )\n)\n\n\n\n\n\n\n# plot GO dotplot\np0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5),\n        legend.position = \"bottom\",\n        strip.background = element_rect(fill = \"grey85\", colour = \"black\"),\n        strip.text = element_text(size = 12))\n\nprint(p0)\n\n\n\n\nFigure 4: Dotplot of overrepresented BP terms in Zygosaccharomzces parabailli transferred operon.\n\n\n\n\n\n\n2.3.3.4.2 Overrepresented GO MF terms\n\n### run over-represented analysis\nenriched_GOs = enrichGO(gene = HGT_genes$ENTREZ,\n                               universe = GO_universe,\n                               OrgDb = ref_DB_list[[1]],\n                               ont = \"MF\",\n                               pAdjustMethod = \"BH\",\n                               pvalueCutoff = 0.05,\n                               qvalueCutoff = 0.05)\n\nmy_table = enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ]\nmy_table = my_table %&gt;%\n  dplyr::mutate(\n    pvalue = base::signif(pvalue, digits = 3),\n    p.adjust = base::signif(p.adjust, digits = 3),\n    qvalue = base::signif(qvalue, digits = 3)\n  )\n\n# print table\nDT::datatable(\n  my_table,\n  extensions = c(\"FixedColumns\", \"FixedHeader\"),\n  caption = \"Table 8: Overrepresented MF terms in Zygosaccharomyces parabailli transferred operon.\", \n  plugins = \"ellipsis\",\n  options = list(\n    columnDefs = list(list(\n      targets = \"_all\",\n      render = JS(\"$.fn.dataTable.render.ellipsis( 30, false )\")\n    )),\n    overflow = \"hidden\",\n    whiteSpace = \"nowrap\",\n    scrollX = TRUE,\n    paging = TRUE,\n    fixedHeader = FALSE,\n    pageLength = 10\n  )\n)\n\n\n\n\n\n\n# plot GO dotplot\np0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) +\n  ggtitle(\"Zygosaccharomzces parabailli transferred operon over-represented GO MF terms sets\") +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5),\n        legend.position = \"bottom\",\n        strip.background = element_rect(fill = \"grey85\", colour = \"black\"),\n        strip.text = element_text(size = 12))\n\nprint(p0)\n\n\n\n\nFigure 5: Dotplot of overrepresented MF terms in Zygosaccharomzces parabailli transferred operon.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#sec-lesson-learnt-feature-selection",
    "href": "p01-02-genome-assembly-and-annotation.html#sec-lesson-learnt-feature-selection",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.4 Lessons Learnt",
    "text": "2.4 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#session-information",
    "href": "p01-02-genome-assembly-and-annotation.html#session-information",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.5 Session Information",
    "text": "2.5 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] org.Sc.sgd.db_3.18.0   AnnotationDbi_1.64.1   IRanges_2.36.0        \n [4] S4Vectors_0.40.2       Biobase_2.62.0         BiocGenerics_0.48.1   \n [7] RColorBrewer_1.1-3     magrittr_2.0.3         gridExtra_2.3         \n[10] gggenomes_1.0.1        ggplot2_3.5.2          DT_0.33               \n[13] ComplexHeatmap_2.18.0  clusterProfiler_4.10.1 circlize_0.4.16       \n\nloaded via a namespace (and not attached):\n  [1] jsonlite_2.0.0          shape_1.4.6.1           magick_2.8.7           \n  [4] farver_2.1.2            rmarkdown_2.29          GlobalOptions_0.1.2    \n  [7] fs_1.6.6                zlibbioc_1.48.2         vctrs_0.6.5            \n [10] memoise_2.0.1           RCurl_1.98-1.17         ggtree_3.10.1          \n [13] progress_1.2.3          htmltools_0.5.8.1       curl_6.4.0             \n [16] gridGraphics_0.5-1      sass_0.4.10             bslib_0.9.0            \n [19] htmlwidgets_1.6.4       plyr_1.8.9              cachem_1.1.0           \n [22] igraph_2.1.4            lifecycle_1.0.4         iterators_1.0.14       \n [25] pkgconfig_2.0.3         Matrix_1.6-5            R6_2.6.1               \n [28] fastmap_1.2.0           gson_0.1.0              GenomeInfoDbData_1.2.11\n [31] clue_0.3-66             digest_0.6.37           aplot_0.2.8            \n [34] enrichplot_1.22.0       colorspace_2.1-1        patchwork_1.3.1        \n [37] crosstalk_1.2.1         RSQLite_2.4.2           labeling_0.4.3         \n [40] filelock_1.0.3          httr_1.4.7              polyclip_1.10-7        \n [43] compiler_4.3.3          bit64_4.6.0-1           withr_3.0.2            \n [46] doParallel_1.0.17       S7_0.2.0                BiocParallel_1.36.0    \n [49] viridis_0.6.5           DBI_1.2.3               ggforce_0.5.0          \n [52] biomaRt_2.58.2          MASS_7.3-60.0.1         rappdirs_0.3.3         \n [55] rjson_0.2.23            HDO.db_0.99.1           tools_4.3.3            \n [58] ape_5.8-1               scatterpie_0.2.5        glue_1.8.0             \n [61] nlme_3.1-164            GOSemSim_2.28.1         shadowtext_0.1.5       \n [64] cluster_2.1.6           reshape2_1.4.4          fgsea_1.35.6           \n [67] generics_0.1.4          gtable_0.3.6            tzdb_0.5.0             \n [70] tidyr_1.3.1             data.table_1.17.8       hms_1.1.3              \n [73] xml2_1.3.8              tidygraph_1.3.1         XVector_0.42.0         \n [76] ggrepel_0.9.6           foreach_1.5.2           pillar_1.11.0          \n [79] stringr_1.5.1           yulab.utils_0.2.0       splines_4.3.3          \n [82] dplyr_1.1.4             tweenr_2.0.3            BiocFileCache_2.10.2   \n [85] treeio_1.26.0           lattice_0.22-5          bit_4.6.0              \n [88] tidyselect_1.2.1        GO.db_3.18.0            Biostrings_2.70.3      \n [91] knitr_1.50              xfun_0.52               graphlayouts_1.2.2     \n [94] matrixStats_1.5.0       stringi_1.8.7           lazyeval_0.2.2         \n [97] ggfun_0.2.0             yaml_2.3.10             evaluate_1.0.4         \n[100] codetools_0.2-19        ggraph_2.2.1            tibble_3.3.0           \n[103] qvalue_2.34.0           ggplotify_0.1.2         cli_3.6.5              \n[106] jquerylib_0.1.4         dichromat_2.0-0.1       Rcpp_1.1.0             \n[109] GenomeInfoDb_1.38.8     dbplyr_2.5.0            png_0.1-8              \n[112] XML_3.99-0.18           parallel_4.3.3          ellipsis_0.3.2         \n[115] readr_2.1.5             blob_1.2.4              prettyunits_1.2.0      \n[118] DOSE_3.28.2             bitops_1.0-9            viridisLite_0.4.2      \n[121] tidytree_0.4.6          scales_1.4.0            purrr_1.1.0            \n[124] crayon_1.5.3            GetoptLong_1.0.5        rlang_1.1.6            \n[127] cowplot_1.2.0           fastmatch_1.1-6         KEGGREST_1.42.0",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html",
    "href": "p01-03-variant-calling.html",
    "title": "3  Variant Calling",
    "section": "",
    "text": "3.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 6.5.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#on-this-page",
    "href": "p01-03-variant-calling.html#on-this-page",
    "title": "3  Variant Calling",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#variant-calling",
    "href": "p01-03-variant-calling.html#variant-calling",
    "title": "3  Variant Calling",
    "section": "3.2 Variant Calling",
    "text": "3.2 Variant Calling\nWe will now analyse the DNA variants between the sequenced farmhouse yeasts and the reference S. cerevisiae lab strain S288C. Genetic variants will be combined with information from the 151 yeast strains sequenced in Gallone et al 2019 used to reconstruct (kveiks) population structures, levels of heterozygosities, putative regions with Loss Of Heterozygosity (LOH) and the eventual genes affected by LOH.\n\n3.2.1 Reads alignment\nHere the steps are the standard I always do:\n\nalign reads to reference genome with bwa mem;\nsort the bam file by read position;\nmark reads duplicates with what used to be picard tools;\nassign read groups, so that each sequencing library is assigned to the right sample (necessary for when I merge the vcf files)\n\n\n## align reads to reference genome S288C\n# align reads\nDB=~/00_Brigida_starting_files/variants/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa\n\nwhile read line; do\n\n  bwa mem -t 72 \\\n    -K 100000000 \\\n    $DB \\\n    ../00_trim_reads/$line.R1.tr.fq.gz \\\n    ../00_trim_reads/$line.R2.tr.fq.gz \\\n    &gt; $line.S288C.align.sam;\n    \n  samtools view \\\n    -@ 72 \\\n    -Sb \\\n    $line.S288C.align.sam \\\n    &gt; $line.S288C.align.bam;\n  \n  samtools sort \\\n    -@ 72 \\\n    $line.S288C.align.bam $line.S288C.align.sort;\n  \n  rm $line.S288C.align.sam $line.S288C.align.bam;\n\ndone &lt; ../sample.lst\n\n## mark duplicates\nfor file in *.bam; do\n  ~/bin/gatk-4.0.11.0/gatk MarkDuplicates \\\n    --INPUT=$file \\\n    --OUTPUT=$(basename $file .bam).md.bam \\\n    --METRICS_FILE=$(basename $file .bam).md.log \\\n    --CREATE_INDEX=true;\ndone\n\n# assign read group\nwhile read line; do\n  ~/bin/gatk-4.0.11.0/gatk AddOrReplaceReadGroups \\\n    --INPUT $line.S288C.align.sort.md.bam \\\n    --OUTPUT $line.S288C.align.sort.md.r.bam \\\n    --RGID $line \\\n    --RGPL $line \\\n    --RGLB $line \\\n    --RGPU $line \\\n    --RGSM $line;\ndone &lt; ../sample.lst\n\n\n\n3.2.2 Variant Calling\nI run HaplotypeCaller in gVCF mode, sample ploidy 2 and calling all the kveiks positions at the same time to reduce the number of false positives.\n\n## run haplotype caller\nDB=~/00_Brigida_starting_files/variants/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa\n\nfor i in chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16; do\n  java -Xmx8g \\\n    -jar ~/bin/GenomeAnalysisTK-3.3-0-g37228af/GenomeAnalysisTK.jar \\\n    --logging_level INFO \\\n    --num_threads 4 \\\n    --analysis_type UnifiedGenotyper \\\n    --reference_sequence $DB \\\n    -I bam_files.list \\\n    -o S288C.variants.$i.gvcf \\\n    --intervals Saccharomyces_cerevisiae.EF4.73.dna.chromosome.$i.interval_list \\\n    --standard_min_confidence_threshold_for_calling 20 \\\n    -stand_emit_conf 30.0 \\\n    --min_base_quality_score 20 \\\n    -glm BOTH \\\n    --sample_ploidy 2 \\\n    --validation_strictness SILENT \\\n    --output_mode EMIT_ALL_SITES &\ndone\n\n# merge kveiks with with brigida's chromosomes\nfor i in chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16; do\n  bcftools merge \\\n    --threads 4 \\\n    --output-type z \\\n    --output all_plusKV.$i.vcf.gz \\\n    kveiks.S288C.variants.$i.gvcf.gz \\\n    ../03_Bri_chr/Scer.$i.raw.vcf.gz &\ndone\n\n# merge all chromosomes together\nbcftools concat \\\n  all_plusKV.chr1.vcf.gz \\\n  all_plusKV.chr2.vcf.gz \\\n  all_plusKV.chr3.vcf.gz \\\n  all_plusKV.chr4.vcf.gz \\\n  all_plusKV.chr5.vcf.gz \\\n  all_plusKV.chr6.vcf.gz \\\n  all_plusKV.chr7.vcf.gz \\\n  all_plusKV.chr8.vcf.gz \\\n  all_plusKV.chr9.vcf.gz \\\n  all_plusKV.chr10.vcf.gz \\\n  all_plusKV.chr11.vcf.gz \\\n  all_plusKV.chr12.vcf.gz \\\n  all_plusKV.chr13.vcf.gz \\\n  all_plusKV.chr14.vcf.gz \\\n  all_plusKV.chr15.vcf.gz \\\n  all_plusKV.chr16.vcf.gz \\\n  --output-type z \\\n  --output all_plusKV.vcf.gz \\\n  --threads 64\n\n\n\n3.2.3 Variant filtering and convert to plink bed input\nHere I filter for SNPs that are informative for Population Structure analysis. What I do:\n\napply hard filters to flag low quality positions;\nselect biallelic and high frequency SNPs, SNPs in linkage disequilibrium.\n\nHere I select biallelic SNPs and filter out minor allele frequency. Then I merge my vcf file with the vcf files from your dataset. After, I just invoke plink for generate the input files for FastStructure\n\n# hard filter low quality variants\njava -jar ~/bin/GenomeAnalysisTK-3.3-0-g37228af/GenomeAnalysisTK.jar \\\n  --analysis_type VariantFiltration \\\n  --variant all_plusKV.vcf.gz \\\n  --out all_plusKV.fltr.vcf \\\n  --reference_sequence $DB \\\n  --filterExpression \"QD &lt; 2.0\" --filterName \"QD_Low\" \\\n  --filterExpression \"MQ &lt; 40.0\" --filterName \"MQ_Low\" \\\n  --filterExpression \"GQ &lt; 30\" --filterName \"GQ_Low\" \\\n  --filterExpression \"AD &lt; 5\" --filterName \"AD_Low\"\n\n# select biallelic loci, filter for MAF and linkage disequilibrium\n~/bin/plink_linux_x86_64_20181202/plink \\\n  --make-bed \\\n  --double-id \\\n  --allow-extra-chr \\\n  --indep-pairwise 50 5 0.5 \\\n  --maf 0.05 \\\n  --biallelic-only \\\n  --geno 0.25 \\\n  --vcf all_plusKV.fltr.vcf.gz \\\n  --out all_plusKV.fltr.bi",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#farmhouse-yeasts-heterozygosity",
    "href": "p01-03-variant-calling.html#farmhouse-yeasts-heterozygosity",
    "title": "3  Variant Calling",
    "section": "3.3 Farmhouse yeasts heterozygosity",
    "text": "3.3 Farmhouse yeasts heterozygosity\nFarmhouse yeasts contains a high degree of Heterozygosity, comparable to yeast strains from the “mixed” Clade.\n\n# import dataset\nkveik_het = read.delim(\"./data/p01-03/all_plusKV.heterozygous.positions.txt\", header = TRUE)\n\n# sort \nkveik_het$Pop = factor(kveik_het$Pop,\n                       levels = c(\"Farmhouse\", \"Asian\", \"Beer1\", \"Beer2\", \"Bread\",\n                                  \"Mixed\", \"Mosaic\", \"Sake\", \"Wild\", \"Wine\"))\nkveik_het$Pop = relevel(kveik_het$Pop, \"Farmhouse\")\nkveik_het$Geographic.origin = ifelse(\n  kveik_het$Geographic.origin == \"Central-E Norway\",\n  \"C-E Norway\",\n  kveik_het$Geographic.origin\n)\n\ncolnames(kveik_het) = c(\"ID\", \"Pop\", \"HET_CT\", \"Subpopulation\", \"Geographic.origin\")\n\n# mapping swap_yeasts\nto_swap = data.frame(\n  old_name = c(\"21P1\", \"17P5\", \"45P5\", \"28P1\", \"28P6\"),\n  new_name = c(\"21R40\", \"17R20\", \"45R38\", \"28R31\", \"28R1\")\n)\n\n# import final clade list\nfinal_clades = read.table(\n  \"./data/p02-04/final_clades_for_pub.txt\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p01-03/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot_raw$Strain = stringr::str_replace(\n    tree_annot_raw$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot_raw$Name = stringr::str_replace(\n    tree_annot_raw$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot_raw %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$niche1 == \"farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\ntree_annot = tree_annot[, -which(colnames(tree_annot) %in% c(\"niche1\", \"niche2\", \"niche3\", \"group\", \"seq_name\", \"Mosaic\"))]\ncolnames(tree_annot) = c(\"Strain\", \"ID\", \"Clade\")\ntree_annot$ID = stringr::str_replace_all(tree_annot$ID, \"x\", \"X\")\n\n\n# merge\nkveik_het = merge(kveik_het, tree_annot, by = \"ID\")\nkveik_het = kveik_het[, which(colnames(kveik_het) %in% c(\"ID\", \"HET_CT\", \"Pop\", \"Culture\", \"Subpopulation\", \"Geographic.origin\", \"Clade\"))]\n\n\n\n#------------------------------------------------------------------------------#\n## 2.2 - Heterozigous position - all                                        ####\n\n# t-test\ntests = kveik_het %&gt;%\n  dplyr::filter(!(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\"))) %&gt;%\n  rstatix::t_test(HET_CT ~ Clade, ref.group = \"Farmhouse\")\n\nkveik_het$Clade = factor(kveik_het$Clade,\n  levels = c(\"Farmhouse\", \"Asia\", \"Beer1\", \"Beer2\", \"Mixed\", \"Other\", \"Wine\"))\nkveik_het$Clade = relevel(kveik_het$Clade, \"Farmhouse\")\n\n# plot\np_het = ggplot(kveik_het, aes(x = Clade, y = HET_CT)) +\n  geom_violin(aes(fill = Clade), alpha = 0.2,\n              scale = \"width\",\n              trim = FALSE) +\n  geom_point(data = ~dplyr::filter(.x, !(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\"))),\n             aes(fill = Clade),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  stat_summary(fun = \"median\", colour = \"red\", geom = \"crossbar\") +\n  geom_vline(xintercept = 1.5) +\n  geom_point(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n             aes(fill = \"red\"),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  geom_text(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n            aes(label = as.character(ID)),\n            hjust = 0, vjust = 0, color = \"red\") +\n  scale_fill_manual(values = c(\"#2297e6\", \"#df536b\", \"#61d04f\", \"#28e2e5\", \"#cd0bbc\", \"grey75\", \"#bcf60c\",\n                               \"red\")) +\n  ggpubr::stat_compare_means(method = \"anova\", label.x = 1.1, label.y = 98000) +\n  annotate(\"text\", x = 2,  y = 95000, label = c(tests$p.adj.signif)[[1]]) +\n  annotate(\"text\", x = 3,  y = 95000, label = c(tests$p.adj.signif)[[2]]) +\n  annotate(\"text\", x = 4,  y = 95000, label = c(tests$p.adj.signif)[[3]]) +\n  annotate(\"text\", x = 5,  y = 95000, label = c(tests$p.adj.signif)[[4]]) +\n  annotate(\"text\", x = 6,  y = 95000, label = c(tests$p.adj.signif)[[5]]) +\n  annotate(\"text\", x = 7,  y = 95000, label = c(tests$p.adj.signif)[[6]]) +\n  scale_y_continuous(labels = scales::comma,\n                     limits = c(1, 100000)) +\n  labs(title = \"Heterozygosity in yeast populations\",\n       x = \"Clade / Niche\",\n       y = \"# heterozygous\\npositions\") +\n  theme(title = element_blank(),\n        axis.text.x = element_text(hjust = 0.95, angle = 60, size = 16),\n        axis.text.y = element_text(size = 16),\n        axis.title = element_text(size = 18),\n        legend.position = \"none\",\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(colour = \"grey75\"),\n        panel.grid.minor.y = element_blank())\n\n\n\n#------------------------------------------------------------------------------#\n## 2.3 - Heterozigous position - kveiks                                     ####\n\n# t-test\nkveik_comp = kveik_het[which(kveik_het$Pop == \"Farmhouse\" & kveik_het$Subpopulation != \"Beer1\"), ]\nkveik_comp$Subpopulation = \"All Farmhouse\"\nkveik_comp$Geographic.origin = \"All Farmhouse\"\n#kveik_comp$Culture = \"All Farmhouse\"\nkveik_comp = rbind(kveik_comp, kveik_het[which(kveik_het$Pop == \"Farmhouse\" & kveik_het$Subpopulation != \"Beer1\"), ])\n\ntests_geo = kveik_comp %&gt;% \n  dplyr::filter(!(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\", \"39R20\"))) %&gt;%\n  rstatix::t_test(HET_CT ~ Geographic.origin, ref.group = \"All Farmhouse\")\n\ntests_geo[6, ] = list(\"HET_CT\", \"All Farmhouse\", \"Russia\", 37, 1, 0, 0, 1, 1, \"ns\")\n\n# plot\nkveik_comp = kveik_het[which(kveik_het$Pop == \"Farmhouse\" & kveik_het$Subpopulation != \"Beer1\"), ]\n\np_het2 = ggplot(kveik_comp, aes(x = Geographic.origin, y = HET_CT)) +\n  geom_violin(aes(fill = Geographic.origin), alpha = 0.2,\n              scale = \"width\",\n              trim = FALSE) +\n  geom_point(data = ~dplyr::filter(.x, !(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\"))),\n             aes(fill = Geographic.origin),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  geom_point(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n             aes(fill = \"red\"),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  stat_summary(fun = \"median\", colour = \"red\", geom = \"crossbar\") +\n  geom_text(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n            aes(label = as.character(ID)),\n            hjust = 0, vjust = 0, color = \"red\") +\n  scale_fill_manual(values = c(\"green\", \"#FFDA00\", \"orange\", \"#0571B0\", \"red\", \"#A6611A\", \"#92C5DE\")) +\n  scale_x_discrete(labels = scales::label_wrap(10)) +\n  scale_y_continuous(labels = scales::comma,\n                     limits = c(1, 100000)) +\n  ggpubr::stat_compare_means(method = \"anova\", label.x = 1.1, label.y = 98000) +\n  annotate(\"text\", x = 1,  y = 95000, label = c(tests_geo$p.adj.signif)[[1]]) +\n  annotate(\"text\", x = 2,  y = 95000, label = c(tests_geo$p.adj.signif)[[2]]) +\n  annotate(\"text\", x = 3,  y = 95000, label = c(tests_geo$p.adj.signif)[[3]]) +\n  annotate(\"text\", x = 4,  y = 95000, label = c(tests_geo$p.adj.signif)[[4]]) +\n  annotate(\"text\", x = 5,  y = 95000, label = c(tests_geo$p.adj.signif)[[5]]) +\n  annotate(\"text\", x = 6,  y = 95000, label = c(tests_geo$p.adj.signif)[[6]]) +\n  labs(x = \"Geographic origin\") +\n  theme(title = element_blank(),\n        axis.text.x = element_text(hjust = 0.95, angle = 60, size = 16),\n        axis.text.y = element_blank(),\n        axis.title.x = element_text(size = 18),\n        axis.title.y = element_blank(),\n        legend.position = \"none\",\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(colour = \"grey75\"),\n        panel.grid.minor.y = element_blank())\n\n\nggpubr::ggarrange(\n  p_het, p_het2,\n  ncol = 2, nrow = 1,\n  align = \"h\",\n  widths = c(1, 0.5)\n)\n\n\n\n\nFigure 1: Boxplot depicting total number of heterozygous sites per genetic clade (right) and geographical origin of farmhouse yeast (right).",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#loss-of-heterozygosity-loh",
    "href": "p01-03-variant-calling.html#loss-of-heterozygosity-loh",
    "title": "3  Variant Calling",
    "section": "3.4 Loss Of Heterozygosity (LOH)",
    "text": "3.4 Loss Of Heterozygosity (LOH)\n\n# import LOH matrix\nLOH_table_10kb = read.delim(\"./data/p01-03/Vikings.LOH.10kb_win.tab\", header = FALSE)\ncolnames(LOH_table_10kb) = c(\"strain\", \"chr\", \"start\", \"stop\", \"n_var\")\n\n# format\nLOH_table_10kb$chr = factor(\n  LOH_table_10kb$chr,\n  levels = c(\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\",\n             \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\")\n)\n\n# relevel\nLOH_table_10kb = LOH_table_10kb[which(LOH_table_10kb$strain %in% c(\n  \"41R10\", \"21R38\", \"9R40\", \"17P5\", \"SortdalEbbe1\", \"3R11\", \"21P1\", \"41R15\", \"Hornindal1\",\n  \"Hornindal2\", \"1R16\", \"2R23\", \"8R19\", \"Muri\",\n  \"k7R25\", \"38R16\", \"44R32\", \"19R18\", \"44R7\", \"6R15\", \"Laerdal2\", \"7R7\", \"14R6\", \"14R30\",\n  \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\",\n  \"42R20\", \"42R31\", \"45P5\", \"45R11\", \n  \"46R12\", \"46R37\", \"16R23\", \"16R37\",\n  \"39R20\", \"40R14\", \"40R1\", \"40R20\",\n  \"Granvin1\", \"Voss1\"\n)), ]\n\nLOH_table_10kb$strain = factor(\n  LOH_table_10kb$strain,\n  levels = c(\"41R10\", \"21R38\", \"9R40\", \"17P5\", \"SortdalEbbe1\", \"3R11\", \"21P1\", \"41R15\", \"Hornindal1\",\n             \"Hornindal2\", \"1R16\", \"2R23\", \"8R19\", \"Muri\",\n             \"k7R25\", \"38R16\", \"44R32\", \"19R18\", \"44R7\", \"6R15\", \"Laerdal2\", \"7R7\", \"14R6\", \"14R30\",\n             \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\",\n             \"42R20\", \"42R31\", \"45P5\", \"45R11\", \n             \"46R12\", \"46R37\", \"16R23\", \"16R37\",\n             \"39R20\", \"40R14\", \"40R1\", \"40R20\",\n             \"Granvin1\", \"Voss1\")\n)\n\n\n# import coverage dataset\nfile_list = list.files(\n  path = \"./data/p01-03/01_start_bed/\",\n  pattern = \"1kb_cov.bed\",\n  full.names = TRUE,\n  ignore.case = FALSE\n)\n\n# declare average df\naverage_table = data.frame(\n  strain = character(),\n  average = double(),\n  max = double(),\n  sd = double(),\n  stringsAsFactors = FALSE\n)\n\n# declare cov df\ncoverage_table = data.frame(\n  strain = character(),\n  chr = character(),\n  start = integer(),\n  stop = integer(),\n  cov = double(),\n  stringsAsFactors = FALSE\n)\n\n# import coverage counts per strain\nfor(file_to_import in file_list){\n  \n  tmp_table = read.delim(file_to_import, header = FALSE)\n  \n  colnames(tmp_table) = c(\"strain\", \"chr\", \"start\", \"stop\", \"cov\")\n  tmp_table = tmp_table[which(tmp_table$chr != \"ref|NC_001224|\"), ]\n  \n  strain_name = stringr::str_remove(file_to_import, \".align.sort.1kb_cov.bed\")\n  strain_name = stringr::str_remove(strain_name, \"./data/p01-03/01_start_bed//\")\n  average_table = rbind(\n    average_table,\n    data.frame(\n      \"strain\" = strain_name,\n      \"average\" = mean(tmp_table$cov),\n      \"max\" = max(tmp_table$cov),\n      \"sd\" = sd(tmp_table$cov)\n    )\n  )\n  \n  tmp_table = tmp_table[which(tmp_table$cov &lt;= mean(tmp_table$cov)+sd(tmp_table$cov)), ]\n  tmp_table$stop_y = NA\n  \n  coverage_table = rbind(coverage_table, tmp_table)\n  \n  coverage_table[which(coverage_table$strain == strain_name), \"stop_y\"] = max(coverage_table$cov)\n  \n}\n\n\n# format\ncoverage_table$chr = factor(\n  coverage_table$chr,\n  levels = c(\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\",\n             \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\")\n)\n\n# plot \np_LOH1 = ggplot() +\n  geom_rect(data = subset(\n    coverage_table,\n    chr %in% c(\"I\", \"III\", \"V\", \"VII\", \"IX\", \"XI\", \"XIII\", \"XV\")),\n    fill = \"grey95\",\n    xmin = 0, xmax = max(coverage_table$stop),\n    ymin = 0, ymax = max(coverage_table$cov),\n    alpha = 0.3) +\n  geom_hline(data = average_table, \n             aes(yintercept = average),\n             color = \"firebrick\") +\n  geom_line(data = LOH_table_10kb,\n            aes(x = start, y = n_var),\n            color = \"royalblue4\",\n            linewidth = 0.25) +\n  scale_fill_manual(values = c(\"steelblue\", \"white\", \"salmon\", \"grey95\")) +\n  scale_y_continuous(labels = function(x) format(x, big.mark = \",\", scientific = FALSE)) +\n  #scale_y_continuous(limits = c(0, 350)) +\n  coord_cartesian(expand = FALSE) +\n  annotation_custom(grid::linesGrob(y = c(0, 0), gp = grid::gpar(lwd = 3))) +\n  facet_grid2(strain ~ chr,\n              scales = \"free\",\n              space = \"free_x\",\n              switch = \"both\",\n              strip = strip_themed(\n                background_y = elem_list_rect(fill = c(\n                  \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\",\n                  \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\",\n                  \"#92C5DE\", \"#92C5DE\",\n                  \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\",\n                  \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#FFDA00\", \"#FFDA00\",\n                  \"#FFDA00\", \"#FFDA00\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#A6611A\", \"#A6611A\",\n                  \"#A6611A\", \"#A6611A\", \"#51CD34\", \"#51CD34\"\n                ))\n              )) +\n  theme(plot.title = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text = element_blank(),\n        legend.position = \"none\",\n        panel.background = element_blank(),\n        panel.border = element_blank(),\n        panel.spacing = unit(0, \"lines\"),\n        strip.background = element_blank(),\n        strip.text.x = element_text(size = 8),\n        strip.text.y.left = element_text(size = 8, angle = 0, face = \"bold\"))\n\np_LOH1\n\n\n\n\nFigure 2: Loss Of Heterozygotisy events across the genomes of the sequenced Farmhouse yeasts.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#search-for-signature-of-culture-28-hybridization",
    "href": "p01-03-variant-calling.html#search-for-signature-of-culture-28-hybridization",
    "title": "3  Variant Calling",
    "section": "3.5 Search for signature of Culture #28 hybridization",
    "text": "3.5 Search for signature of Culture #28 hybridization\nWe look for variants in common between strains\n\n# split vcf in samples\nfor sample in `bcftools query -l kveiks.fltr.CE-Norway.vcf`; do\n  bcftools view -c1 -Oz -s $sample -o kveiks.fltr.CE-Norway.$sample.vcf kveiks.fltr.CE-Norway.vcf &\ndone\n\n# normalize and get positions Culture #28\nfor sample in 28P1 28P6 28R21 28R33 28R8; do\n  bcftools norm -m-any kveiks.fltr.CE-Norway.$sample.vcf \\\n  | bcftools norm --check-ref w -f ../00_ref_genomes/Scer.fa \\\n  | bcftools annotate -Ob -x 'ID' -I +'%CHROM:%POS:%REF:%ALT' \\\n  &gt; kveiks.fltr.CE-Norway.$sample.bcf ;\n  bcftools index kveiks.fltr.CE-Norway.$sample.bcf;\n  bcftools view kveiks.fltr.CE-Norway.$sample.bcf \\\n  | cut -f3 | grep -v \"^##\" | grep -v \"^ID\" \\\n  &gt; kveiks.fltr.CE-Norway.$sample.lst\ndone\n\n# get Culture #16 positions\nfor sample in 16R23 16R37 46R12 46R37; do\n  bcftools norm -m-any kveiks.fltr.Lithuania.$sample.vcf \\\n  | bcftools norm --check-ref w -f ../00_ref_genomes/Scer.fa \\\n  | bcftools annotate -Ob -x 'ID' -I +'%CHROM:%POS:%REF:%ALT' \\\n  &gt; kveiks.fltr.Lithuania.$sample.bcf ;\n  bcftools index kveiks.fltr.Lithuania.$sample.bcf;\n  bcftools view kveiks.fltr.Lithuania.$sample.bcf \\\n  | cut -f3 | grep -v \"^##\" | grep -v \"^ID\" \\\n  &gt; kveiks.fltr.Lithuania.$sample.lst\ndone\n\n\nlist_28R31 = read.delim(\"./data/p01-03/kveiks.fltr.CE-Norway.28P1.lst\", header = FALSE)\nlist_28R1 = read.delim(\"./data/p01-03/kveiks.fltr.CE-Norway.28P6.lst\", header = FALSE)\nlist_28R21 = read.delim(\"./data/p01-03/kveiks.fltr.CE-Norway.28R21.lst\", header = FALSE)\nlist_28R33 = read.delim(\"./data/p01-03/kveiks.fltr.CE-Norway.28R33.lst\", header = FALSE)\nlist_28R8 = read.delim(\"./data/p01-03/kveiks.fltr.CE-Norway.28R8.lst\", header = FALSE)\n\nUpSetR::upset(\n  UpSetR::fromList(\n    list(\n      `28R1` = list_28R1$V1,\n       `28R8` = list_28R8$V1,\n       `28R21` = list_28R21$V1,\n       `28R31` = list_28R31$V1,\n       `28R33` = list_28R33$V1)\n  ),\n  order.by = \"freq\",\n  keep.order = TRUE\n)\n\n\n\n\nFigure 3: Culture #28 CE-Norway hybridization event.\n\n\n\n\n\nlist_16R23 = read.delim(\"./data/p01-03/kveiks.fltr.Lithuania.16R23.lst\", header = FALSE)\nlist_16R37 = read.delim(\"./data/p01-03/kveiks.fltr.Lithuania.16R37.lst\", header = FALSE)\nlist_46R12 = read.delim(\"./data/p01-03/kveiks.fltr.Lithuania.46R12.lst\", header = FALSE)\nlist_46R37 = read.delim(\"./data/p01-03/kveiks.fltr.Lithuania.46R37.lst\", header = FALSE)\n\nUpSetR::upset(\n  UpSetR::fromList(\n    list(\n      `16R23` = list_16R23$V1,\n      `16R37` = list_16R37$V1,\n      `46R12` = list_46R12$V1,\n      `46R37` = list_46R37$V1)\n  ),\n  order.by = \"freq\",\n  keep.order = TRUE\n)\n\n\n\n\nFigure 4: Culture #16 Lithuania hybridization event.\n\n\n\n\nLet’s try to phase Culture 28 with the predict correct parents and with the wrong parents. If the phased genome with the correct parents have significant more phased SNPs than the one with the wrong parents, maybe we can infer that Culture #28 is indeed an hybrid.\ncorrect parents 28R21 28P6 28R33\nwrong parents 28R21 28P1 28R8 28R21 28P1 27R17 28R21 28R8 27R17 28R21 28P6 27R17\n\n\nDB=~/00_Brigida_starting_files/variants/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa\n\n# phase with Whatshap\nwhatshap phase -o phased.vcf.gz --reference=$DB culture28.vcf.gz 28R21_28P6_28R33.align.bam\nwhatshap phase -o phased.wrongparents1.vcf.gz --reference=$DB culture28.wrongparents1.vcf.gz 28R21_28P1_28R8.align.bam\nwhatshap phase -o phased.wrongparents2.vcf.gz --reference=$DB culture28.wrongparents2.vcf.gz 28R21_28P1_27R17.align.bam\nwhatshap phase -o phased.wrongparents3.vcf.gz --reference=$DB culture28.wrongparents3.vcf.gz 28R21_28R8_27R17.align.bam\nwhatshap phase -o phased.wrongparents4.vcf.gz --reference=$DB culture28.wrongparents4.vcf.gz 28R21_28P6_27R17.align.bam\n\n# generate tabular output for plotting\npython3.6 Vikings.culture_phasing_summary.py --input culture28.vcf.gz --name 28R21_28P6_28R33\npython3.6 Vikings.culture_phasing_summary.py --input culture28.wrongparents1.vcf.gz --name 28R21_28P1_28R8\npython3.6 Vikings.culture_phasing_summary.py --input culture28.wrongparents2.vcf.gz --name 28R21_28P1_27R17\npython3.6 Vikings.culture_phasing_summary.py --input culture28.wrongparents3.vcf.gz --name 28R21_28R8_27R17\npython3.6 Vikings.culture_phasing_summary.py --input culture28.wrongparents4.vcf.gz --name 28R21_28P6_27R17\n\n\n# import\nphased = read.delim(\"./data/p01-03/culture28.phasing.txt\")\n\n# melt\nphased_melted = reshape2::melt(phased)\n\n# plot\nggplot(phased_melted, aes(x = variable, y = value)) +\n  geom_bar(aes(fill = variable), color = \"grey45\", stat = \"identity\") +\n  geom_text(aes(label = value), vjust = 0) +\n  scale_fill_manual(values = c(\"firebrick\", \"steelblue1\", \"steelblue3\", \"steelblue4\")) +\n  facet_grid(trios ~ chr) +\n  theme_bw() +\n  theme(axis.title = element_blank(),\n        axis.text.y = element_text(size = 16),\n        axis.text.x = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.5),\n        legend.position = \"none\")\n\n\n\n\nFigure 5: Culture #28 Phasing combinations.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#genome-domestication-signature",
    "href": "p01-03-variant-calling.html#genome-domestication-signature",
    "title": "3  Variant Calling",
    "section": "3.6 Genome Domestication Signature",
    "text": "3.6 Genome Domestication Signature\nNow we try to identify genetic signatures in the Kveiks lineage that hints to genome domestication or potential interesting brewing and industrial phenotypes. The idea is to look for the genes and the respective alleles involved in: copper tolerance, production of Phenolic Off-Flavours, maltose/maltotriose metabolism, ethanol resistance, amilase activity, glycerol production, temperature tolerance, heat-shock proteins, sulfites production, flocculation, desiccation tolerance, presence of Killer Toxins.\nTo achieve this we follow an approach based on sequence similarity search, variant calling and- based and phylogeny based:\n\nwe will look for genes involved in industrial phenotypes but absent in S288C with a sequence similarity search.\nwe will look at loss of function (internal premature stop codons and frame-shifts) for genes involved in industrial phenotypes.\nwe will look at Kveiks allelic variants and compare them to the variaat sin other industrial yeast strains to discover conserved patterns.\nwe will cluster phylogenetically kveiks and other industrial strains in a phenotype-wise manner.\n\n\n3.6.1 Identifying genes missing in S288C\nSome genes involved in industrial phenotypes are absent in S288C. In order to discover their presence in the sequenced kveiks, we will download the protein sequences of the genes of interest from SGD (https://www.yeastgenome.org/) and perform a sequence similarity search against the predicted proteins for each kveik strain.\n\n# create protein databases\nfor file in *fasta; do makeblastdb -dbtype prot -in $file; done\n\n## BLASTp\n# EthanolResistance\nfor GENE in MPR1; do\n    for file in ../00_prot_DB/*fasta; do\n        blastp -db $file -query EthanolResistance.$GENE.aa.fa \\\n            -out $GENE.$(basename $file .fasta).BLASTp.ER \\\n            -num_threads 8 -outfmt 6 -threshold 0.9 -qcov_hsp_perc 0.7;\n    done;\ndone\n\n# Amilase activity\nfor GENE in STA1 STA2; do\n    for file in ../00_prot_DB/*fasta; do\n        blastp -db $file -query AmilaseActivity.$GENE.aa.fa \\\n            -out $GENE.$(basename $file .fasta).BLASTp.AA \\\n            -num_threads 8 -outfmt 6 -threshold 0.9 -qcov_hsp_perc 0.7;\n    done;\ndone\n\n# KillerToxin\nfor TOXIN in KHM1 KHR1 KHS1; do\n    for file in ../00_prot_DB/*fasta; do\n        blastp -db $file -query KillerToxins.$TOXIN.aa.fa \\\n            -out $TOXIN.$(basename $file .fasta).BLASTp.KT \\\n            -num_threads 8 -outfmt 6 -threshold 0.9 -qcov_hsp_perc 0.7;\n    done;\ndone\n\n\n\n3.6.2 Annotate variants\nWe use SnpEff to annotate variants effect.\nTo run SnpEff, first we need to add reference S288C genome to snpEff. To do so, we modify the config file: ~/bin/snpEff/snpEff.config. by adding teh following lines:\n# S288C GENOME\nScere64K: Scere64K\nThe, we copy the proteins, transcripts and fasta files to ~/bin/snpEff/data.\n\nmkdir ~/bin/snpEff/data/Scere64K\ncp Scere64K.aa.fa /bin/snpEff/data/S4.consensus/protein.fa\ncp Scere64K.genes.gff ~/bin/snpEff/data/S4.consensus.genes.gff\ncp Scere64K.cds.fa ~/bin/snpEff/data/S4.consensus/genes.fa\ncp Scere64K.fa ~/bin/snpEff/data/S4.consensus/sequences,fa\n\nand build the reference database:\n\njava -jar ~/bin/snpEff/snpEff.jar build -gff3 -v Scere64K\n\nNow we can run SnpEff on a subset of variants composed by the kveiks strains plus the 22 additional industrial strains that we used as comparing in the previous analyses.\n\n# select species for genome domestication\n~/bin/bcftools-1.9/bcftools view \\\n  --samples-file species_list.lst \\\n    --force-samples \\\n    --threads 16 \\\n    --min-alleles 2 \\\n    --output-type z ../08_GATK_variants3.3/all_plusKV.fltr.backup.vcf.gz \\\n    &gt; all_plusKV.fltr.backup.reduced.vcf.gz\n\n# annotate variants\njava -jar ~/bin/snpEff/snpEff.jar eff \\\n    Scere64K \\\n    all_plusKV.fltr.backup.reduced.vcf.gz \\\n    &gt; all_plusKV.fltr.backup.reduced.snpEff.vcf;\nmv snpEff_genes.txt all_plusKV.fltr.backup.reduced.snpEff_genes.txt;\nmv snpEff_summary.html all_plusKV.fltr.backup.reduced.vcf.snpEff_summary.html;\n\n\n\n3.6.3 Parse variants\nNow we can select the subset of variants that falls between gene of interest for industrial applications.\n\n# select variants\nwhile read line; do\n    CAT=$(echo $line | cut -f 1 -d \" \");\n    GENE=$(echo $line | cut -f 2 -d \" \");\n    CHR=$(echo $line | cut -f 4 -d \" \");\n    START=$(echo $line | cut -f 5 -d \" \");\n    STOP=$(echo $line | cut -f 6 -d \" \");\n    tabix all_plusKV.fltr.backup.reduced.snpEff.vcf.gz \\\n        \"${CHR}\":\"${START}\"-\"${STOP}\" &gt; $CAT.$GENE.variants.vcf;\ndone &lt; Domestication.genes.windows.lst\n\n# reformat output for plotting\nfor DIR in 0[1-9]* 1[0-2]*; do\n    for file in $DIR/*.vcf; do\n        python3.5 Vikings_domesticationVCFparser.py \\\n            --input $file \\\n            --samples vcf_sample_positions.txt;\n    done \\\n    | sed \"s|$DIR/||g\" \\\n    | perl -ne '@a = &lt;&gt;; print sort { length $b &lt;=&gt; length $a } @a' \\\n  &gt; variant.\"${DIR}\"_all.tab &\ndone\n\nwhile read line; do\n    for file in variants.*_all.tab; do\n        OLD=$(echo $line | cut -f 2 -d \" \");\n        NEW=$(echo $line | cut -f 3 -d \" \");\n        sed -i \"s/$OLD/$NEW/g\" $file;\n    done;\ndone &lt; Domestication.genes.windows.lst \n\nLet’s plot them.\n\n# plot\nphenotypes = list(\n  \"01_coppertolerance\",\n  \"02_POF\",\n  \"03_maltosemaltotriose\",\n  \"04_ethanolresistance\",\n  \"05_amilaseactivity\",\n  \"06_glycerol\",\n  \"07_temperaturetolerance\",\n  \"08_heatshock\",\n  \"09_sulfites\",\n  \"10_flocculation\",\n  \"11_dessication\",\n  \"12_killertoxin\"\n)\n\ncolor_list = c(\n  \"grey85\", \"white\", \"#a2d5c6\", \"#077b8a\", \"#d72631\", \"#5c3c92\",\n  \"#e75874\", \"#be1558\", \"#fbcbc9\", \"#322514\", \"#1e3d59\", \"#ff6e40\",\n  \"#ffc13b\", \"#ecc19c\", \"#1e847f\", \"#000000\", \"#d9a5b3\", \"#1868ae\",\n  \"#c6d7eb\", \"#da68a0\", \"#77c593\", \"#ed3572\", \"#1d3c45\", \"#d2601a\",\n  \"#fff1e1\", \"#097770\", \"#ffea04\", \"#b85042\", \"#ffcce7\", \"#daf2dc\",\n  \"#e1dd72\", \"#a8c66c\", \"#1b6535\"\n)\n\nplot_list = list()\n\nfor (i in 1:length(phenotypes)){\n  \n  name = phenotypes[i]\n  file = paste0(\"./data/p01-03/variants.\", name, \"_all.tab\")\n  # dataset = read.delim(file, header = FALSE, fill = TRUE)\n  dataset = read.delim(file, header = FALSE)\n  \n  dataset$V3 = factor(\n    dataset$V3,\n    levels = c(\n      \"14R30\", \"14R6\", \"16R23\", \"16R37\", \"17P5\", \"19R18\", \"1R16\", \"21P1\", \"21R38\", \"27R17\", \"28P1\",\n       \"28P6\", \"28R21\", \"28R33\", \"28R8\", \"2R23\", \"38R16\", \"39R20\", \"3R11\", \"40R14\", \"40R1\", \"40R20\",\n       \"41R10\", \"41R15\", \"42R20\", \"42R31\", \"44R32\", \"44R7\", \"45P5\", \"45R11\", \"46R12\", \"46R37\", \"6R15\",\n       \"7R7\", \"8R19\", \"9R40\", \"Granvin1\", \"Hornindal1\", \"Hornindal2\", \"k7R25\", \"Laerdal2\", \"Muri\", \"SortdalEbbe1\",\n       \"Voss1\", \"X5000\", \"X5009\", \"X6004\", \"x97\", \"X1002\", \"X1014\", \"X1030\", \"X1129\", \"X5508\", \"X1007\",\n       \"X1118\", \"X1148\", \"X7078\", \"X1011\", \"X1091\", \"X1111\", \"X1119\", \"X8003\", \"X35\", \"X1046\", \"X4037\", \"X4051\"\n    )\n  )\n  \n  dataset$V6 = factor(\n    dataset$V6,\n    levels = c(\n      \"NO_COV\", \"REF\", \"0/1\", \"1/1\", \"0/2\", \"0/3\", \n      \"0/4\", \"0/6\", \"1/2\", \"1/3\", \"1/4\", \"1/5\",\n      \"1/6\", \"1/8\", \"2/1\", \"2/2\", \"2/3\", \"2/4\",\n      \"2/5\", \"3/1\", \"3/2\", \"3/3\", \"3/4\", \"4/1\",\n      \"4/3\", \"4/4\", \"5/1\", \"5/5\", \"5/6\", \"7/7\",\n      \"7/8\", \"8/8\", \"./.\"\n    )\n  )\n  \n  ### create the plot\n  p1 = ggplot(dataset, aes(V3, V5)) + \n    geom_tile(aes(fill = V6)) +\n    geom_vline(aes(xintercept = 44.5), color = \"grey50\", size = 0.125) +\n    geom_vline(aes(xintercept = 48.5), color = \"grey50\", size = 0.125) +\n    geom_vline(aes(xintercept = 53.5), color = \"grey50\", size = 0.125) +\n    geom_vline(aes(xintercept = 57.5), color = \"grey50\", size = 0.125) +\n    geom_vline(aes(xintercept = 61.5), color = \"grey50\", size = 0.125) +\n    geom_vline(aes(xintercept = 62.5), color = \"grey50\", size = 0.125) +\n    scale_fill_manual(values = color_list) +\n    coord_cartesian(expand = FALSE) +\n    facet_wrap(~V2, nrow = 1, scales = \"free\",\n               strip.position = \"bottom\") +\n    labs(fill = \"Genotype\",\n         y = \"Positions\") +\n    theme(plot.title = element_blank(),\n          axis.ticks.y = element_blank(),\n          axis.ticks.x = element_line(\n            size = 2,\n            colour = c(\n              \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \n              \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \n              \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \n              \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \n              \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \n              \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#3288BD\", \"#3288BD\", \"#3288BD\", \"#3288BD\",\n              \"#FC8D59\", \"#FC8D59\", \"#FC8D59\", \"#FC8D59\", \"#FC8D59\", \"#99D594\", \"#99D594\", \"#99D594\",\n              \"#99D594\", \"#FFFFBF\", \"#FFFFBF\", \"#FFFFBF\", \"#FFFFBF\", \"#7BCEB8\", \"#FEE08B\", \"#FEE08B\",\n              \"#FEE08B\"\n            )\n          ),\n          axis.ticks.length.x = unit(1, \"lines\"),\n          axis.title.x = element_blank(),\n          axis.title.y = element_text(size = 16),\n          axis.text.x = element_blank(),\n          axis.text.y = element_blank(),\n          legend.box.background = element_rect(fill = NA, colour = \"black\"),\n          legend.key = element_rect(fill = NA, colour = \"black\"),\n          legend.position = \"bottom\",\n          panel.background = element_blank(),\n          panel.spacing = unit(-0.2, \"lines\"),\n          panel.border = element_rect(colour = \"black\", fill = NA),\n          strip.background = element_rect(colour = \"black\", fill = \"grey90\"),\n          strip.placement = \"outside\",\n          strip.text.x = element_text(size = 10))\n\n  ### Construct species tables\n  # Construct the 14 grobs - 7 symbols and 7 labels\n  L1 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#D53E4F\", col = \"black\"))\n  L2 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#3288BD\", col = \"black\"))\n  L3 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#FC8D59\", col = \"black\"))\n  L4 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#99D594\", col = \"black\"))\n  L5 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#FFFFBF\", col = \"black\"))\n  L6 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#7BCEB8\", col = \"black\"))\n  L7 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#FEE08B\", col = \"black\"))\n  T1 = textGrob(\"Farmhouse\", x = .2, just = \"left\")\n  T2 = textGrob(\"Asia\", x = .2, just = \"left\")\n  T3 = textGrob(\"Beer 1\", x = .2, just = \"left\")\n  T4 = textGrob(\"Beer 2\", x = .2, just = \"left\")\n  T5 = textGrob(\"Mixed\", x = .2, just = \"left\")\n  T6 = textGrob(\"Mosaic\", x = .2, just = \"left\")\n  T7 = textGrob(\"Wine\", x = .2, just = \"left\")\n  \n  # Construct a gtable - 2 columns X 8 rows\n  leg = gtable(width = unit(c(1, 2), \"cm\"),\n               height = unit(c(1, 1, 1, 1, 1, 1, 1, 1), \"cm\"))\n  leg = gtable_add_grob(leg, rectGrob(gp = gpar(fill = NA, col = \"black\")),\n                        t = 1, l = 1, b = 8, r = 2)\n\n  # gtable_show_layout(leg)\n  # Place the 14 grob into the table\n  leg = gtable_add_grob(leg, L1, t=2, l=1)\n  leg = gtable_add_grob(leg, L2, t=3, l=1)\n  leg = gtable_add_grob(leg, L3, t=4, l=1)\n  leg = gtable_add_grob(leg, L4, t=5, l=1)\n  leg = gtable_add_grob(leg, L5, t=6, l=1)\n  leg = gtable_add_grob(leg, L6, t=7, l=1)\n  leg = gtable_add_grob(leg, L7, t=8, l=1)  \n  leg = gtable_add_grob(leg, T1, t=2, l=2)\n  leg = gtable_add_grob(leg, T2, t=3, l=2)\n  leg = gtable_add_grob(leg, T3, t=4, l=2)\n  leg = gtable_add_grob(leg, T4, t=5, l=2)\n  leg = gtable_add_grob(leg, T5, t=6, l=2)\n  leg = gtable_add_grob(leg, T6, t=7, l=2)\n  leg = gtable_add_grob(leg, T7, t=8, l=2)\n  \n  # Give it a title (if needed)\n  leg = gtable_add_grob(leg, textGrob(\"Population\"), t = 1, l = 1, r = 2)\n  \n  # Get the ggplot grob for plot1\n  g = ggplotGrob(p1)\n  \n  # Get the position of the panel,\n  # add a column to the right of the panel, \n  # put the legend into that column, \n  # and then add another spacing column\n  pos = g$layout[grepl(\"panel\", g$layout$name), c('t', 'l')]\n  g = gtable_add_cols(g, sum(leg$widths), tail(pos$l, n =1))\n  g = gtable_add_grob(g, leg, t = pos$t[1], l = tail(pos$l, n =1) + 1)\n  g = gtable_add_cols(g, unit(6, \"pt\"), tail(pos$l, n =1))\n  \n  # Draw it\n  plot_list[[i]] = g\n  \n}\n\n\nCopper TolerancePhenolic Off-FlavoursMaltose/Maltotriose MetabolismEthanol ResistanceAmilase ActivityGlycerol ProductionTemperature ToleranceHeat-Shock ProteinsSulfites ProductionFlocculationDessication ToleranceKiller Toxin\n\n\n\n\n\n\n\nFigure 6: Variants on Copper Tolerance genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Variants on Phenolic Off-Flavours genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Variants on Maltose/Maltotriose Metabolism genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Variants on Ethanol Resistance genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Variants on Amilase Activity genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 11: Variants on Glycerol Production genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 12: Variants on Temperature Tolerance genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 13: Variants on Heat-Shock Proteins genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 14: Variants on Sulfites Production genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 15: Variants on Flocculation genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 16: Variants on Dessication Tolerance genes.\n\n\n\n\n\n\n\n\n\n\n\nFigure 17: Variants on Killer Toxin genes.\n\n\n\n\n\n\n\nTPS3 238G&gt;A : 41 / 44 Farmhouse yeasts 2500A&gt;G : 42 / 44 Farmhouse yeasts\nAGT1 / MAL11 1175_1176insT 1772delA : 38 / 44 Farmhouse yeasts 491AAG&gt;TTA 1236C&gt;G\nNTH1 1213C&gt;T (Leu405Phe) : 38 / 44 Farmhouse yeasts\nATH1 3394A&gt;G, Asn1132Asp : 3434A&gt;G, Ser1145Asn : 3596A&gt;G; Asn1199Ser :\n\n\n3.6.4 Identify disrupted genes\nFrom the annotate variants, we can easily filter disrupted genes (variants with HIGH effect: i.e. premature stop codons and frameshifts), and look for patterns of disrupted “pathways” among kveiks and other industrial yeasts.\n\n# import\ndataset = read.delim(\"./data/p01-03/variants.stopcodons.ready.tab\", header = FALSE)\n\n# reformat dataset\ndataset$V4 = factor(\n  dataset$V4,\n  levels = c(\n    \"X4051\", \"X4037\", \"X1046\", \"X35\", \"X8003\", \"x1119\", \"X1111\", \"X1091\", \"X1011\", \"x7078-B\", \"X1148\",\n    \"X1118\", \"X1007\", \"X5508\", \"x1129\", \"X1030\", \"X1014\", \"X1002\", \"x97\", \"X6004\", \"X5009\", \"X5000\", \"Voss1\",\n    \"SortdalEbbe1\", \"Muri\", \"Laerdal2\", \"k7R25\", \"Hornindal2\", \"Hornindal1\", \"Granvin1\", \"9R40\", \"8R19\", \"7R7\",\n    \"6R15\", \"46R37\", \"46R12\", \"45R11\", \"45P5\", \"44R7\", \"44R32\", \"42R31\", \"42R20\", \"41R15\", \"41R10\", \"40R20\",\n    \"40R1\", \"40R14\", \"3R11\", \"39R20\", \"38R16\", \"2R23\", \"28R8\", \"28R33\", \"28R21\", \"28P6\", \"28P1\", \"27R17\",\n    \"21R38\", \"21P1\", \"1R16\", \"19R18\", \"17P5\", \"16R37\", \"16R23\", \"14R6\", \"14R30\"\n  )\n)\n\ndataset$V1 = factor(\n  dataset$V1,\n  levels = c(\n    \"Copper tolerance\", \"POF\", \"maltose/maltotriose\", \"ethanol tolerance\", \"amylase activity\",\n    \"glycerol\", \"temperature tolerance\", \"heat-shock\", \"sulfites\", \"flocculation\", \"dessication\",\n    \"killer toxin\"\n  )\n)\n\n# label wrapper function\nlabel_wrap_gen = function(width = 25) {\n  function(variable, value) {\n    laply(strwrap(as.character(value), width=width, simplify=FALSE), \n          paste, collapse=\"\\n\")\n  }\n}\n\n# plot\np1 = ggplot(dataset) +\n  geom_tile(aes(x = V3, y = V4, fill = V6), color = \"grey75\") +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  facet_grid(~V1, scales = \"free\", space = \"free_x\",\n             labeller=label_wrap_gen(width = 10)) +\n  labs(title = \"Premature stop codons distribution\",\n       x = \"Genes\",\n       y = \"Strains\") +\n  theme(plot.title = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_line(\n          size = 2.5,\n          colour = c(\n            \"#FEE08B\", \"#FEE08B\", \"#FEE08B\", \"#7BCEB8\", \"#FFFFBF\", \"#FFFFBF\", \"#FFFFBF\", \"#FFFFBF\",\n            \"#FFFFBF\", \"#99D594\", \"#99D594\", \"#99D594\", \"#99D594\", \"#FC8D59\", \"#FC8D59\", \"#FC8D59\", \n            \"#FC8D59\", \"#FC8D59\", \"#3288BD\", \"#3288BD\", \"#3288BD\", \"#3288BD\", \"#D53E4F\", \"#D53E4F\",\n            \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\",\n            \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\",\n            \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\",\n            \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\",\n            \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\", \"#D53E4F\",\n            \"#D53E4F\", \"#D53E4F\"\n          )\n        ),\n        axis.ticks.length.y = unit(1, \"lines\"),\n        axis.title = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n        legend.position = \"none\",\n        panel.background = element_blank(),\n        panel.spacing = unit(-0.2, \"lines\"),\n        panel.border = element_rect(colour = \"black\", fill = NA),\n        strip.background = element_rect(colour = \"NA\", fill = \"NA\"),\n        strip.placement = \"outside\",\n        strip.text = element_text(size = 10, angle = 90, vjust = 0.5, hjust = 0))\n\n### Construct species tables\n# Construct the 14 grobs - 7 symbols and 7 labels\nL1 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#D53E4F\", col = \"black\"))\nL2 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#3288BD\", col = \"black\"))\nL3 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#FC8D59\", col = \"black\"))\nL4 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#99D594\", col = \"black\"))\nL5 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#FFFFBF\", col = \"black\"))\nL6 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#7BCEB8\", col = \"black\"))\nL7 = rectGrob(height = .5, width = .5, gp = gpar(fill = \"#FEE08B\", col = \"black\"))\nT1 = textGrob(\"Kveik\", x = .2, just = \"left\")\nT2 = textGrob(\"Asia\", x = .2, just = \"left\")\nT3 = textGrob(\"Beer 1\", x = .2, just = \"left\")\nT4 = textGrob(\"Beer 2\", x = .2, just = \"left\")\nT5 = textGrob(\"Mixed\", x = .2, just = \"left\")\nT6 = textGrob(\"Mosaic\", x = .2, just = \"left\")\nT7 = textGrob(\"Wine\", x = .2, just = \"left\")\n \n# Construct a gtable - 2 columns X 8 rows\nleg = gtable(width = unit(c(1, 2), \"cm\"),\n             height = unit(c(1, 1, 1, 1, 1, 1, 1, 1), \"cm\"))\nleg = gtable_add_grob(leg, rectGrob(gp = gpar(fill = NA, col = \"black\")),\n                      t = 1, l = 1, b = 8, r = 2)\n\n# gtable_show_layout(leg)\n# Place the 14 grob into the table\nleg = gtable_add_grob(leg, L1, t=2, l=1)\nleg = gtable_add_grob(leg, L2, t=3, l=1)\nleg = gtable_add_grob(leg, L3, t=4, l=1)\nleg = gtable_add_grob(leg, L4, t=5, l=1)\nleg = gtable_add_grob(leg, L5, t=6, l=1)\nleg = gtable_add_grob(leg, L6, t=7, l=1)\nleg = gtable_add_grob(leg, L7, t=8, l=1)  \nleg = gtable_add_grob(leg, T1, t=2, l=2)\nleg = gtable_add_grob(leg, T2, t=3, l=2)\nleg = gtable_add_grob(leg, T3, t=4, l=2)\nleg = gtable_add_grob(leg, T4, t=5, l=2)\nleg = gtable_add_grob(leg, T5, t=6, l=2)\nleg = gtable_add_grob(leg, T6, t=7, l=2)\nleg = gtable_add_grob(leg, T7, t=8, l=2)\n \n# Give it a title (if needed)\nleg = gtable_add_grob(leg, textGrob(\"Population\"), t = 1, l = 1, r = 2)\n \n# Get the ggplot grob for plot1\ng = ggplotGrob(p1)\n \n# Get the position of the panel,\n# add a column to the right of the panel,\n# put the legend into that column,\n# and then add another spacing column\npos = g$layout[grepl(\"panel\", g$layout$name), c('t', 'l')]\ng = gtable_add_cols(g, sum(leg$widths), tail(pos$l, n =1))\ng = gtable_add_grob(g, leg, t = pos$t[1], l = tail(pos$l, n =1) + 1)\ng = gtable_add_cols(g, unit(6, \"pt\"), tail(pos$l, n =1))\n \n# Draw it\ngrid.newpage()\ngrid.draw(g)\n\n\n\n\nFigure 18: Premature stop codons distribution.\n\n\n\n\n\n\n3.6.5 Phylogenetic relationships\nSince it is difficult to eye-ball patterns of distributions of variants among strains by eye, we can use a phylogeny approach to visualize these patterns and genetic distances. The idea behind this, is to infer phylogenetic relationships based only ina small set of genes involved in a particular phenotype. While these signals are lost in a massive multigene phylogenetic analysis, they still can be informative and give hints on how to cluster strains based on their industrial phenotypes.\nThe protocol we will apply is the following:\n\nFor each strain of interest (kviks + 22 industrial), generate the consensus fasta file from the aligned variants.\nGenerate gene alignments.\nConcatenate all the alignments for each of the 12 industrial phenotypes of interest.\n\nBuild a Maximum-Likelihood phylogenetic tree with IQtree.\n\n\nSAMPLES=\"14R30 14R6 16R23 16R37 17P5 19R18 1R16 21P1 21R38 27R17 28P1 28P6 28R21 28R33 28R8 2R23 38R16 39R20 3R11 40R14 40R1 40R20 41R10 41R15 42R20 42R31 44R32 44R7 45P5 45R11 46R12 46R37 6R15 7R7 8R19 9R40 Granvin1 Hornindal1 Hornindal2 k7R25 Laerdal2 Muri SortdalEbbe1 Voss1 X1002_all_sorted_picard_dedup_all X1007_all_sorted_picard_dedup_all X1011_all_sorted_picard_dedup_realigned_recalibrated_all X1014_all_sorted_picard_dedup_all X1030_all_sorted_picard_dedup_all X1046_all_sorted_picard_dedup_realigned_recalibrated_all X1091_all_sorted_picard_dedup_all X1111_all_sorted_picard_dedup_all X1118_all_sorted_picard_dedup_all X1148_all_sorted_picard_dedup_all X35_all_sorted_picard_dedup_all X4037_all_sorted_picard_dedup_all X4051_all_sorted_picard_dedup_all X5000_all_sorted_picard_dedup_all X5009_all_sorted_picard_dedup_all X5508_all_sorted_picard_dedup_all X6004_all_sorted_picard_dedup_all X8003_all_sorted_picard_dedup_all x1119_all_sorted_picard_dedup_all x1129_all_sorted_picard_dedup_all x7078-B x97\"\n\n# generate the fasta files for the genes of interest\n~/bin/bcftools-1.9/bcftools view \\\n    -h all_plusKV.fltr.backup.reduced.snpEff.vcf.gz \\\n    &gt; all_plusKV.fltr.backup.header\n    \nfor file in 0[1-9]*/*vcf 1[0-2]*/*vcf; do\n\n    cat all_plusKV.fltr.backup.header $file &gt; $file.1;\n    mv $file.1 $file;\n    bgzip -c $file &gt; $file.gz;\n    tabix $file.gz;\n    GENE=$(echo $file | echo $file | tr \".\" \"\\t\" | cut -f 2);\n    CHR=$(grep $GENE Domestication.genes.windows.lst | cut -f 4);\n    START=$(grep $GENE Domestication.genes.windows.lst | cut -f 5);\n    STOP=$(grep $GENE Domestication.genes.windows.lst | cut -f 6);\n    \n    for SAMPLE in $SAMPLES; do\n        ~/bin/samtools-1.9/samtools faidx \\\n            ../09_CNVs/00_refgen/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa \\\n            \"${CHR}\":\"${START}\"-\"${STOP}\" |\\\n            ~/bin/bcftools-1.9/bcftools consensus \\\n                --haplotype A \\\n                --missing - \\\n                --sample $SAMPLE $file.gz \\\n              | sed \"s/&gt;.*/&gt;$SAMPLE/g\";\n    done &gt; $(echo $file | sed 's/vcf/fa/g');\n    \ndone \n\n# alignments\nfor file in 00_nt_genes/*.fa; do\n    mafft --localpair \\\n      --maxiterate 1000 \\\n        --nuc \\\n        --ep 0.123 \\\n        --thread 32 \\\n        $file \\\n        &gt; 01_mafft_align/$(basename $file .fa).align.fa;\ndone\n\nfor file in 01_mafft_align/*.fa; do\n    sed -i 's/_all_sorted_picard_dedup_all//g' $file;\n    sed -i 's/_all_sorted_picard_dedup_realigned_recalibrated_all//g' $file;\ndone\n\n# concatenate and ML tree\n# I filter out Muri and k7R25, since they are hybrid and \nfor WORD in amylase_activity \\\n  Copper_tolerance \\\n  dessication \\\n    ethanol_tolerance \\\n    flocculation \\\n    glycerol \\\n    heat-shock \\\n    killer_toxin \\\n    maltose_maltotriose \\\n    POF \\\n    sulfites \\\n    temperature_rolerance; do\n    perl ~/scripts/catfasta2phyml.pl \\\n        --concatenate \\\n        --sequential 01_mafft_align/$WORD.*fa \\\n        &gt; 03_concatenated_align/$WORD.allgenes.fa;\ndone\n\nfor file in 03_concatenated_align/*.fa; do\n    iqtree-omp -s $file \\\n      -st DNA \\\n        -pre $(basename $file .fa) \\\n        -nt 72 \\\n        -bb 1000 \\\n        -wbt \\\n        -alrt 1000 \\\n        -m GTR+G;\ndone\n\n\n# upload files\nphenotypes = list(\n  \"Copper_tolerance\",\n  \"POF\",\n  \"maltose_maltotriose\",\n  \"ethanol_tolerance\",\n  \"amylase_activity\",\n  \"glycerol\",\n  \"temperature_rolerance\",\n  \"heat-shock\",\n  \"sulfites\",\n  \"flocculation\",\n  \"dessication\",\n  \"killer_toxin\"\n)\n\nheaders = list(\n  \"Copper Tolerance\",\n  \"Phenolic Off-flavours\",\n  \"Maltose Utilization\",\n  \"Ethanol Resistance\",\n  \"Amilase Activity\",\n  \"Glycerol Production\",\n  \"Temperature Tolerance\",\n  \"Heat-shock Proteins\",\n  \"Sulfites Production\",\n  \"Flocculation\",\n  \"Dessication Tolerance\",\n  \"Killer Toxins\"\n)\n\ninfo = read.csv(\"./data/p01-03/variants.tree.tiplabels.csv\")\n\np = list()\n\nfor (i in 1:12){\n  \n  # read the tree and root it\n  name = phenotypes[i]\n  file = paste0(\"./data/p01-03/\", name, \".allgenes.contree\")\n  tree = read.newick(file)\n  tree = root(tree, which(tree$tip.label == \"S288C\"))\n\n  max_axis = max(nodeHeights(tree))*1.09\n  \n  p[[i]] = ggtree(tree, ladderize = FALSE) %&lt;+% info +\n    geom_tiplab(align = TRUE, size = 1.75) +\n    geom_tippoint(aes(fill = population, size = 2.5), shape = 21) +\n    scale_fill_manual(values = c(Kveik = \"#D53E4F\", Mixed = \"#FFFFBF\", Mosaic = \"#7BCEB8\",\n                                  Wine = \"#FEE08B\", Asia = \"#3288BD\", Beer1 = \"#FC8D59\",\n                                  Beer2 = \"#99D594\", Lab = \"grey\")) +\n    labs(title = headers[[i]]) +\n    xlim(0, max_axis) +\n    ylim(0, NA) +\n    theme_tree(plot.title = element_text(hjust = 0.5, size = 16),\n               legend.position = \"none\")\n  \n}\n\nmyplots = list(\n  p[[1]], p[[2]], p[[3]], p[[4]],\n  p[[5]], p[[6]], p[[7]], p[[8]],\n  p[[9]], p[[10]], p[[11]], p[[12]]\n)\n\np1 = ggarrange(plotlist = myplots, widths = c(4, 3))\n\n### Construct species tables\n# Construct the 16 grobs - 8 symbols and 8 labels\nL1 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"#D53E4F\", col = \"black\"))\nL2 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"#3288BD\", col = \"black\"))\nL3 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"#FC8D59\", col = \"black\"))\nL4 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"#99D594\", col = \"black\"))\nL5 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"#FFFFBF\", col = \"black\"))\nL6 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"#7BCEB8\", col = \"black\"))\nL7 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"#FEE08B\", col = \"black\"))\nL8 = circleGrob(x=0.5, y=0.5, r=0.25, gp = gpar(fill = \"grey\", col = \"black\"))\nT1 = textGrob(\"Farmhouse\", x = .2, just = \"left\")\nT2 = textGrob(\"Asia\", x = .2, just = \"left\")\nT3 = textGrob(\"Beer 1\", x = .2, just = \"left\")\nT4 = textGrob(\"Beer 2\", x = .2, just = \"left\")\nT5 = textGrob(\"Mixed\", x = .2, just = \"left\")\nT6 = textGrob(\"Mosaic\", x = .2, just = \"left\")\nT7 = textGrob(\"Wine\", x = .2, just = \"left\")\nT8 = textGrob(\"Lab\", x = .2, just = \"left\")\n\n# Construct a gtable - 2 columns X 8 rows\nleg = gtable(width = unit(c(1, 2), \"cm\"),\n             height = unit(c(1, 1, 1, 1, 1, 1, 1, 1, 1), \"cm\"))\nleg = gtable_add_grob(leg, rectGrob(gp = gpar(fill = NA, col = \"black\")),\n                      t = 1, l = 1, b = 9, r = 2)\n\n# gtable_show_layout(leg)\n# Place the 14 grob into the table\nleg = gtable_add_grob(leg, L1, t=2, l=1)\nleg = gtable_add_grob(leg, L2, t=3, l=1)\nleg = gtable_add_grob(leg, L3, t=4, l=1)\nleg = gtable_add_grob(leg, L4, t=5, l=1)\nleg = gtable_add_grob(leg, L5, t=6, l=1)\nleg = gtable_add_grob(leg, L6, t=7, l=1)\nleg = gtable_add_grob(leg, L7, t=8, l=1)\nleg = gtable_add_grob(leg, L8, t=9, l=1)\nleg = gtable_add_grob(leg, T1, t=2, l=2)\nleg = gtable_add_grob(leg, T2, t=3, l=2)\nleg = gtable_add_grob(leg, T3, t=4, l=2)\nleg = gtable_add_grob(leg, T4, t=5, l=2)\nleg = gtable_add_grob(leg, T5, t=6, l=2)\nleg = gtable_add_grob(leg, T6, t=7, l=2)\nleg = gtable_add_grob(leg, T7, t=8, l=2)\nleg = gtable_add_grob(leg, T8, t=9, l=2)\n\n# Give it a title (if needed)\nleg = gtable_add_grob(leg, textGrob(\"Population\"), t = 1, l = 1, r = 2)\n\n# Get the ggplot grob for plot1\ng = ggplotGrob(p1)\n\n# Get the position of the panel,\n# add a column to the right of the panel, \n# put the legend into that column, \n# and then add another spacing column\npos = g$layout[grepl(\"panel\", g$layout$name), c('t', 'l')]\ng = gtable_add_cols(g, sum(leg$widths), tail(pos$l, n =1))\ng = gtable_add_grob(g, leg, t = pos$t[1], l = tail(pos$l, n =1) + 1)\ng = gtable_add_cols(g, unit(6, \"pt\"), tail(pos$l, n =1))\n\n# Draw it\ngrid.newpage()\ngrid.draw(g)\n\n\n\n\nFigure 19: Domestication gene trees.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#sec-lesson-learnt-feature-selection",
    "href": "p01-03-variant-calling.html#sec-lesson-learnt-feature-selection",
    "title": "3  Variant Calling",
    "section": "3.7 Lessons Learnt",
    "text": "3.7 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-03-variant-calling.html#session-information",
    "href": "p01-03-variant-calling.html#session-information",
    "title": "3  Variant Calling",
    "section": "3.8 Session Information",
    "text": "3.8 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] UpSetR_1.4.0           treeio_1.26.0          stringr_1.5.1         \n [4] reshape2_1.4.4         reshape_0.8.10         RColorBrewer_1.1-3    \n [7] plyr_1.8.9             phytools_2.4-4         maps_3.4.3            \n[10] org.Sc.sgd.db_3.18.0   AnnotationDbi_1.64.1   IRanges_2.36.0        \n[13] S4Vectors_0.40.2       Biobase_2.62.0         BiocGenerics_0.48.1   \n[16] naturalsort_0.1.3      magrittr_2.0.3         gtable_0.3.6          \n[19] gridExtra_2.3          ggtreeExtra_1.12.0     ggtree_3.10.1         \n[22] ggpubr_0.6.1           ggnewscale_0.5.2       ggh4x_0.3.1           \n[25] ggplot2_3.5.2          DT_0.33                dplyr_1.1.4           \n[28] ComplexHeatmap_2.18.0  clusterProfiler_4.10.1 circlize_0.4.16       \n[31] aplot_0.2.8            ape_5.8-1             \n\nloaded via a namespace (and not attached):\n  [1] jsonlite_2.0.0          shape_1.4.6.1           farver_2.1.2           \n  [4] rmarkdown_2.29          GlobalOptions_0.1.2     fs_1.6.6               \n  [7] zlibbioc_1.48.2         vctrs_0.6.5             memoise_2.0.1          \n [10] RCurl_1.98-1.17         rstatix_0.7.2           htmltools_0.5.8.1      \n [13] DEoptim_2.2-8           broom_1.0.9             Formula_1.2-5          \n [16] gridGraphics_0.5-1      htmlwidgets_1.6.4       cachem_1.1.0           \n [19] igraph_2.1.4            lifecycle_1.0.4         iterators_1.0.14       \n [22] pkgconfig_2.0.3         Matrix_1.6-5            R6_2.6.1               \n [25] fastmap_1.2.0           gson_0.1.0              GenomeInfoDbData_1.2.11\n [28] clue_0.3-66             numDeriv_2016.8-1.1     digest_0.6.37          \n [31] enrichplot_1.22.0       colorspace_2.1-1        patchwork_1.3.1        \n [34] RSQLite_2.4.2           labeling_0.4.3          clusterGeneration_1.3.8\n [37] abind_1.4-8             httr_1.4.7              polyclip_1.10-7        \n [40] compiler_4.3.3          bit64_4.6.0-1           withr_3.0.2            \n [43] doParallel_1.0.17       S7_0.2.0                backports_1.5.0        \n [46] optimParallel_1.0-2     BiocParallel_1.36.0     carData_3.0-5          \n [49] viridis_0.6.5           DBI_1.2.3               ggforce_0.5.0          \n [52] ggsignif_0.6.4          MASS_7.3-60.0.1         scatterplot3d_0.3-44   \n [55] rjson_0.2.23            HDO.db_0.99.1           tools_4.3.3            \n [58] scatterpie_0.2.5        quadprog_1.5-8          glue_1.8.0             \n [61] nlme_3.1-164            GOSemSim_2.28.1         shadowtext_0.1.5       \n [64] cluster_2.1.6           fgsea_1.35.6            generics_0.1.4         \n [67] tidyr_1.3.1             data.table_1.17.8       tidygraph_1.3.1        \n [70] car_3.1-3               XVector_0.42.0          ggrepel_0.9.6          \n [73] foreach_1.5.2           pillar_1.11.0           yulab.utils_0.2.0      \n [76] splines_4.3.3           tweenr_2.0.3            lattice_0.22-5         \n [79] bit_4.6.0               tidyselect_1.2.1        GO.db_3.18.0           \n [82] Biostrings_2.70.3       knitr_1.50              xfun_0.52              \n [85] expm_1.0-0              graphlayouts_1.2.2      matrixStats_1.5.0      \n [88] stringi_1.8.7           lazyeval_0.2.2          ggfun_0.2.0            \n [91] yaml_2.3.10             evaluate_1.0.4          codetools_0.2-19       \n [94] ggraph_2.2.1            tibble_3.3.0            qvalue_2.34.0          \n [97] ggplotify_0.1.2         cli_3.6.5               dichromat_2.0-0.1      \n[100] Rcpp_1.1.0              GenomeInfoDb_1.38.8     coda_0.19-4.1          \n[103] png_0.1-8               parallel_4.3.3          blob_1.2.4             \n[106] DOSE_3.28.2             bitops_1.0-9            phangorn_2.12.1        \n[109] viridisLite_0.4.2       tidytree_0.4.6          scales_1.4.0           \n[112] combinat_0.0-8          purrr_1.1.0             crayon_1.5.3           \n[115] GetoptLong_1.0.5        rlang_1.1.6             mnormt_2.1.1           \n[118] cowplot_1.2.0           fastmatch_1.1-6         KEGGREST_1.42.0",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variant Calling</span>"
    ]
  },
  {
    "objectID": "p01-04-copy-number-variants.html",
    "href": "p01-04-copy-number-variants.html",
    "title": "4  Copy Number Variants",
    "section": "",
    "text": "4.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 6.5.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Copy Number Variants</span>"
    ]
  },
  {
    "objectID": "p01-04-copy-number-variants.html#on-this-page",
    "href": "p01-04-copy-number-variants.html#on-this-page",
    "title": "4  Copy Number Variants",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Copy Number Variants</span>"
    ]
  },
  {
    "objectID": "p01-04-copy-number-variants.html#call-the-cnvs",
    "href": "p01-04-copy-number-variants.html#call-the-cnvs",
    "title": "4  Copy Number Variants",
    "section": "4.2 Call the CNVs",
    "text": "4.2 Call the CNVs\nTo detect Copy Number Variants (CNVs) and major aneuploidies, we use the CNVnator pipeline. We use the bam files containing informations on aligned reads to the reference S288C genome, and we call CNVs based on changes of depth of mapped reads. The protocol we follow is:\n\nFor each sample, run CNVnator for 500 bp and 1,000 bp bins;\nRetain only CNVs that are concordant for both bins;\nIdentify common CNVs pattern;\nIdentify genes affected by CNVs;\nGO, KEGG and Reactome pathways enrichment\n\nFirst, we call CNVs with CNVnator, using 500 bp and 1,000 bp bins. Then, for each samples, we retain only CNVs that have been called with both bins, and that had a p-value &lt; 0.05.\n\n# prepare reference genome\nwhile read line; do\n  if [[ ${line:0:1} == '&gt;' ]]; then\n    outfile=${line#&gt;}.fa;\n    echo $line &gt; $outfile;\n  else\n    echo $line &gt;&gt; $outfile;\n  fi;\ndone &lt; Saccharomyces_RefGen.fa\n\n#run CNVnator from the docker image\nchmod 777 09_CNVs/\n\nfor file in *.bam; do\n\n  NAME=$(basename $file .S288C.align.sort.md.r.bam);\n  \n  docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator\n    cnvnator \\\n    -root ./out.\"${NAME}\".root \\\n    -genome\n    ./00_refgen/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa \\\n    -tree $file;\n    \n  for BIN in 500 1000; do\n  \n    docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator\n      cnvnator \\\n      -root ./out.\"${NAME}\".root \\\n      -genome\n      ./00_refgen/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa \\\n      -his $BIN -d ./;\n      \n    docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator\n      cnvnator \\\n      -root ./out.\"${NAME}\".root \\\n      -stat $BIN;\n      \n    docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator\n      cnvnator \\\n      -ngc \\\n      -root ./out.\"${NAME}\".root \\\n      -partition $BIN;\n      \n    docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator\n      cnvnator \\\n      -ngc \\\n      -root ./out.\"${NAME}\".root \\\n      -call $BIN &gt; \"${NAME}\".CNV_\"${BIN}\"bin.tab;\n      \n  done;\ndone\n\nchmod 755 09_CNVs/\n# Filter CNVs and merge 500bp 1000bp windows\nwhile read line; do\n\n  python3.5 ~/CNVnator_merger.py \\\n    --input_1 $line.CNV_500bin.tab \\\n    --input_2 $line.CNV_1000bin.tab \\\n    --sample $line &gt; $line.CNVmerged.500-1000.tab;\n    \ndone &lt; ../sample.lst\n  \ncat *merged.500-1000.tab &gt; Vikings.CNVsmerged.all.tab\n\nThen we plot the CNV that we have identified. To facilitate the visualization, duplications have been amplified up to 10X, while deletion have been reduced to 1X. Farmhouse yeasts have been clustered based on their geographical origin, in order from the top to the bottom:\n\nNorth-West Norway;\nSouth-West Norway;\nCentral-Eastern Norway;\nLatvia;\nLithuania;\nRussia.\n\n\n# upload files\nV_CNVs_1000 = read.delim(\"data/p01-04/Vikings.CNVsmerged.all.mod.tab\", header = TRUE)\n\n# reformat data\nV_CNVs_1000$chr = factor(V_CNVs_1000$chr, levels = c(\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\",\n                                                     \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\",\n                                                     \"XIII\", \"XIV\", \"XV\", \"XVI\"))\n\n# group kveiks by geographical origin\nV_CNVs_1000$strain = factor(V_CNVs_1000$strain, levels = c(\n  \"41R10\", \"21R38\", \"9R40\", \"17P5\", \"SortdalEbbe1\", \"3R11\", \"21P1\", \"41R15\", \"Hornindal1\", \"Hornindal2\", \"1R16\", \"2R23\", \"8R19\", \"Muri\",\n   \"k7R25\", \"38R16\", \"44R32\", \"19R18\", \"44R7\", \"6R15\", \"Laerdal2\", \"7R7\", \"14R6\", \"14R30\",\n   \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\",\n   \"42R20\", \"42R31\", \"45P5\", \"45R11\", \n   \"46R12\", \"46R37\", \"16R23\", \"16R37\",\n   \"39R20\", \"40R14\", \"40R1\", \"40R20\",\n   \"Granvin1\", \"Voss1\"\n))\n\n# plot\np = ggplot(V_CNVs_1000) +\n  geom_rect(aes(xmin = start, xmax = stop, ymin = start_y, ymax = stop_y, fill = CNV), color=\"black\", size = 0.001) +\n  scale_fill_gradient2(midpoint = 0, low = \"#84ceff\", mid = \"white\", high = \"#ffb584\",\n                       limits = c(0.1, 10), na.value = \"grey75\", trans = \"log\") +\n  facet_grid(strain~chr, scales = \"free\", space = \"free_x\") +\n  labs(title = \"CNVs Distribution: 500-1,000 bp bin\",\n       fill = \"log10 ReadDepth\") +\n  theme(plot.title = element_text(size = 28, hjust = 0.5),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        legend.position = \"none\",\n        panel.background = element_blank(),\n        panel.spacing.x = unit(0.05, \"lines\"),\n        panel.spacing.y = unit(0.05, \"lines\"),\n        panel.border = element_rect(colour = \"black\", fill = NA),\n        strip.background = element_rect(colour = \"black\", fill = \"grey90\"),\n        strip.text.x = element_text(size = 10),\n        strip.text.y = element_text(size = 14, angle = 0))\n\n# change facet colors\ng = ggplot_gtable(ggplot_build(p))\nstripr = which(grepl(\"strip-r\", g$layout$name))\nfills = c(\"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\",\n          \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#92C5DE\", \"#92C5DE\",\n          \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\",\n          \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#FFDA00\", \"#FFDA00\",\n          \"#FFDA00\", \"#FFDA00\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#A6611A\", \"#A6611A\",\n          \"#A6611A\", \"#A6611A\", \"grey75\", \"grey75\")\nk = 1\nfor (i in stripr) {\n  j = which(grepl(\"rect\", g$grobs[[i]]$grobs[[1]]$childrenOrder))\n  g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill = fills[k]\n  k = k + 1\n}\ngrid::grid.draw(g)\n\n\n\n\nFigure 1: Copy Number Variants in farmhouse yeasts.\n\n\n\n\nWhile there is no clear signature associated with kveiks geographic origin, it looks like there are common CNVs shared between farmhouse yeasts that are instead absent in industrial yeasts. Let’s clearly identify them.\nThere are the apparent trends:\n\n5 out of 69 CNVs are shared among all Kveiks\nGranvin1, Hornindal1, Hornindal2, Voss1 have similar CNV fingerprint",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Copy Number Variants</span>"
    ]
  },
  {
    "objectID": "p01-04-copy-number-variants.html#identify-common-cnvs-in-farmhouse-yeasts",
    "href": "p01-04-copy-number-variants.html#identify-common-cnvs-in-farmhouse-yeasts",
    "title": "4  Copy Number Variants",
    "section": "4.3 Identify common CNVs in Farmhouse yeasts",
    "text": "4.3 Identify common CNVs in Farmhouse yeasts\nWe have a bunch of CNVs called on 44 different kveiks Some CNVs that are called on the same position on multiple samples, maybe differs for few hundred base pairs. To identify the “average” conserved CNV, we use a custom python script that collapse this windows, a sort of ad hoc bedtools merge for CNVs positions.\n\n\n# generate overlapping windows\nfor i in \"\\tI\\t\" \"\\tII\\t\" \"\\tIII\\t\" \"\\tIV\\t\" \"\\tV\\t\" \"\\tVI\\t\" \"\\tVII\\t\" \\\n  \"\\tVIII\\t\" \"\\tIX\\t\" \"\\tX\\t\" \"\\tXI\\t\" \"\\tXII\\t\" \"\\tXIII\\t\" \"\\tXIV\\t\" \\\n  \"\\tXV\\t\" \"\\tXVI\\t\" \"\\tMito\\t\"; do\n  grep -P \"${i}\" Vikings.CNVsmerged.all.tab \\\n    | cut -f 2-4 \\\n    | sort -u \\\n    | sort -k2,2n;\ndone &gt; temp.bed;\nbedtools merge -i temp.bed &gt; Vikings.CNVsmerged.all.bed;\nrm temp.bed;\n\npython3.8 Vikings.overlapCNVs.py \\\n  --allCNVs Vikings.CNVsmerged.all.tab \\\n  --bed Vikings.CNVsmerged.all.bed \\\n  &gt; Vikings.CNVsmerged.all.matrix.tab\n  \n\nLet’s check the CNVs distributions:\n\n\n\n\n\n\nLet’s select CNVs present in at least 90% (N=40) of the sequenced farmhouse yeasts, and plot them. I would like to add as well the 4 large genomics variants in chromosomes I, III, VI and IX.\n\n\n\n\n\n\nThere are 11 CNVs shared between 40 farmhouse yeasts or more.\n\n# create CNV matrix for the heatmap\nmatrix_heat = as.matrix(matrix.d75[, c(4:ncol(matrix.d75))])\nmatrix_heat = ifelse(matrix_heat &lt; 1, -1,\n                     ifelse(matrix_heat &gt; 1, 1, matrix_heat))\nrownames(matrix_heat) = paste(paste(matrix.d75[, 1], matrix.d75[, 2], sep = \":\"), matrix.d75[, 3], sep = \"-\")\n\n# create annotations\nkveiks_geo = data.frame(\n  c(\"41R10\", \"21R38\", \"9R40\", \"17P5\", \"SortdalEbbe1\", \"3R11\", \"21P1\", \"41R15\", \"Hornindal1\", \"Hornindal2\", \"1R16\", \"2R23\", \"8R19\", \"Muri\",\n    \"k7R25\", \"38R16\", \"44R32\", \"19R18\", \"44R7\", \"6R15\", \"Laerdal2\", \"7R7\", \"14R6\", \"14R30\",\n    \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\",\n    \"42R20\", \"42R31\", \"45P5\", \"45R11\", \n    \"46R12\", \"46R37\", \"16R23\", \"16R37\",\n    \"39R20\", \"40R14\", \"40R1\", \"40R20\",\n    \"Granvin1\", \"Voss1\"),\n  c(\"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\", \"North-West Norway\",\n    \"South-West Norway\", \"South-West Norway\", \"South-West Norway\", \"South-West Norway\", \"South-West Norway\", \"South-West Norway\", \"South-West Norway\", \"South-West Norway\", \"South-West Norway\", \"South-West Norway\",\n    \"Central-Eastern Norway\", \"Central-Eastern Norway\", \"Central-Eastern Norway\", \"Central-Eastern Norway\", \"Central-Eastern Norway\", \"Central-Eastern Norway\",\n    \"Latvia\", \"Latvia\", \"Latvia\", \"Latvia\", \n    \"Lithuania\", \"Lithuania\", \"Lithuania\", \"Lithuania\",\n    \"Russia\", \"Russia\", \"Russia\", \"Russia\",\n    \"Other\", \"Other\"))\ncolnames(kveiks_geo) = c(\"kveik\", \"geo\")\nrownames(kveiks_geo) = kveiks_geo$kveik\n\nComplexHeatmap::Heatmap(\n  matrix_heat,\n  cluster_rows = FALSE,\n  column_dend_reorder = TRUE,\n  col = colorRamp2(c(-1, 0, 1), rev(brewer.pal(n = 3, name = \"RdBu\"))),\n  na_col = \"grey75\",\n  top_annotation = HeatmapAnnotation(\n    Geographic_origin = as.matrix(kveiks_geo$geo),\n    col = list(Geographic_origin = c(\"North-West Norway\" = \"#0571B0\",\n                                     \"South-West Norway\" = \"#92C5DE\",\n                                     \"Central-Eastern Norway\" = \"#008470\",\n                                     \"Latvia\" = \"#FFDA00\",\n                                     \"Lithuania\" = \"#FBA01D\",\n                                     \"Russia\" = \"#A6611A\",\n                                     \"Other\" = \"grey50\"))\n  ),\n  show_row_names = TRUE,\n  show_column_names = TRUE,\n  show_row_dend = FALSE,\n  show_heatmap_legend = FALSE,\n  row_title = \"CNVs\",\n  column_title_side = \"bottom\"\n)\n\n\n\n\nFigure 2: CNVs shared among &gt;90% of farmhouse yeasts.\n\n\n\n\nThere are 69 high confidence CNVs, of which 5 (4 deletions and 1 duplication) of them are shared among all Kveiks. Interestingly, the two deletions in chromosome I and the one in chromosome XV are duplications in the lineage “Granvin1, Hornindal1, Hornindal2, Voss1”. Granvin1, Hornindal1, Hornindal2, Voss1 shares a unique fingerprint of 39 conserved CNVs scattered across 15 chromosomes.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Copy Number Variants</span>"
    ]
  },
  {
    "objectID": "p01-04-copy-number-variants.html#cnv-functional-enrichment",
    "href": "p01-04-copy-number-variants.html#cnv-functional-enrichment",
    "title": "4  Copy Number Variants",
    "section": "4.4 CNV Functional Enrichment",
    "text": "4.4 CNV Functional Enrichment\nLet’s see which genes (and corresponding functions) are interested by the CNVs that we identify in the farmhouse yeasts. We will run the following functional analyses:\n\nover-represented GO terms;\nenriched GO terms;\nover-represented KEGG pathways;\nenriched KEGG pathways;\nover-represented Reactome pathways;\nenriched Reactome pathwyas.\n\n\n# retrieve S. cerevisiae genome annotation\nScere_DB = biomaRt::useMart(\n  biomart = \"ENSEMBL_MART_ENSEMBL\",\n  dataset = \"scerevisiae_gene_ensembl\"\n)\nScere_DB_table = biomaRt::getBM(\n  attributes = c(\n    \"ensembl_gene_id\",\n    \"ensembl_peptide_id\",\n    \"external_gene_name\",\n    \"entrezgene_id\",\n    \"description\",\n    \"chromosome_name\",\n    \"start_position\",\n    \"end_position\"\n  ),\n  mart = Scere_DB\n)\n\n# build list of reference databases used for annotation steps\nref_DB_list = c(\"org.Sc.sgd.db\", \"yeast\", \"scerevisiae\")\n\n# create yeasts GO terms universe\nGO_universe = data.frame(matrix(nrow = nrow(Scere_DB_table), ncol = 2))\nnames(GO_universe) = c(\"ENSEMBL\", \"EntrezID\")\nGO_universe$ENSEMBL = Scere_DB_table$ensembl_gene_id\n# populate GO universe\nfor(k in 1:nrow(GO_universe)){\n  # force to get only the first term if multiple are retrieved (sic!)\n  ENSEMBL = GO_universe[k, 1]\n  GO_universe[k, 2] = tryCatch(\n    Scere_DB_table[which(Scere_DB_table[, 1] == ENSEMBL),  c(4)][[1]],\n    error = function(e) { NA }\n  )\n}\nGO_universe = as.character(c(GO_universe[!is.na(GO_universe$EntrezID), ]$EntrezID))\n\n# drop mitochondria\nmatrix_heat = matrix_heat[-which(rownames(matrix_heat) == \"Mito:1-86000\"), ]\n\n# retrieve genes by CNV\nCNV_genes_DB = list()\nfor(i in 1:nrow(matrix_heat)){\n  \n  # get CNVs cohordinates\n  chromosome = stringr::str_split(rownames(matrix_heat)[i], \":\")[[1]][1]\n  positions = stringr::str_split(rownames(matrix_heat)[i], \":\")[[1]][2]\n  start_position = stringr::str_split(positions, \"-\")[[1]][1]\n  end_position = stringr::str_split(positions, \"-\")[[1]][2]\n  \n  # get genes in CNV\n  CNV_genes_DB[[rownames(matrix_heat)[i]]] = biomaRt::getBM(\n    attributes = c(\n      \"ensembl_gene_id\",\n      \"ensembl_peptide_id\",\n      \"external_gene_name\",\n      \"entrezgene_id\",\n      \"description\",\n      \"chromosome_name\",\n      \"start_position\",\n      \"end_position\"\n    ),\n    filters = c(\"chromosome_name\", \"start\", \"end\"),\n    values = list(chromosome = chromosome,\n                  start = start_position,\n                  end = end_position),\n    mart = Scere_DB\n  )\n  \n}\n\n# retrieve genes\ngene_cluster = list()\nfor(i in 1:length(CNV_genes_DB)){\n  gene_cluster[[names(CNV_genes_DB)[[i]]]] = as.character(CNV_genes_DB[[i]]$entrezgene_id[!is.na(CNV_genes_DB[[i]]$entrezgene_id)])\n}\n\nLet’s compare all enrichment together\nUsually I would convert the names in the enriched cluster with the DOSE package, with something like: DOSE::setReadable(BP, OrgDb = org.Sc.sgd.db, keyType = \"ENTREZID\"), however, org.Sc.sgd.db does not encode the gene names as SYMBOL like it happens in other reference genomes from ENSEMBL (org.Sc.sgd.db is maintained by SGD).\nTherefore I need a less elegant workaround to manually replace the ENTREZID with the corresponding gene symbols to make the enrichment comparisons more interepretable.\n\nGO BPGO CCGO MFKEGGReactome\n\n\n\n# enrich\nBP = compareCluster(\n  geneCluster = gene_cluster,\n  fun = \"enrichGO\",\n  pvalueCutoff = 0.05,\n  OrgDb = ref_DB_list[[1]],\n  ont = \"BP\"\n)\n\n# map gene symbols\nBP@keytype = \"SYMBOL\"\nmy_symbols = c()\nfor(k in 1:length(BP@geneClusters)){\n  for(i in 1:length(BP@geneClusters[[k]])){\n    ENTREZ = BP@geneClusters[[k]][[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_symbols[i] = SYMBOL\n  }\n  BP@geneClusters[[k]] = my_symbols\n}\nfor(k in 1:length(BP@compareClusterResult$geneID)){\n  my_vec = BP@compareClusterResult$geneID[[k]]\n  my_vec = stringr::str_split(my_vec, \"/\")[[1]]\n  for(i in 1:length(my_vec)){\n    ENTREZ = my_vec[[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_vec[[i]] = SYMBOL[[1]]\n  }\n  my_vec = paste(my_vec, collapse = \"/\")\n  BP@compareClusterResult$geneID[[k]] = my_vec\n}\n\n# plot\np1 = enrichplot::dotplot(BP, includeAll = TRUE) +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5)) +\n  theme(axis.text.x=element_text(angle = 45, hjust = 1))\n\np2 = cnetplot(BP) +\n  scale_fill_manual(values = colorRampPalette(brewer.pal(10, \"Paired\"))(length(BP@geneClusters))) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5))\n\n\n\n\n\n\nFigure 3: GO BP terms shared across CNVs.\n\n\n\n\n\n\n\n\n\nFigure 4: GO BP terms network shared across CNVs.\n\n\n\n\n\n\n\n# enrich\nCC = compareCluster(\n  geneCluster = gene_cluster,\n  fun = \"enrichGO\",\n  pvalueCutoff = 0.05,\n  OrgDb = ref_DB_list[[1]],\n  ont = \"CC\"\n)\n\n# map gene symbols\nCC@keytype = \"SYMBOL\"\nmy_symbols = c()\nfor(k in 1:length(CC@geneClusters)){\n  for(i in 1:length(CC@geneClusters[[k]])){\n    ENTREZ = CC@geneClusters[[k]][[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_symbols[i] = SYMBOL\n  }\n  CC@geneClusters[[k]] = my_symbols\n}\nfor(k in 1:length(CC@compareClusterResult$geneID)){\n  my_vec = CC@compareClusterResult$geneID[[k]]\n  my_vec = stringr::str_split(my_vec, \"/\")[[1]]\n  for(i in 1:length(my_vec)){\n    ENTREZ = my_vec[[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_vec[[i]] = SYMBOL[[1]]\n  }\n  my_vec = paste(my_vec, collapse = \"/\")\n  CC@compareClusterResult$geneID[[k]] = my_vec\n}\n\n# plot\np1 = enrichplot::dotplot(CC, includeAll = TRUE) +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5)) +\n  theme(axis.text.x=element_text(angle = 45, hjust = 1))\n\np2 = cnetplot(CC) +\n  scale_fill_manual(values = colorRampPalette(brewer.pal(10, \"Paired\"))(length(CC@geneClusters))) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5))\n\n\n\n\n\n\nFigure 5: GO CC terms shared across CNVs.\n\n\n\n\n\n\n\n\n\nFigure 6: GO CC terms network shared across CNVs.\n\n\n\n\n\n\n\n# enrich\nMF = compareCluster(\n  geneCluster = gene_cluster,\n  fun = \"enrichGO\",\n  pvalueCutoff = 0.05,\n  OrgDb = ref_DB_list[[1]],\n  ont = \"MF\"\n)\n\n# map gene symbols\nMF@keytype = \"SYMBOL\"\nmy_symbols = c()\nfor(k in 1:length(MF@geneClusters)){\n  for(i in 1:length(MF@geneClusters[[k]])){\n    ENTREZ = MF@geneClusters[[k]][[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_symbols[i] = SYMBOL\n  }\n  MF@geneClusters[[k]] = my_symbols\n}\nfor(k in 1:length(MF@compareClusterResult$geneID)){\n  my_vec = MF@compareClusterResult$geneID[[k]]\n  my_vec = stringr::str_split(my_vec, \"/\")[[1]]\n  for(i in 1:length(my_vec)){\n    ENTREZ = my_vec[[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_vec[[i]] = SYMBOL[[1]]\n  }\n  my_vec = paste(my_vec, collapse = \"/\")\n  MF@compareClusterResult$geneID[[k]] = my_vec\n}\n\n# plot\np1 = enrichplot::dotplot(MF, includeAll = TRUE) +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5)) +\n  theme(axis.text.x=element_text(angle = 45, hjust = 1))\n\np2 = cnetplot(MF) +\n  scale_fill_manual(values = colorRampPalette(brewer.pal(10, \"Paired\"))(length(MF@geneClusters))) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5))\n\n\n\n\n\n\nFigure 7: GO MF terms shared across CNVs.\n\n\n\n\n\n\n\n\n\nFigure 8: GO MF terms network shared across CNVs.\n\n\n\n\n\n\n\n# enrich\nKEGG = compareCluster(\n  geneCluster = gene_cluster,\n  fun = \"enrichKEGG\",\n  pvalueCutoff = 0.05,\n  organism = \"sce\"\n)\n\n# map gene symbols\nKEGG@keytype = \"SYMBOL\"\nmy_symbols = c()\nfor(k in 1:length(KEGG@geneClusters)){\n  for(i in 1:length(KEGG@geneClusters[[k]])){\n    ENTREZ = KEGG@geneClusters[[k]][[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_symbols[i] = SYMBOL\n  }\n  KEGG@geneClusters[[k]] = my_symbols\n}\nfor(k in 1:length(KEGG@compareClusterResult$geneID)){\n  my_vec = KEGG@compareClusterResult$geneID[[k]]\n  my_vec = stringr::str_split(my_vec, \"/\")[[1]]\n  for(i in 1:length(my_vec)){\n    ENTREZ = my_vec[[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_vec[[i]] = SYMBOL[[1]]\n  }\n  my_vec = paste(my_vec, collapse = \"/\")\n  KEGG@compareClusterResult$geneID[[k]] = my_vec\n}\n\n# plot\np1 = enrichplot::dotplot(KEGG, includeAll = TRUE) +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5)) +\n  theme(axis.text.x=element_text(angle = 45, hjust = 1))\n\np2 = cnetplot(KEGG) +\n  scale_fill_manual(values = colorRampPalette(brewer.pal(10, \"Paired\"))(length(KEGG@geneClusters))) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5))\n\n\n\n\n\n\nFigure 8: KEGG pathways shared across CNVs.\n\n\n\n\n\n\n\n\n\nFigure 9: KEGG pathways shared across CNVs.\n\n\n\n\n\n\n\n# enrich\nPA = compareCluster(\n  geneCluster = gene_cluster,\n  fun = \"enrichPathway\",\n  pvalueCutoff = 0.05,\n  organism = ref_DB_list[[2]]\n)\n\n# map gene symbols\nPA@keytype = \"SYMBOL\"\nmy_symbols = c()\nfor(k in 1:length(PA@geneClusters)){\n  for(i in 1:length(PA@geneClusters[[k]])){\n    ENTREZ = PA@geneClusters[[k]][[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_symbols[i] = SYMBOL\n  }\n  PA@geneClusters[[k]] = my_symbols\n}\nfor(k in 1:length(PA@compareClusterResult$geneID)){\n  my_vec = PA@compareClusterResult$geneID[[k]]\n  my_vec = stringr::str_split(my_vec, \"/\")[[1]]\n  for(i in 1:length(my_vec)){\n    ENTREZ = my_vec[[i]]\n    SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name\n    my_vec[[i]] = SYMBOL[[1]]\n  }\n  my_vec = paste(my_vec, collapse = \"/\")\n  PA@compareClusterResult$geneID[[k]] = my_vec\n}\n\n# plot\np1 = enrichplot::dotplot(PA, includeAll = TRUE) +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5)) +\n  theme(axis.text.x=element_text(angle = 45, hjust = 1))\n\np2 = cnetplot(PA) +\n  scale_fill_manual(values = colorRampPalette(brewer.pal(10, \"Paired\"))(length(PA@geneClusters))) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5))\n\n\n\n\n\n\nFigure 10: Reactome pathways shared across CNVs.\n\n\n\n\n\n\n\n\n\nFigure 11: Reactome pathways shared across CNVs.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Copy Number Variants</span>"
    ]
  },
  {
    "objectID": "p01-04-copy-number-variants.html#sec-lesson-learnt-feature-selection",
    "href": "p01-04-copy-number-variants.html#sec-lesson-learnt-feature-selection",
    "title": "4  Copy Number Variants",
    "section": "4.5 Lessons Learnt",
    "text": "4.5 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Copy Number Variants</span>"
    ]
  },
  {
    "objectID": "p01-04-copy-number-variants.html#session-information",
    "href": "p01-04-copy-number-variants.html#session-information",
    "title": "4  Copy Number Variants",
    "section": "4.6 Session Information",
    "text": "4.6 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] org.Sc.sgd.db_3.18.0   AnnotationDbi_1.64.1   IRanges_2.36.0        \n [4] S4Vectors_0.40.2       Biobase_2.62.0         BiocGenerics_0.48.1   \n [7] RColorBrewer_1.1-3     magrittr_2.0.3         gridExtra_2.3         \n[10] ggplot2_3.5.2          DT_0.33                ComplexHeatmap_2.18.0 \n[13] clusterProfiler_4.10.1 circlize_0.4.16       \n\nloaded via a namespace (and not attached):\n  [1] jsonlite_2.0.0          shape_1.4.6.1           magick_2.8.7           \n  [4] farver_2.1.2            rmarkdown_2.29          GlobalOptions_0.1.2    \n  [7] fs_1.6.6                zlibbioc_1.48.2         vctrs_0.6.5            \n [10] memoise_2.0.1           RCurl_1.98-1.17         ggtree_3.10.1          \n [13] progress_1.2.3          htmltools_0.5.8.1       curl_6.4.0             \n [16] gridGraphics_0.5-1      sass_0.4.10             bslib_0.9.0            \n [19] htmlwidgets_1.6.4       plyr_1.8.9              cachem_1.1.0           \n [22] igraph_2.1.4            lifecycle_1.0.4         iterators_1.0.14       \n [25] pkgconfig_2.0.3         Matrix_1.6-5            R6_2.6.1               \n [28] fastmap_1.2.0           gson_0.1.0              GenomeInfoDbData_1.2.11\n [31] clue_0.3-66             digest_0.6.37           aplot_0.2.8            \n [34] enrichplot_1.22.0       colorspace_2.1-1        patchwork_1.3.1        \n [37] crosstalk_1.2.1         RSQLite_2.4.2           filelock_1.0.3         \n [40] labeling_0.4.3          httr_1.4.7              polyclip_1.10-7        \n [43] compiler_4.3.3          bit64_4.6.0-1           withr_3.0.2            \n [46] doParallel_1.0.17       graphite_1.48.0         S7_0.2.0               \n [49] BiocParallel_1.36.0     viridis_0.6.5           DBI_1.2.3              \n [52] ggforce_0.5.0           biomaRt_2.58.2          MASS_7.3-60.0.1        \n [55] rappdirs_0.3.3          rjson_0.2.23            HDO.db_0.99.1          \n [58] tools_4.3.3             ape_5.8-1               scatterpie_0.2.5       \n [61] glue_1.8.0              nlme_3.1-164            GOSemSim_2.28.1        \n [64] shadowtext_0.1.5        cluster_2.1.6           reshape2_1.4.4         \n [67] fgsea_1.35.6            generics_0.1.4          gtable_0.3.6           \n [70] tidyr_1.3.1             hms_1.1.3               data.table_1.17.8      \n [73] xml2_1.3.8              tidygraph_1.3.1         XVector_0.42.0         \n [76] ggrepel_0.9.6           foreach_1.5.2           pillar_1.11.0          \n [79] stringr_1.5.1           yulab.utils_0.2.0       splines_4.3.3          \n [82] dplyr_1.1.4             tweenr_2.0.3            BiocFileCache_2.10.2   \n [85] treeio_1.26.0           lattice_0.22-5          bit_4.6.0              \n [88] tidyselect_1.2.1        GO.db_3.18.0            Biostrings_2.70.3      \n [91] reactome.db_1.86.2      knitr_1.50              xfun_0.52              \n [94] graphlayouts_1.2.2      matrixStats_1.5.0       stringi_1.8.7          \n [97] lazyeval_0.2.2          ggfun_0.2.0             yaml_2.3.10            \n[100] ReactomePA_1.46.0       evaluate_1.0.4          codetools_0.2-19       \n[103] ggraph_2.2.1            tibble_3.3.0            qvalue_2.34.0          \n[106] graph_1.80.0            BiocManager_1.30.26     ggplotify_0.1.2        \n[109] cli_3.6.5               jquerylib_0.1.4         dichromat_2.0-0.1      \n[112] Rcpp_1.1.0              GenomeInfoDb_1.38.8     dbplyr_2.5.0           \n[115] png_0.1-8               XML_3.99-0.18           parallel_4.3.3         \n[118] blob_1.2.4              prettyunits_1.2.0       DOSE_3.28.2            \n[121] bitops_1.0-9            viridisLite_0.4.2       tidytree_0.4.6         \n[124] scales_1.4.0            purrr_1.1.0             crayon_1.5.3           \n[127] GetoptLong_1.0.5        rlang_1.1.6             cowplot_1.2.0          \n[130] fastmatch_1.1-6         KEGGREST_1.42.0",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Copy Number Variants</span>"
    ]
  },
  {
    "objectID": "p01-05-phylogeny-and-population-structure.html",
    "href": "p01-05-phylogeny-and-population-structure.html",
    "title": "5  Phylogeny and Population Structure",
    "section": "",
    "text": "5.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 6.5.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Phylogeny and Population Structure</span>"
    ]
  },
  {
    "objectID": "p01-05-phylogeny-and-population-structure.html#on-this-page",
    "href": "p01-05-phylogeny-and-population-structure.html#on-this-page",
    "title": "5  Phylogeny and Population Structure",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Phylogeny and Population Structure</span>"
    ]
  },
  {
    "objectID": "p01-05-phylogeny-and-population-structure.html#phylogeny",
    "href": "p01-05-phylogeny-and-population-structure.html#phylogeny",
    "title": "5  Phylogeny and Population Structure",
    "section": "5.2 Phylogeny",
    "text": "5.2 Phylogeny\n\n5.2.1 Identify quasi single-copy genes\nUniform header sequences, since they come from multiple sources and they are all messed up and inconsistent.\n\n# rename protein sequences\nfor file in *maker.aa.fa; do\n  NAME=$(basename $file .maker.aa.fa)_;\n  sed -i \"s/&gt;/&gt;$NAME/g\" $file;\ndone\n\nfor file in *[0-9].aa.fa; do\n  NAME=$(basename $file .aa.fa)_;\n  sed -i \"s/&gt;/&gt;$NAME/g\" $file;\ndone\n\n# concatenate all files together\ncat *.aa.fa &gt; all_plusKV.aa.fa\n\nWe will create a set of non-redundant S. cerevisiae proteins, by clustering them based on a 70% sequence similarity groups.\n\n# cluster sequences\ncd-hit -i all_plusKV.aa.fa -o all_plusKV.aa.0.7.fa -T 24 -M 16000 -c 0.7 -d 60\n\nWe now check protein clusters having only a single copy gene per yeast strain.\n\n# filter clusters into small one gene ortholog clusters\npython3.5 Vikings.filterCDHITclusters.py --clstr all_plusKV.aa.0.7.fa.clstr\n\n# clean folder\nmkdir -p 01_filter_clusters/01_clusters_311-350\nmkdir -p 01_filter_clusters/02_clusters_311-350_noDuplicates\nmv all_plusKV.aa.0.7.fa.clstr.fltr.clstr.* 01_filter_clusters\n\n# remove duplicated genes from orthologs clusters\npython3.5 Vikings.filterCDHITclustersDeduplicates.py \\\n    --indir 01_filter_clusters/01_clusters_311-350 \\\n    --outdir 01_filter_clusters/02_clusters_311-350_noDuplicate\n\n# retrieve amino acid sequences\nmkdir -p 01_filter_clusters/03_clusters_aa\n\n# format headers\nsed -i 's/ .*//g' ../all_plusKV.aa.fa\nsed -i 's/|.*//g' ../all_plusKV.aa.fa &\n\nfor file in 02_clusters_311-350_noDuplicates/*; do sed -i 's/|.*//g' $file ; done\n\npython3.5 Vikings.CDHITclustersList2ntSeq.py \\\n  --fasta all_plusKV.aa.fa \\\n  --indir ./01_filter_clusters/02_clusters_311-350_noDuplicates/ \\\n  --outdir ./01_filter_clusters/03_clusters_aa/\n\n\n\n5.2.2 Create animo acid and codon alignments\nPrepare nucleotidic sequences\n\nmkdir 02_nt_start/\n\n# reformat the header to match aa\nfor file in *.fa; do\n    STRAIN=$(basename $file | tr '.' ' ' | cut -f 1 -d \" \");\n    sed -i 's/ .*//g' $file;\n    sed -i 's/|.*//g' $file;\n    sed -i 's/&gt;/&gt;_/g' $file;\n    sed -i \"s/&gt;/&gt;$STRAIN/g\" $file;\ndone \n\n# select nt per cluster\ncat *.fa &gt; ../all_plusKV.nt.fa\n# correct worng headers\nsed -i 's/Skudr_Skudr/Skudr/g' all_plusKV.nt.fa;\nsed -i 's/Suvar_Suvar/Suvar/g' all_plusKV.nt.fa;\nsed -i 's/Seuba_Seuba/Seuba/g' all_plusKV.nt.fa\nmkdir 03_nt_clusters\n\n# cluster NT\ncd-hit -T 72 -c 0.98 -aL 0.95 -d 0 -i all_plusKV.nt.fa -o all_plusKV.nt.098.fa\n\n# extract cluster gene lists\npython3.5 Vikings.filterCDHITclusters.nt.py --clstr all_plusKV.nt.098.fa.clstr\n\n# select genes\ncat gene.lst \\\n  | xargs -n 1 -P 64 -I {} sh -c \\\n    'echo {}; \\\n    for file in 00_nt_clusters_lst/*.clstr.*; do \n      if grep -q {} $file; \n        then cp $file 00_nt_clusters_lst_select;\n    fi; done'\n\n# add Hittinger IDs\nfor file in 99_Hittinger/coding/*.fsa; do\n  grep \"&gt;\" $file \\\n    | sed 's/&gt;//g' \\\n    &gt; 99_Hittinger/geneList/$(basename $file .fsa).lst;\ndone\n\npython3.5 Vikings.addHittingerID.py \\\n  --CDlists 01_nt_clusters_lst_select \\\n  --Hit 99_Hittinger/geneList/ \\\n  --outdir 02_nt_clusters_lst_select_Hittinger\n\ncat all_plusKV.aa.fa 99_Hittinger/coding/*.aa.mfa &gt; all_plusKV.Hit.aa.fa\ncat all_plusKV.nt.fa 99_Hittinger/coding/*.fsa &gt; all_plusKV.Hit.nt.fa\n\n\nfor file in 02_nt_clusters_lst_select_Hittinger/*.Hit; do sed -i 's/ .*//g' $file ; done\n\n# select aa for each cluster\npython3.5 Vikings.CDHITclustersList2ntSeq.py \\\n  --fasta all_plusKV.Hit.aa.fa \\\n  --indir ./02_nt_clusters_lst_select_Hittinger \\\n  --outdir ./03_aa_clusters/\n\n# align aa clusters\nls ./03_aa_clusters/ \\\n  | xargs -n 8 -P 8 -I {} sh -c \\\n  'mafft --localpair --maxiterate 1000 --ep 0.123 --thread 8 ./03_aa_clusters/{} &gt; ./04_aa_clusters_aln/{}.aln.fa'\n\nfor file in ./04_aa_clusters_aln/*.fa; do\n  perl ~/rubbish/00_Brigida_starting_files/pal2nal.v14/pal2nal.pl \\\n    $file 05_nt_clusters/$(basename $file .aln.fa)\\\n    -output fasta \\\n    &gt; 06_nt_clusters_aln/$(basename $file .fa).fa;\ndone\n\n# rename headers to keep only strain name\nfind 05_nt_align_long/* | xargs -n 1 -P 64 sed -i 's/_.*//g' \n\nmkdir ../07_nt_aln_ready;\nfor file in ./*; do\n  NAME=$(grep S288C $file | sed 's/&gt;S288C_//g');\n  cp $file ../07_nt_aln_ready/$NAME.nt.aln.fa;\ndone\n\n# rename headers to keep only strain name\nfind 07_nt_aln_ready/* | xargs -n 1 -P 64 sed -i 's/_.*//g' \n\n\n\n5.2.3 Phylogenetic reconstruction\nThis resulted in 1,390 single-copy genes identified across 151 yeast strains of Gallone et al. 2016 and the 44 kveiks strains in this study. Let’s build a Maximum Likelihood tree to reconstruct the phylogenetic relationships between these S. cerevisiae yeast strains!\n\n5.2.3.1 Maximum Likelihood tree\n\n\n# concatenate alignmnets\nmkdir 08_concatenated_ML\nperl catfasta2phyml.pl \\\n  --fasta \\\n  --concatenate 07_nt_aln_ready/*.fa \\\n  &gt; 08_concatenated_ML/clstr.all.concat.nt.align.fa\n\n# ML analysis on concatenated alignment\n~/bin/iqtree-1.6.8-Linux/bin/iqtree \\\n  -s clstr.all.concat.nt.align.fa \\\n  -st CODON \\\n  -pre clstr.all.concat.nt.align \\\n  -nt 52 \\\n  -wbt \\\n  -bb 1000 \\\n  -alrt 1000 \\\n  -m MG+F1X4\n  \n\nPlot the reconstructed phylogenetic tree.\n\n# mapping swap_yeasts\nto_swap = data.frame(\n  old_name = c(\"21P1\", \"17P5\", \"45P5\", \"28P1\", \"28P6\"),\n  new_name = c(\"21R40\", \"17R20\", \"45R38\", \"28R31\", \"28R1\")\n)\n\n# import final calde list\nfinal_clades = read.table(\n  \"./data/p01-05/final_clades_for_pub.txt\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n\n\n# load tree\nbest_tree = read.tree(\"./data/p01-05/clstr.all.concat.nt.align.short.tre\")\n\nbest_tree = as.phylo(best_tree)\nbest_tree$node.label = as.numeric(as.character(best_tree$node.label))\nbest_tree = ape::root(best_tree,\n                      which(best_tree$tip.label %in% c(\"Skud\")),\n                      edgelabel = TRUE)\nbest_tree = ladderize(best_tree, right = TRUE)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p01-05/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\ntree_annot = tree_annot_raw[, -which(colnames(tree_annot_raw) == \"seq_name\")]\ntree_annot$Origin = factor(tree_annot$niche3,\n                           levels = c(\"North-West Norway\",  \"South-West Norway\",\"Central-Eastern Norway\",\n                                      \"Latvia\", \"Lithuania\", \"Russia\", \"\"))\ncolnames(tree_annot) = c(\"Strain\", \"Name\", \"Niche\", \"niche2\", \"niche3\", \"group\", \"Origin\")\ntree_annot$Niche = ifelse(tree_annot$Niche == \"farmhouse\", \"Farmhouse\", tree_annot$Niche)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot$Strain = stringr::str_replace(\n    tree_annot$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot$Name = stringr::str_replace(\n    tree_annot$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  best_tree$tip.label = stringr::str_replace(\n    best_tree$tip.label,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  ) \n}\n\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$Niche == \"Farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\n\ngpinfo = list(Beer1 = tree_annot$Strain[tree_annot$Clade == 'Beer1'],\n              Beer2 = tree_annot$Strain[tree_annot$Clade == 'Beer2'],\n              Wine = tree_annot$Strain[tree_annot$Clade == 'Wine'],\n              Asian = tree_annot$Strain[tree_annot$Clade == 'Asia'],\n              Farmhouse = tree_annot$Strain[tree_annot$Clade == 'Farmhouse'],\n              Mixed = tree_annot$Strain[tree_annot$Clade == 'Mixed'],\n              Other = tree_annot$Strain[tree_annot$Clade == 'Other'])\n\n#relabel nodes\nbest_tree = treeio::rename_taxa(best_tree, data = tree_annot, Name, Strain)\nbest_tree = ggtree::groupOTU(best_tree, gpinfo)\n\n\n\n#------------------------------------------------------------------------------#\n## 1.2 - Plot tree                                                          ####\n\nselected_labels = c(\"Muri\", \"7R25\", \"38R16\", \"40R14\", \"40R20\", \"40R1\")\nall_other_labels = best_tree$tip.label[-which(best_tree$tip.label %in% selected_labels)]\n\n# plot\np_ML = ggtree(best_tree,\n              #aes(color = group),\n              layout = \"fan\",\n              open.angle = 0) + \n  geom_tiplab2(aes(subset = isTip & label %in% all_other_labels),\n               color = \"black\",\n               align = TRUE,\n               linesize = 0.125,\n               offset = 0.0038,\n               size = 2.75) +\n  geom_tiplab2(aes(subset = isTip & label %in% selected_labels),\n               color = \"grey75\",\n               align = TRUE,\n               linesize = 0.125,\n               offset = 0.0038,\n               size = 2.75) +\n  scale_color_manual(values = c(2, 3, 4, 5, 6, '#000000', 7, 8))+\n  geom_nodepoint(aes(fill = cut(as.numeric(label),\n                                c(0, 70, 90, 100))), shape = 21, size = 3) +\n  theme_tree(legend.position = c(0.1, 0.55)) +\n  scale_fill_manual(values = c(\"white\", \"grey\", \"black\"),\n                    guide = \"legend\",\n                    name = \"Bootstrap\",\n                    breaks = c(\"(90,100]\", \"(70,90]\", \"(0,70]\"),\n                    labels = expression(BP&gt;=90,70 &lt;= BP * \" &lt; 90\", BP &lt; 70))+\n  labs(title = 'Phylogenetic Tree', color = 'Clade') +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n#p = ggtree::flip(p, 258, 325)\n\n\np_ML = p_ML +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Clade),\n                          color = NA, offset = 0.045, pwidth = 0.0025) +\n  scale_fill_manual(values = c(\"#df536b\", \"#61d04f\", \"#28e2e5\", \"#2297e6\", \"#cd0bbc\", \"grey75\", \"#bcf60c\")) +\n  # scale_fill_manual(values = c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231',\n  #                              '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe',\n  #                              '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000',\n  #                              '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080',\n  #                              '#ffffff', '#000000')) +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Origin),\n                          color = NA, offset = 0.0475, pwidth = 0.0025) +\n  scale_fill_manual(values = c('#0571B0',\n                               '#92C5DE',\n                               '#018571',\n                               '#FFDA00',\n                               '#FBA01D',\n                               '#A6611A',\n                               '#ffffff')) +\n  labs(fill = \"Origin\") +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\n\np_ML\n\n\n\n\nFigure 1: Maximum Likelihood tree.\n\n\n\n\nBased on the concatenated ML tree, Farmhouse yeasts seems not monophyletic. However, the well enstablished phylogenetic relationships between industrial S. cerevisiae strains (e.g.: Beer1, Beer2, Wine clades, see Gallone et al. 2016, Peter et al. 2018) were not reconstructed, suggesting that the presence of highly heterozigous and possibly hybrid (Preiss et al. 2018) Farmhouse yeasts may impair the phylogenetic reconstruction.\nLet’s see if the 1,390 genes we have selected for the phylogenetic reconstruction can confirm the phylogenetic relationships between industrial clades reconstructed by Gallone et al. 2016, Peter et al. 2018). We therefore remove the farmhouse yeasts sequences from the alignments, recompute the aa and nt alignments and run the supermatrix ML analysis.\n\n\n#### HERE I REMOVE THE FARMHOUS YEASTS.\n################################################################################\n################################################################################\n################################################################################\n################################################################################\n################################################################################\n################################################################################\n################################################################################\n################################################################################\n################################################################################\n\n# concatenate alignmnets\nmkdir 08_concatenated_ML\nperl catfasta2phyml.pl \\\n  --fasta \\\n  --concatenate 07_nt_aln_ready/*.fa \\\n  &gt; 08_concatenated_ML/clstr.all.concat.nt.align.fa\n\n# ML analysis on concatenated alignment\n~/bin/iqtree-1.6.8-Linux/bin/iqtree \\\n  -s clstr.all.concat.nt.align.fa \\\n  -st CODON \\\n  -pre clstr.all.concat.nt.align \\\n  -nt 52 \\\n  -wbt \\\n  -bb 1000 \\\n  -alrt 1000 \\\n  -m MG+F1X4\n\n\n# load tree\nbest_tree = read.tree(\"./data/p01-05/clstr.all.concat.nt.align.noKV.short.tre\")\n\nbest_tree = as.phylo(best_tree)\nbest_tree$node.label = as.numeric(as.character(best_tree$node.label))\nbest_tree = ape::root(best_tree,\n                      which(best_tree$tip.label %in% c(\"Skud\")),\n                      edgelabel = TRUE)\nbest_tree = ladderize(best_tree, right = TRUE)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p01-05/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\ntree_annot = tree_annot_raw[, -which(colnames(tree_annot_raw) == \"seq_name\")]\ntree_annot$Origin = factor(tree_annot$niche3,\n                           levels = c(\"North-West Norway\",  \"South-West Norway\",\"Central-Eastern Norway\",\n                                      \"Latvia\", \"Lithuania\", \"Russia\", \"\"))\ncolnames(tree_annot) = c(\"Strain\", \"Name\", \"Niche\", \"niche2\", \"niche3\", \"group\", \"Origin\")\ntree_annot$Niche = ifelse(tree_annot$Niche == \"farmhouse\", \"Farmhouse\", tree_annot$Niche)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot$Strain = stringr::str_replace(\n    tree_annot$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot$Name = stringr::str_replace(\n    tree_annot$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  best_tree$tip.label = stringr::str_replace(\n    best_tree$tip.label,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  ) \n}\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$Niche == \"Farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\n\ngpinfo = list(Beer1 = tree_annot$Strain[tree_annot$Clade == 'Beer1'],\n              Beer2 = tree_annot$Strain[tree_annot$Clade == 'Beer2'],\n              Wine = tree_annot$Strain[tree_annot$Clade == 'Wine'],\n              Asian = tree_annot$Strain[tree_annot$Clade == 'Asia'],\n              Farmhouse = tree_annot$Strain[tree_annot$Clade == 'Farmhouse'],\n              Mixed = tree_annot$Strain[tree_annot$Clade == 'Mixed'],\n              Other = tree_annot$Strain[tree_annot$Clade == 'Other'])\n\n#relabel nodes\nbest_tree = treeio::rename_taxa(best_tree, data = tree_annot, Name, Strain)\nbest_tree = ggtree::groupOTU(best_tree, gpinfo)\n\n\n# plot\np_ML_noK = ggtree(best_tree,\n                  #aes(color = group),\n                  layout = \"fan\",\n                  open.angle = 0) + \n  geom_tiplab2(color = \"black\",\n               align = TRUE,\n               linesize = 0.125,\n               offset = 0.0028,\n               size = 2.75) +\n  scale_color_manual(values = c(2, 3, 4,  6, '#000000', 7, 8))+\n  geom_nodepoint(aes(fill = cut(as.numeric(label),\n                                c(0, 70, 90, 100))), shape = 21, size = 3) +\n  theme_tree(legend.position = c(0.1, 0.55)) +\n  scale_fill_manual(values = c(\"white\", \"grey\", \"black\"),\n                    guide = \"legend\",\n                    name = \"Bootstrap\",\n                    breaks = c(\"(90,100]\", \"(70,90]\", \"(0,70]\"),\n                    labels = expression(BP&gt;=90,70 &lt;= BP * \" &lt; 90\", BP &lt; 70))+\n  labs(title = 'Phylogenetic Tree', color = 'Clade') +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\np_ML_noK = p_ML_noK +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Clade),\n                          color = NA, offset = 0.07, pwidth = 0.0025) +\n  scale_fill_manual(values = c(\"#df536b\", \"#61d04f\", \"#28e2e5\", \"#cd0bbc\", \"grey75\", \"#bcf60c\")) +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\n\np_ML_noK\n\n\n\n\nFigure 2: Maximum Likelihood tree without the Farmhouse yeasts.\n\n\n\n\nYes, we can confirm the well enstablished phylogenetic relationships between already sequenced yeast straind from the industrial clades based on a supermatrix analysis of the concatenated selected 1,390 genes.\n\n\n\n5.2.4 Create coalescence-based tree\nAs seen, ML approaches fail to reconstruct an expected phylogenetic tree of S. cerevisiae when Farmhouse yeasts are included. To better handle high levels of heterozygosity and partial lineage sorting, we inferred the species tree by applying coalescence-based phylognetic reconstruction on the single-gene ML trees.\n[supermatrix analyses are based on large datasets and can use complex models that can account for the heterogeneity of the substitution process, but cannot account for gene-tree species-tree incongruence, while coalescence-based approaches accommodate incomplete lineage sorting, but rely on topologies inferred from small datasets using simpler models that make them more sensitive to stochastic noise]\nLet’s reconstruct the single gene ML trees.\n\n# run IQtree in parallel for each nt gene alignment\nls ../07_nt_aln_ready/*.fa \\\n  | xargs -n 8 -P 8 -I {} sh -c \\\n    '~/bin/iqtree-1.6.8-Linux/bin/iqtree \\\n       -s {} \\\n       -st CODON \\\n       -pre {} \\\n       -nt 64 \\\n       -wbt \\\n       -bb 1000 \\\n       -alrt 1000 \\\n       -m MG+F1X4'\n\nLet’s run a coalescence based approach on the reonstructed single-gene ML trees plus the 1,000 ultrafast Boostrap trees generated for each tree by IQtree (~1,400,000 single-gene tree). The coalescensce-based phylogeny was inferred 100 times allowing gene resampling to obtain Bootstrap estimated support values for each node.\n\n# colaescence-based species tree\njava -Xmx30000M -jar ~/bin/Astral/astral.5.6.3.jar \\\n  --bootstraps genetrees.input.BS \\\n  --gene-resampling \\\n  -r 100 \\\n  --input genetrees.input.tre \\\n  --output genetrees.output.BS.tre \\\n  2&gt; genetrees.output.BS.log\n\nPlot the reconstructed species tree (based on coalescence).\n\n# load tree\nbest_tree = read.tree(\"./data/p01-05/genetrees.output.BS.best.2025.tre\")\n\nbest_tree = as.phylo(best_tree)\nbest_tree$node.label = as.numeric(as.character(best_tree$node.label))\nbest_tree = ape::root(best_tree,\n                      which(best_tree$tip.label %in% c(\"Skud\")),\n                      edgelabel = TRUE)\nbest_tree = ladderize(best_tree, right = TRUE)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p01-05/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\ntree_annot = tree_annot_raw[, -which(colnames(tree_annot_raw) == \"seq_name\")]\ntree_annot$Origin = factor(tree_annot$niche3,\n                           levels = c(\"North-West Norway\",  \"South-West Norway\",\"Central-Eastern Norway\",\n                                      \"Latvia\", \"Lithuania\", \"Russia\", \"\"))\ncolnames(tree_annot) = c(\"Strain\", \"Name\", \"Niche\", \"niche2\", \"niche3\", \"group\", \"Origin\")\ntree_annot$Niche = ifelse(tree_annot$Niche == \"farmhouse\", \"Farmhouse\", tree_annot$Niche)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot$Strain = stringr::str_replace(\n    tree_annot$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot$Name = stringr::str_replace(\n    tree_annot$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  best_tree$tip.label = stringr::str_replace(\n    best_tree$tip.label,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  ) \n}\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$Niche == \"Farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\n\ngpinfo = list(Beer1 = tree_annot$Strain[tree_annot$Clade == 'Beer1'],\n              Beer2 = tree_annot$Strain[tree_annot$Clade == 'Beer2'],\n              Wine = tree_annot$Strain[tree_annot$Clade == 'Wine'],\n              Asian = tree_annot$Strain[tree_annot$Clade == 'Asia'],\n              Farmhouse = tree_annot$Strain[tree_annot$Clade == 'Farmhouse'],\n              Mixed = tree_annot$Strain[tree_annot$Clade == 'Mixed'],\n              Other = tree_annot$Strain[tree_annot$Clade == 'Other'])\n\n#relabel nodes\nbest_tree = treeio::rename_taxa(best_tree, data = tree_annot, Name, Strain)\nbest_tree = ggtree::groupOTU(best_tree, gpinfo)\n\n\n# mark allhocthonous yeast\nselected_labels = c(\"Muri\", \"7R25\", \"38R16\", \"40R14\", \"40R20\", \"40R1\")\nall_other_labels = best_tree$tip.label[-which(best_tree$tip.label %in% selected_labels)]\n\n# plot\np = ggtree(best_tree,\n           #aes(color = group),\n           layout = \"fan\",\n           open.angle = 0) + \n  geom_tiplab2(aes(subset = isTip & label %in% all_other_labels),\n               color = \"black\",\n               offset = 3,\n               size = 2.75) +\n  geom_tiplab2(aes(subset = isTip & label %in% selected_labels),\n               color = \"grey75\",\n               offset = 3,\n               size = 2.75) +\n  scale_color_manual(values = c(2, 3, 4, 5, 6, '#000000', 7, 8))+\n  geom_nodepoint(aes(fill = cut(as.numeric(label),\n                                c(0, 70, 90, 100))), shape = 21, size = 3) +\n  theme_tree(legend.position = c(0.1, 0.55)) +\n  scale_fill_manual(values = c(\"white\", \"grey\", \"black\"),\n                    guide = \"legend\",\n                    name = \"Bootstrap\",\n                    breaks = c(\"(90,100]\", \"(70,90]\", \"(0,70]\"),\n                    labels = expression(BP&gt;=90,70 &lt;= BP * \" &lt; 90\", BP &lt; 70))+\n  labs(title = 'Phylogenetic Tree', color = 'Clade') +\n  theme(plot.title = element_text(hjust = 0.5))\np = ggtree::flip(p, 258, 325)\n\np_tree = p +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Clade),\n                          color = NA, offset = 0.04, pwidth = 2) +\n  scale_fill_manual(values = c(\"#df536b\", \"#61d04f\", \"#28e2e5\", \"#2297e6\", \"#cd0bbc\", \"grey75\", \"#bcf60c\")) +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Origin),\n                          color = NA, offset = 0.06, pwidth = 1.5) +\n  scale_fill_manual(values = c('#0571B0',\n                               '#92C5DE',\n                               '#018571',\n                               '#FFDA00',\n                               '#FBA01D',\n                               '#A6611A',\n                               '#ffffff')) +\n  labs(fill = \"Origin\") +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\n\np_tree\n\n\n\n\nFigure 3: Coalescence-based phylogenetic tree.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Phylogeny and Population Structure</span>"
    ]
  },
  {
    "objectID": "p01-05-phylogeny-and-population-structure.html#population-structure",
    "href": "p01-05-phylogeny-and-population-structure.html#population-structure",
    "title": "5  Phylogeny and Population Structure",
    "section": "5.3 Population Structure",
    "text": "5.3 Population Structure\nHere I simply run FastStructure for a range of k, and then identify the best kmer. I have run FastStructure as well giving logarithmic priors, but the results where comparable\n\n5.3.1 Farmhouse yeasts only\n\n# merge all chromosomes together\n~/bin/bcftools-1.9/bcftools concat \\\n  kveiks.S288C.variants.chr1.gvcf.gz kveiks.S288C.variants.chr2.gvcf.gz \\\n  kveiks.S288C.variants.chr3.gvcf.gz kveiks.S288C.variants.chr4.gvcf.gz \\\n  kveiks.S288C.variants.chr5.gvcf.gz kveiks.S288C.variants.chr6.gvcf.gz \\\n  kveiks.S288C.variants.chr7.gvcf.gz kveiks.S288C.variants.chr8.gvcf.gz \\\n  kveiks.S288C.variants.chr9.gvcf.gz kveiks.S288C.variants.chr10.gvcf.gz \\\n  kveiks.S288C.variants.chr11.gvcf.gz kveiks.S288C.variants.chr12.gvcf.gz \\\n  kveiks.S288C.variants.chr13.gvcf.gz kveiks.S288C.variants.chr14.gvcf.gz \\\n  kveiks.S288C.variants.chr15.gvcf.gz kveiks.S288C.variants.chr16.gvcf.gz \\\n  --output-type z --output kveiks.S288C.variants.vcf.gz --threads 16\n\n# hard filter low quality variants\njava -jar ~/bin/GenomeAnalysisTK-3.3-0-g37228af/GenomeAnalysisTK.jar \\\n  --analysis_type VariantFiltration \\\n  --variant kveiks.S288C.variants.vcf.gz \\\n  --out kveiks.S288C.variants.fltr.vcf \\\n  --reference_sequence $DB \\\n  --filterExpression \"QD &lt; 2.0\" --filterName \"QD_Low\" \\\n  --filterExpression \"MQ &lt; 40.0\" --filterName \"MQ_Low\" \\\n  --filterExpression \"GQ &lt; 30\" --filterName \"GQ_Low\" \\\n  --filterExpression \"AD &lt; 5\" --filterName \"AD_Low\"\n\n# select biallelic loci, filter for MAF and linkage disequilibrium\n~/bin/plink_linux_x86_64_20181202/plink \\\n  --make-bed --double-id --allow-extra-chr \\\n  --indep-pairwise 50 5 0.5 --maf 0.05 \\\n  --biallelic-only --geno 0.25 \\\n  --vcf kveiks.S288C.variants.fltr.vcf.gz \\\n  --out kveiks.S288C.variants.fltr.bi\n\n# run fastStructure simple\nfor k in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; do\n  python2.7 ~/bin/faststructure/fastStructure-1.0/structure.py \\\n    -K \"${k}\" --input=kveiks.S288C.variants.fltr.bi \\\n    --output=kveiks.S288C.variants.fltr.bi.structure \\\n    --prior=simple &\ndone\n\n# choose the best K-mer\npython2.7 ~/bin/faststructure/fastStructure-1.0/chooseK.py \\\n  --input=all_plusKV.fltr.bi.structure\n\n==&gt; Model complexity that maximizes marginal likelihood = 4 ==&gt; Model components used to explain structure in data = 5\n\n\n5.3.2 Farmhouse yeasts + Gallone 2019\n\n# run fastStructure simple\nfor k in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; do\n  python2.7 ~/bin/faststructure/fastStructure-1.0/structure.py \\\n    -K \"${k}\" --input=all_plusKV.fltr.bi \\\n    --output=all_plusKV.fltr.bi.structure \\\n    --prior=simple &\ndone\n\n# choose the best K-mer\npython2.7 ~/bin/faststructure/fastStructure-1.0/chooseK.py \\\n  --input=all_plusKV.fltr.bi.structure\n\n==&gt; Model complexity that maximizes marginal likelihood = 20 ==&gt; Model components used to explain structure in data = 15\nCODE BELOW TO BE DOUBLECHECKED\n\n# print distruct plots\nfor k in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; do\n  python2.7 ~/bin/faststructure/fastStructure-1.0/distruct.py\n     -K \"${k}\" \\\n     --input=all_plusKV.fltr.bi.structure \\\n     --output=all_plusKV.fltr.bi.structure.\"${k}\".svg \\\n     --popfile=all_plusKV.poplabels;\ndone\n\n\n\n5.3.3 PCAs\n\n\n# run PCA based on biallelic SNPs\n~/bin/plink_linux_x86_64_20181202/plink \\\n  --allow-extra-chr \\\n  --bfile kveiks_and_Gallone2016.fltr.bi \\\n  --double-id \\\n  --out kveiks_and_Gallone2016.fltr.bi \\\n  --pca\n  \n~/bin/plink_linux_x86_64_20181202/plink \\\n  --allow-extra-chr \\\n  --bfile kveiks.fltr.bi \\\n  --double-id \\\n  --out kveiks.fltr.bi \\\n  --pca\n\n\n# import table\nPCA_all = read.delim(\"./data/p01-05/kveiks_and_Gallone2016.fltr.bi.eigenvec\", header = FALSE, sep = \" \", stringsAsFactors = FALSE)\nPCA_variance1 = read.delim(\"./data/p01-05/kveiks_and_Gallone2016.fltr.bi.eigenval\", header = FALSE, sep = \"\\t\", stringsAsFactors = FALSE)\n\n# format\nPCA_all$V1 = tree_annot_raw[match(PCA_all$V1, tree_annot_raw$seq_name), \"Strain\"]\nPCA_all[42, \"V1\"] = \"7R25\"\nrow.names(PCA_all) = PCA_all$V1\nPCA_all$niche1 = tree_annot[match(PCA_all$V1, tree_annot$Strain), \"Clade\"]\nPCA_all$group = tree_annot[match(PCA_all$V1, tree_annot_raw$Strain), \"group\"]\nPCA_all$niche1 = stringr::str_replace_all(PCA_all$niche1, \"farmhouse\", \"Farmhouse\")\nPCA_all$niche1[is.na(PCA_all$niche1)] = \"Farmhouse\"\nPCA_all$niche1 = ifelse(\n  PCA_all$V1 %in% c(\"k7R25\", \"Muri\", \"40R1\", \"40R20\", \"40R14\", \"38R16\"),\n  \"Allochthonous\",\n  PCA_all$niche1\n)\n\nPCA_all_plot = ggplot2::ggplot(PCA_all, aes(x = V3, y = V4)) +\n  geom_point(aes(fill = niche1), size = 4, alpha = 0.5, shape = 21) +\n  #ggrepel::geom_text_repel(aes(label = V1), hjust = 0, vjust = 0, max.overlaps = 20, show.legend = FALSE) +\n  scale_fill_manual(values = c(\n    'salmon',\n    \"#df536b\", \"#61d04f\", \"#28e2e5\", \"#2297e6\", \"#cd0bbc\", \"grey75\", \"#bcf60c\"\n  )) +\n  guides(fill = guide_legend(nrow = 5, byrow = TRUE)) +\n  labs(x = paste0(\"PC1 (\", round(PCA_variance1[1, 1], 2),\"%)\"),\n       y = paste0(\"PC2 (\", round(PCA_variance1[2, 1], 2),\"%)\")) +\n  theme(title = element_blank(),\n        axis.text.x = element_text(size = 16),\n        axis.text.y = element_text(size = 16),\n        axis.title = element_text(size = 18),\n        legend.position = c(0.75, 0.75),\n        #legend.position = \"bottom\",\n        legend.box.background = element_rect(colour = \"grey45\"),\n        legend.key = element_blank(),\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank())\n\nPCA_all_plot\n\n\n\n\nFigure 5: PCA.\n\n\n\n\n\n# import table\nPCA_kveiks = read.delim(\"./data/p01-05/kveiks.fltr.bi.eigenvec\", header = FALSE, sep = \" \", stringsAsFactors = FALSE)\nPCA_variance = read.delim(\"./data/p01-05/kveiks.fltr.bi.eigenval\", header = FALSE, sep = \"\\t\", stringsAsFactors = FALSE)\nfor(k in 1:nrow(to_swap)){\n  PCA_kveiks$V1 = stringr::str_replace(\n    PCA_kveiks$V1,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  PCA_kveiks$V2 = stringr::str_replace(\n    PCA_kveiks$V2,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\n# format\nrow.names(PCA_kveiks) = PCA_kveiks$V1\nPCA_kveiks = PCA_kveiks %&gt;% \n  dplyr::mutate(Strain = V2) %&gt;%\n  dplyr::left_join(., tree_annot, by = \"Strain\") %&gt;%\n  dplyr::mutate(\n    niche3 = ifelse(niche3 == \"South-West Norway\", \"S-W Norway\", niche3),\n    niche3 = ifelse(niche3 == \"North-West Norway\", \"N-W Norway\", niche3),\n    niche3 = ifelse(niche3 == \"Central-Eastern Norway\", \"C-E Norway\", niche3)\n  )\nPCA_kveiks$niche3 = ifelse(\n  PCA_kveiks$V1 %in% c(\"k7R25\", \"Muri\", \"40R1\", \"40R20\", \"40R14\", \"38R16\"),\n  \"Allochthonous\",\n  PCA_kveiks$niche3\n)\n\nPCA_kveiks_plot = ggplot2::ggplot(PCA_kveiks, aes(x = V3, y = V4)) +\n  geom_point(aes(fill = niche3), size = 4, alpha = 0.5, shape = 21) +\n  ggrepel::geom_text_repel(aes(label = V1), hjust = 0, vjust = 0, max.overlaps = 20, show.legend = FALSE) +\n  scale_fill_manual(values = c('salmon', '#018571', '#FFDA00', '#FBA01D', '#0571B0','#A6611A', '#92C5DE')) +\n  guides(fill = guide_legend(nrow = 4, byrow = TRUE)) +\n  labs(x = paste0(\"PC1 (\", round(PCA_variance[1, 1], 2),\"%)\"),\n       y = paste0(\"PC2 (\", round(PCA_variance[2, 1], 2),\"%)\")) +\n  theme(title = element_blank(),\n        axis.text.x = element_text(size = 16),\n        axis.text.y = element_text(size = 16),\n        axis.title = element_text(size = 18),\n        legend.position = c(0.75, 0.2),\n        #legend.position = \"bottom\",\n        legend.box.background = element_rect(colour = \"grey45\"),\n        legend.key = element_blank(),\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank())\nPCA_kveiks_plot\n\n\n\n\nFigure 6: PCA.\n\n\n\n\n\n\n5.3.4 Distruct plots\n\n# all strains print sequence\nsort_all = c(\n  \"2509\", \"2587\", \"2588\", \"2589\", \"2503\", \"2538\", \"2541\", \"2542\", \"2544\", \"2546\", \n  \"2555\", \"X1018\", \"X1033\", \"X1062\", \"X1086\", \"X1113\", \"X2018\", \n  \"x1129\", \"X2013\", \"X5508\", \"2549\", \"X1052\", \"2502\", \"2504\", \"2505\", \"2506\", \"2507\", \"2510\", \"2511\", \"2512\", \"2513\", \"2522\",\n  \"2524\", \"2528\", \"2533\", \"2547\", \"2563\", \"2571\", \"2585\", \"2592\", \"2597\", \"2598\", \"X1002\",\n  \"X1022\", \"X1030\", \"X1157\", \"x1156\", \"2508\", \"2501\", \"2523\", \"2525\", \"2527\",\n  \"2535\", \"2550\", \"2591\", \"2599\", \"X1014\",\n\n  \"2519\", \"2578\", \"2579\", \"2583\", \"X1091\", \"X1111\", \"X2001\",\n  \"X5501\", \"X8003\", \"X8007\", \"X8008\", \"X8009\", \"X1011\", \"X4047\", \"X1120\", \"x1119\", \"X1008\", \"X4035\",\n\n  \"X4051\", \"X4046\", \"2534\", \"2536\", \"2560\", \"VIN7\", \"X1046\", \"X1075\", \"X1092\", \"X1127\", \"X1137\", \"X4002\",\n  \"X4025\", \"X4028\", \"X4031\", \"X4033\", \"X4040\", \"X4042\", \"X4043\", \"X4060\",\n  \"X4061\", \"X4065\", \"X4077\", \"X4\", \"X5002\", \"X5500\", \"X5506\",\n\n  \"X1005\", \"X1004\", \"2577\", \"X1076\", \"2554\", \"X1131\", \"2521\",\n  \"2516\", \"X1045\", \"2548\", \"2520\",\"2551\", \"2552\",  \"2572\", \"X1148\",\n  \"2553\", \"X1007\", \"X1031\", \"X1118\", \"X2003\", \"X2005\",\n\n  \"X5000\", \"X5003\", \"X5004\", \"X5009\", \"X5011\", \"X5013\", \"X6000\", \"X6004\",\n\n  \"2514\", \"2515\", \"2517\", \"2526\", \"2529\", \"2531\", \"2537\", \"2540\", \"2584\", \n  \"X1065\", \"2590\", \"X1071\", \"X1072\", \"X1155\", \"X2014\", \"X27\", \"X35\", \"X5503\", \"X4000\", \"X4009\",\n  \"X4037\", \"X5510\", \"X6003\",\n\n  \"17R20\", \"21R40\", \"21R38\", \"9R40\", \"3R11\", \"41R10\", \"SortdalEbbe1\", \"Hornindal2\", \"8R19\", \"Hornindal1\", \"41R15\",\n  \"1R16\", \"44R7\", \"6R15\", \"7R7\", \"Granvin1\", \"Laerdal2\", \"Voss1\", \"2R23\", \"44R32\", \"19R18\", \"14R30\", \"14R6\",\n  \"27R17\", \"28R31\", \"28R1\", \"28R21\", \"28R33\", \"28R8\",\n  \"45R38\", \"42R31\", \"42R20\", \"45R11\", \"16R23\", \"16R37\", \"46R12\", \"46R37\",\n  \"39R20\", \"40R1\", \"40R20\", \"40R14\",\n  \"38R16\",\n  \"k7R25\", \"Muri\"\n)\n\n# kveiks print sequence\nsort_kveik = c(\n  \"17R20\", \"21R40\", \"21R38\", \"9R40\", \"3R11\", \"41R10\", \"SortdalEbbe1\", \"Hornindal2\", \"8R19\", \"Hornindal1\", \"41R15\",\n  \"1R16\", \"44R7\", \"6R15\", \"7R7\", \"Granvin1\", \"Laerdal2\", \"Voss1\", \"2R23\", \"44R32\", \"19R18\", \"14R30\", \"14R6\",\n  \"27R17\", \"28R31\", \"28R1\", \"28R21\", \"28R33\", \"28R8\",\n  \"45R38\", \"42R31\", \"42R20\", \"45R11\", \"16R23\", \"16R37\", \"46R12\", \"46R37\",\n  \"39R20\", \"40R1\", \"40R20\", \"40R14\",\n  \"38R16\",\n  \"k7R25\", \"Muri\"\n)\n\n#### Gallone + kveiks\n\n# import meanQ\nffiles = list.files(\n  path = \"./data/p01-05/all_GalloneKveiks/\",\n  all.files = FALSE,\n  full.names = TRUE\n)\nflist_all = pophelper::readQ(files = naturalsort::naturalsort(ffiles))\n\n# add yeast names\nyeast_names_all = read.delim(\n  \"./data/p01-05/all_GalloneKveiks.lst\",\n  header = FALSE,\n  stringsAsFactors = FALSE\n)\nyeast_names_all$V1 = stringr::str_remove_all(yeast_names_all$V1, \"_all_sorted_picard_dedup_realigned_recalibrated_all\")\nyeast_names_all$V1 = stringr::str_remove_all(yeast_names_all$V1, \"_all_sorted_picard_dedup_all\")\nyeast_names_all$V1 = stringr::str_remove_all(yeast_names_all$V1, \"Sample_\")\nfor(k in 1:nrow(to_swap)){\n  yeast_names_all$V1 = stringr::str_replace(\n    yeast_names_all$V1,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\nfor(k in 1:length(flist_all)){\n  \n  attributes(flist_all[[k]])$row.names = yeast_names_all$V1\n  flist_all[[k]] = flist_all[[k]][match(sort_all, rownames(flist_all[[k]])), ]\n  \n}\n\nsort_all_print = sort_all\nfor(i in 1:length(sort_all_print)){\n  sort_all_print[i] = ifelse(\n    length(tree_annot[which(tree_annot$Name == stringr::str_replace_all(sort_all_print[i], \"X\", \"x\")), \"Strain\"]) &gt; 0,\n    tree_annot[which(tree_annot$Name == stringr::str_replace_all(sort_all_print[i], \"X\", \"x\")), \"Strain\"],\n    sort_all_print[i]\n  )\n}\n\nfor(k in 2:length(flist_all)){\n  rownames(flist_all[[k]]) = sort_all_print\n}\n\n# get populations annotations\nonelabset_all = tree_annot[which(tree_annot$Name %in% stringr::str_replace_all(yeast_names_all$V1, \"X\", \"x\")), ]\nonelabset_all = onelabset_all[match(stringr::str_replace_all(sort_all, \"X\", \"x\"), onelabset_all$Name), ]\n\n### kveiks only\nffiles = list.files(\n  path = \"./data/p01-05/onlyKveiks/\",\n  all.files = FALSE,\n  full.names = TRUE\n)\nflist_kveik = pophelper::readQ(files = naturalsort::naturalsort(ffiles))\n\n# add yeast names\nyeast_names_kveik = read.delim(\n  \"./data/p01-05/onlyKveiks.lst\",\n  header = FALSE,\n  stringsAsFactors = FALSE\n)\nfor(k in 1:nrow(to_swap)){\n  yeast_names_kveik$V1 = stringr::str_replace(\n    yeast_names_kveik$V1,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\nfor(k in 1:length(flist_kveik)){\n  \n  attributes(flist_kveik[[k]])$row.names = yeast_names_kveik$V1\n  flist_kveik[[k]] = flist_kveik[[k]][match(sort_kveik, rownames(flist_kveik[[k]])), ]\n  \n}\n\n# get populations annotations\nonelabset_kveiks = tree_annot[which(tree_annot$Name %in% yeast_names_kveik$V1), ]\nonelabset_kveiks = onelabset_kveiks[match(sort_kveik, onelabset_kveiks$Name), ]\n\n\n\n#------------------------------------------------------------------------------#\n## 1.2 - Distruct plot Kveiks                                               ####\n\n# plot\nmycolors = c(\"#FFDA00\", \"#FBA01D\", \"#A6611A\", \"#0571B0\", \"#92C5DE\", \"#018571\")\n\nshiny_col = c(\n  \"#1D72F5\",\"#DF0101\",\"#77CE61\", \"#FF9326\",\"#A945FF\",\"#0089B2\",\"#FDF060\",\n  \"#FFA6B2\",\"#BFF217\",\"#60D5FD\",\"#CC1577\",\"#F2B950\",\"#7FB21D\",\"#EC496F\",\n  \"#326397\",\"#B26314\",\"#027368\",\"#A4A4A4\",\"#610B5E\"\n)\n\n\nonelabset_kveiks = onelabset_kveiks[, c(\"Origin\"), drop = FALSE]\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"North-West Norway\", \"1. N-W Norway\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"South-West Norway\", \"2. S-W Norway\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Central-Eastern Norway\", \"3. C-E Norway\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Latvia\", \"4. Latvia\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Lithuania\", \"5. Lithuania\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Russia\", \"6. Russia\")\nonelabset_kveiks[38:44, 1] = \"7. Allochthonous\"\ncolnames(onelabset_kveiks) = c(\"Geo.\")\n\n# sorted\np_kveiks = pophelper::plotQ(\n  pophelper::alignK(flist_kveik[c(4, 5, 6)]), \n  imgoutput = \"join\",\n  returnplot = TRUE, exportplot = FALSE,\n  showtitle = TRUE,\n  showsubtitle = TRUE,\n  titlesize = 24,\n  titlecol = \"black\",\n  subtitlesize = 16, subtitlevjust = -0.5, subtitlespacer = 16,\n  titlelab = \"\",\n  subtitlelab = \"N strains = 44\",\n  height = 15, width = 80, panelspacer = 0.35,\n  barbordercolour = \"white\", barbordersize = 0, basesize = 11,\n  divcol = \"black\", divtype = 1, divsize = 0.25,\n  grplab = onelabset_kveiks,\n  ordergrp = FALSE,\n  #subsetgrp = c(\"Central-E Norway\", \"S-W Norway\", \"N-W Norway\", \"Lithuania\", \"Latvia\", \"Russia\", \"NA farmhouse\"),\n  selgrp = \"Geo.\",\n  grplabsize = 4, linesize = 0.8, pointsize = 4, grplabpos = 0.35,\n  grplabangle = 0, grplabjust = 0.6, grplabheight = 4000,\n  sortind = NA,\n  sharedindlab = TRUE,\n  showindlab = TRUE,\n  useindlab = TRUE,\n  #indlabcol = c(\"black\", \"red\", \"yellow\"),\n  showlegend = FALSE, grpmean = FALSE,\n  splab = paste0(\"K=\", sapply(flist_kveik[c(4, 5, 6)], ncol)), splabsize = 16,\n  showyaxis = TRUE, showticks = TRUE, ticksize = 0.25,\n  clustercol = c(\"#FFDA00\", \"#FBA01D\", \"#0571B0\", \"#018571\", \"#92C5DE\", \"grey\"))\n  #clustercol = shiny_col)\ngrid.arrange(p_kveiks$plot[[1]])\n\n\n\n\nFigure 7: Distruct plot farmhouse yeasts.\n\n\n\n\n\nonelabset_all = onelabset_all[!is.na(onelabset_all$Clade), ]\nonelabset_all = onelabset_all[, \"Clade\", drop = FALSE]\nrownames(onelabset_all) = NULL\nonelabset_all[1:57, ] = \"Beer1\"\nonelabset_all[58:75, ] = \"Mixed\"\nonelabset_all[76:102, ] = \"Wine\"\nonelabset_all[103:123, ] = \"Beer2\"\nonelabset_all[124:131, ] = \"Asia\"\nonelabset_all[132:154, ] = \"Other\"\nonelabset_all[155:192, ] = \"Farmhouse\"\nonelabset_all[193:198, ] = \"Allochthonous\"\n\n# sorted\np_all = pophelper::plotQ(\n  pophelper::alignK(flist_all[c(13, 14, 15)]), \n  imgoutput = \"join\",\n  returnplot = TRUE, exportplot = FALSE,\n  showtitle = TRUE,\n  showsubtitle = TRUE,\n  titlesize = 24,\n  titlecol = \"black\",\n  subtitlesize = 16, subtitlevjust = -0.5, subtitlespacer = 16,\n  titlelab = \"\",\n  subtitlelab = \"N strains = 199\",\n  height = 15, width = 80, panelspacer = 0.35,\n  barbordercolour = \"white\", barbordersize = 0, basesize = 11,\n  divcol = \"black\", divtype = 1, divsize = 0.25,\n  grplab = onelabset_all,\n  ordergrp = FALSE,\n  #subsetgrp = c(\"Central-E Norway\", \"S-W Norway\", \"N-W Norway\", \"Lithuania\", \"Latvia\", \"Russia\", \"NA farmhouse\"),\n  selgrp = \"Clade\",\n  grplabsize = 4, linesize = 0.8, pointsize = 4, grplabpos = 0.35,\n  grplabangle = 0, grplabjust = 0.6, grplabheight = 4000,\n  sortind = NA, indlabsize = 7,\n  sharedindlab = TRUE, showindlab = TRUE,\n  useindlab = TRUE,\n  showlegend = FALSE, grpmean = FALSE,\n  splab = paste0(\"K=\", sapply(flist_all[c(13, 14, 15)], ncol)), splabsize = 16,\n  showyaxis = TRUE, showticks = TRUE, ticksize = 0.25,\n  clustercol = shiny_col)\ngrid.arrange(p_all$plot[[1]])\n\n\n\n\nFigure 8: Distruct plot all yeasts.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Phylogeny and Population Structure</span>"
    ]
  },
  {
    "objectID": "p01-05-phylogeny-and-population-structure.html#sec-lesson-learnt-feature-selection",
    "href": "p01-05-phylogeny-and-population-structure.html#sec-lesson-learnt-feature-selection",
    "title": "5  Phylogeny and Population Structure",
    "section": "5.4 Lessons Learnt",
    "text": "5.4 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Phylogeny and Population Structure</span>"
    ]
  },
  {
    "objectID": "p01-05-phylogeny-and-population-structure.html#session-information",
    "href": "p01-05-phylogeny-and-population-structure.html#session-information",
    "title": "5  Phylogeny and Population Structure",
    "section": "5.5 Session Information",
    "text": "5.5 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] treeio_1.26.0      stringr_1.5.1      reshape_0.8.10     RColorBrewer_1.1-3\n [5] pophelper_2.3.1    naturalsort_0.1.3  gridExtra_2.3      ggtreeExtra_1.12.0\n [9] ggtree_3.10.1      ggplot2_3.5.2      ggnewscale_0.5.2   aplot_0.2.8       \n[13] ape_5.8-1         \n\nloaded via a namespace (and not attached):\n [1] yulab.utils_0.2.0   generics_0.1.4      tidyr_1.3.1        \n [4] ggplotify_0.1.2     lpSolve_5.6.23      stringi_1.8.7      \n [7] lattice_0.22-5      digest_0.6.37       magrittr_2.0.3     \n[10] evaluate_1.0.4      fastmap_1.2.0       plyr_1.8.9         \n[13] jsonlite_2.0.0      ggrepel_0.9.6       combinat_0.0-8     \n[16] purrr_1.1.0         scales_1.4.0        label.switching_1.8\n[19] lazyeval_0.2.2      cli_3.6.5           rlang_1.1.6        \n[22] tidytree_0.4.6      withr_3.0.2         yaml_2.3.10        \n[25] tools_4.3.3         parallel_4.3.3      dplyr_1.1.4        \n[28] vctrs_0.6.5         R6_2.6.1            gridGraphics_0.5-1 \n[31] lifecycle_1.0.4     fs_1.6.6            htmlwidgets_1.6.4  \n[34] ggfun_0.2.0         pkgconfig_2.0.3     pillar_1.11.0      \n[37] gtable_0.3.6        glue_1.8.0          Rcpp_1.1.0         \n[40] xfun_0.52           tibble_3.3.0        tidyselect_1.2.1   \n[43] knitr_1.50          dichromat_2.0-0.1   farver_2.1.2       \n[46] htmltools_0.5.8.1   nlme_3.1-164        patchwork_1.3.1    \n[49] labeling_0.4.3      rmarkdown_2.29      compiler_4.3.3",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Phylogeny and Population Structure</span>"
    ]
  },
  {
    "objectID": "p01-06-phenotyping.html",
    "href": "p01-06-phenotyping.html",
    "title": "6  High-throughput phenotyping",
    "section": "",
    "text": "6.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 6.5.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>High-throughput phenotyping</span>"
    ]
  },
  {
    "objectID": "p01-06-phenotyping.html#on-this-page",
    "href": "p01-06-phenotyping.html#on-this-page",
    "title": "6  High-throughput phenotyping",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>High-throughput phenotyping</span>"
    ]
  },
  {
    "objectID": "p01-06-phenotyping.html#high-throughput-phenotyping-of-farmhouse-and-industrial-yeasts",
    "href": "p01-06-phenotyping.html#high-throughput-phenotyping-of-farmhouse-and-industrial-yeasts",
    "title": "6  High-throughput phenotyping",
    "section": "6.2 High-throughput phenotyping of farmhouse and industrial yeasts",
    "text": "6.2 High-throughput phenotyping of farmhouse and industrial yeasts\nLet’s import the phenotypic data and reformat them.\n\n# import and prep data\nraw_data = read.delim(\"./data/p01-06/grouped phenotype data with annotations.csv\", sep = \",\", header = TRUE)\n\nraw_data = raw_data %&gt;%\n  dplyr::filter(group != \"WL004\") %&gt;%\n  dplyr::filter(group != \"LA001\")\nraw_data$Industry = ifelse(\n  raw_data$region %in% c(\"South-West Norway\", \"Lithuania\", \"North-West Norway\", \"Russia\",\n                         \"Central-Eastern Norway\", \"Latvia\", \"South-Eastern Norway\"),\n  \"Farmhouse\",\n  raw_data$region\n)\nraw_data$Industry = ifelse(\n  raw_data$Outside == \"yes\",\n  \"Allochthonous\\nyeast\",\n  raw_data$Industry\n)\nraw_data$region = ifelse(\n  raw_data$Industry == \"Farmhouse\",\n  raw_data$region,\n  \"NA\"\n)\n\nraw_data$region = ifelse(\n  raw_data$culture %in% c(\"7\", \"38\"),\n  \"South-West Norway\",\n  ifelse(\n    raw_data$culture == \"40\",\n    \"Russia\",\n    ifelse(\n      raw_data$culture == \"45\",\n      \"Latvia\",\n      ifelse(\n        raw_data$culture == \"57\",\n        \"Central-Eastern Norway\",\n        raw_data$region\n      )\n    )\n  )\n)\n\n\nraw_data = raw_data %&gt;%\n  dplyr::mutate(region = dplyr::case_when(\n    region == \"South-West Norway\" ~ \"SW Norway\",\n    region == \"North-West Norway\" ~ \"NW Norway\",\n    region == \"Central-Eastern Norway\" ~ \"CE Norway\",\n    region == \"South-Eastern Norway\" ~ \"SE Norway\",\n    .default = as.character(region)\n  ))\n\nmetadata = raw_data %&gt;%\n  dplyr::select(c(\"group\", \"culture\", \"region\", \"Industry\", \"Outside\", \"method\"))\nrownames(metadata) = metadata$group\n\nrownames(raw_data) = raw_data$group\ncounts = raw_data %&gt;%\n  dplyr::select(-c(\"group\", \"culture\", \"region\", \"Industry\", \"Outside\", \"method\"))\n\n# import final clade list\nfinal_clades = read.table(\n  \"./data/p01-06/final_clades_for_pub.txt\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n# replace\nfor(i in 1:nrow(final_clades)){\n\n  strain = final_clades[i, \"Strain\"]\n  clade = final_clades[i, \"Clade\"]\n  metadata[which(metadata$group == strain), \"Industry\"] = clade\n\n}\nmetadata$Industry = ifelse(metadata$Industry == \"Beer\", \"Beer2\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI001\", \"Asia\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BR003\", \"Mixed\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI002\", \"Other\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI004\", \"Asia\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI005\", \"Other\", metadata$Industry)\n\n\n## background: no farmhouse\nmetadata_no_farm = metadata[which(metadata$Industry != \"Farmhouse\"), ]\nmetadata_no_farm = metadata_no_farm[which(metadata_no_farm$Industry != \"Allochthonous\\nyeast\"), ]\ncounts_no_farm = counts[which(rownames(counts) %in% metadata_no_farm$group), ]\n\n## farmhouse focus\nmetadata_farm_only = metadata[which(metadata$Industry %in% c(\"Farmhouse\", \"Allochthonous\\nyeast\")), ]\ncolnames(metadata_farm_only)[5] = \"Allochthonous\"\nmetadata_farm_only$Allochthonous = ifelse(metadata_farm_only$Allochthonous == \"yes\", \"yes\", \"no\")\ncounts_farm_only = counts[which(rownames(counts) %in% metadata_farm_only$group), ]\n\n\n6.2.1 Principal Component Analysis\n\n6.2.1.1 Background: no farmhouse yeasts\n\n# create PCA object\npca_obj = PCAtools::pca(t(counts_no_farm),\n                        metadata_no_farm,\n                        removeVar = 0.1)\n\n\n### IDENTIFY NUMBER OF SIGNIFICANT PRINCIPAL COMPONENTS\n# Elbow method\nelbow_method = PCAtools::findElbowPoint(pca_obj$variance)\n\n# minimum number of components that explains 80% of variance\nnPCopt = which(cumsum(pca_obj$variance) &gt; 80)[1]\n\n# max number of component + 1\nif(elbow_method &gt;= nPCopt){\n  nPCmax = elbow_method + 1\n} else{\n  nPCmax= nPCopt\n}\n\nsaassa\n\n# screeplot\np1 = PCAtools::screeplot(pca_obj,\n                        components = pca_obj$components[1:nPCmax],\n                        vline = c(elbow_method, nPCopt),\n                        colBar = rev(colorRampPalette(brewer.pal(7, \"Blues\"))(nPCmax)),\n                        axisLabSize = 18,\n                        titleLabSize = 22) +\n  geom_label(aes(x = elbow_method, y = 50, label = \"Elbow method\", vjust = -1, size = 8)) +\n  geom_label(aes(x = nPCopt, y = 50, label = \"80% variance\", vjust = -1, size = 8), colour = \"steelblue\") +\n  theme(plot.title = element_blank())\n\np1\n\n\n\n\nFigure 1: Screeplot of PC variants without farmhouse yeasts.\n\n\n\n\nasasas\n\n### BIPLOT\np1 = PCAtools::biplot(pca_obj,\n                      labSize = 0,\n                      pointSize = 5,\n                      drawConnectors = FALSE,\n                      max.overlaps = 700,\n                      colby = \"Industry\",\n                      colkey = c('#e6194b', '#ffe119', '#46f0f0', '#911eb4', \"grey75\", '#bcf60c'),\n                      legendPosition = \"right\") +\n  theme(plot.title = element_blank(),\n        plot.subtitle = element_blank(),\n        legend.background = element_rect(colour = \"grey25\", size = 0.5))\np1\n\n\n\n\nFigure 2: Biplot of industrial yests phenotypes.\n\n\n\n\nsaasas\n\n## PAIRSPLOT\nmax_pairplot_comp = ifelse(nPCmax - 1 &lt;= 10, nPCmax - 1, 10)\np1 = PCAtools::pairsplot(pca_obj,\n                          components = pca_obj$components[1:(max_pairplot_comp)],\n                          colby = \"Industry\",\n                          colkey = c('#e6194b', '#ffe119', '#46f0f0', '#911eb4', \"grey75\", '#bcf60c'),\n                          pointSize = 2,\n                          trianglelabSize = 12,\n                          plotaxes = FALSE,\n                          margingaps = unit(c(0.05, 0.05, 0.05, 0.05), \"cm\"),\n                          title = paste0(\"Top \", nPCmax - 1, \" Principal Components\")) +\n  theme(plot.title = element_blank())\np1\n\n\n\n\nFigure 3: Biplot of industrial yests phenotypes.\n\n\n\n\n\n### PRINCIPAL COMPONENTS LOADINGS\n# plot loadings\np1 = PCAtools::plotloadings(pca_obj,\n                            components = getComponents(pca_obj, seq_len(nPCmax - 1)),\n                            rangeRetain = 0.01,\n                            labSize = 3,\n                            title = \"Loadings plot: correlation between phenotypes\",\n                            subtitle = paste0(\"and the \", nPCmax - 1, \" Significant Principal Components \"),\n                            caption = \"Top 1% variables\",\n                            shape = 21,\n                            col = c('steelblue', 'white', 'red3'),\n                            drawConnectors = TRUE) +\n  theme(plot.title = element_blank(),\n        plot.subtitle = element_blank())\np1\n\n\n\n\nFigure 4: Industrial yests phenotypes loadings.\n\n\n\n\n\n\n6.2.1.2 Farmhouse and industrial yeasts\n\n# create PCA object\npca_obj = PCAtools::pca(t(counts),\n                        metadata,\n                        removeVar = 0.1)\n\n\n### IDENTIFY NUMBER OF SIGNIFICANT PRINCIPAL COMPONENTS\n\n# Elbow method\nelbow_method = PCAtools::findElbowPoint(pca_obj$variance)\n\n# minimum number of components that explains 80% of variance\nnPCopt = which(cumsum(pca_obj$variance) &gt; 80)[1]\n\n# max number of component + 1\nif(elbow_method &gt;= nPCopt){\n  nPCmax = elbow_method + 1\n} else{\n  nPCmax= nPCopt\n}\n\nsssss\n\n# screeplot\np_all_scree = PCAtools::screeplot(pca_obj,\n                        components = pca_obj$components[1:nPCmax],\n                        vline = c(elbow_method, nPCopt),\n                        title = \"Screeplot - number of significant Principal Components\",\n                        ylab = \"Explained\\nVariation (%)\",\n                        colBar = rev(colorRampPalette(brewer.pal(7, \"Blues\"))(nPCmax)),\n                        axisLabSize = 18,\n                        titleLabSize = 22) +\n  geom_label(aes(x = elbow_method, y = 50, label = \"Elbow method\", vjust = -1, size = 8)) +\n  geom_label(aes(x = nPCopt, y = 50, label = \"80% variance\", vjust = -1, size = 8), colour = \"steelblue\") +\n  theme(plot.title = element_blank(),\n        axis.title.x = element_blank())\np_all_scree\n\n\n\n\nFigure 5: Screeplot of PC variants of industrial and farmhouse yeasts.\n\n\n\n\nasasas\n\n### BIPLOT\np_all_bi = PCAtools::biplot(pca_obj,\n                            labSize = 0,\n                            pointSize = 1.5,\n                            drawConnectors = FALSE,\n                            max.overlaps = 700,\n                            shape =\"Outside\",\n                            shapekey = c(20, 21),\n                            colby = \"Industry\",\n                            colkey = c(\"red\", '#e6194b', '#ffe119', '#3cb44b', '#4363d8',  '#e6beff', '#911eb4', '#46f0f0', '#bcf60c'),\n                            title = \"PCA - Industry\",\n                            legendPosition = \"right\") +\n  theme(plot.title = element_blank(),\n        legend.background = element_rect(colour = \"grey25\", size = 0.5))\np_all_bi\n\n\n\n\nFigure 6: Biplot of framhouse and industrial yests phenotypes.\n\n\n\n# p1 = PCAtools::biplot(pca_obj,\n#                       labSize = 2,\n#                       pointSize = 5,\n#                       drawConnectors = TRUE,\n#                       max.overlaps = 700,\n#                       colby = \"Industry\",\n#                       #colkey = c(\"grey75\", colorRampPalette(brewer.pal(n = 4, name = \"Reds\"))(8)),\n#                       title = \"PCA - Industry\",\n#                       legendPosition = \"bottom\") +\n#   theme(plot.title = element_text(size = 22, hjust = 0.5),\n#         plot.subtitle = element_text(size = 18, hjust = 0.5),\n#         legend.background = element_rect(colour = \"grey25\", size = 0.5))\n# plot(p1)\n\n## PAIRSPLOT\np_all_pair = PCAtools::pairsplot(pca_obj,\n                                 components = pca_obj$components[1:4],\n                                 shape =\"Outside\",\n                                 shapekey = c(20, 21),\n                                 colby = \"Industry\",\n                                 colkey = c('#e6194b', '#ffe119', '#3cb44b', '#4363d8', \"red\", '#e6beff', '#911eb4', '#46f0f0', '#bcf60c'),\n                                 pointSize = 1,\n                                 trianglelabSize = 12,\n                                 plotaxes = FALSE,\n                                 margingaps = unit(c(0.05, 0.05, 0.05, 0.05), \"cm\")) +\n  theme(plot.title = element_blank())\nprint(p_all_pair)\n\n\n\n\nFigure 6: Biplot of framhouse and industrial yests phenotypes.\n\n\n\n### PRINCIPAL COMPONENTS LOADINGS\n# plot loadings\np_all_loads = PCAtools::plotloadings(pca_obj,\n                                     components = getComponents(pca_obj, seq_len(4)),\n                                     rangeRetain = 0.01,\n                                     labSize = 3,\n                                     caption = \"Top 1% variables\",\n                                     shape = 21,\n                                     col = c('steelblue', 'white', 'red3'),\n                                     drawConnectors = TRUE) +\n  theme(plot.title = element_blank(),\n        plot.subtitle = element_blank(),\n        legend.position = \"none\",\n        axis.title.x = element_blank())\nprint(p_all_loads)\n\n\n\n\nFigure 6: Biplot of framhouse and industrial yests phenotypes.\n\n\n\n\n\n\n6.2.1.3 Farmhouse yeasts only\n\n# create PCA object\npca_obj = PCAtools::pca(t(counts_farm_only),\n                        metadata_farm_only,\n                        removeVar = 0.1)\n\n-- removing the lower 10% of variables based on variance\n\n### IDENTIFY NUMBER OF SIGNIFICANT PRINCIPAL COMPONENTS\n# Horn method\nhorn_method = tryCatch(\n  PCAtools::parallelPCA(counts),\n  error = function(e) { list(n = 1) }\n)\n\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\nWarning in check_numbers(x, k = k, nu = nu, nv = nv): more singular\nvalues/vectors requested than available\n\n# Elbow method\nelbow_method = PCAtools::findElbowPoint(pca_obj$variance)\n\n# minimum number of components that explains 80% of variance\nnPCopt = which(cumsum(pca_obj$variance) &gt; 80)[1]\n\n# max number of component + 1\nif(horn_method$n &gt;= elbow_method & horn_method$n &gt;= nPCopt){\n  nPCmax = horn_method$n + 1\n} else if(elbow_method &gt;= horn_method$n & elbow_method &gt;= nPCopt){\n  nPCmax = elbow_method + 1\n} else{\n  nPCmax= nPCopt\n}\n\n\n### SCREEPLOT\n# screeplot\np1 = PCAtools::screeplot(pca_obj,\n                        components = pca_obj$components[1:nPCmax],\n                        vline = c(horn_method$n, elbow_method, nPCopt),\n                        title = \"Screeplot - number of significant Principal Components\",\n                        colBar = rev(colorRampPalette(brewer.pal(7, \"Blues\"))(nPCmax)),\n                        axisLabSize = 18,\n                        titleLabSize = 22) +\n  geom_label(aes(x = horn_method$n, y = 50, label = \"Horn\\'s\", vjust = -1, size = 8)) +\n  geom_label(aes(x = elbow_method, y = 50, label = \"Elbow method\", vjust = -1, size = 8)) +\n  geom_label(aes(x = nPCopt, y = 50, label = \"80% variance\", vjust = -1, size = 8), colour = \"steelblue\") +\n  theme(plot.title = element_text(size = 18, hjust = 0.5))\nprint(p1)\n\nWarning in geom_label(aes(x = horn_method$n, y = 50, label = \"Horn's\", vjust = -1, : All aesthetics have length 1, but the data has 4 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in geom_label(aes(x = elbow_method, y = 50, label = \"Elbow method\", : All aesthetics have length 1, but the data has 4 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in geom_label(aes(x = nPCopt, y = 50, label = \"80% variance\", vjust = -1, : All aesthetics have length 1, but the data has 4 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\n\n\n\n\n\n\n### BIPLOT\np1 = PCAtools::biplot(pca_obj,\n                      labSize = 0,\n                      pointSize = 2,\n                      drawConnectors = FALSE,\n                      max.overlaps = 700,\n                      colby = \"culture\",\n                      #colkey = c(\"grey75\", colorRampPalette(brewer.pal(n = 4, name = \"Reds\"))(8)),\n                      title = \"PCA - culture\",\n                      legendPosition = \"bottom\") +\n  theme(plot.title = element_text(size = 22, hjust = 0.5),\n        plot.subtitle = element_text(size = 18, hjust = 0.5),\n        legend.background = element_rect(colour = \"grey25\", size = 0.5))\nplot(p1)\n\n\n\n\n\n\n\np_farm = PCAtools::biplot(pca_obj,\n                          labSize = 0,\n                          pointSize = 2,\n                          drawConnectors = FALSE,\n                          max.overlaps = 700,\n                          shape =\"Allochthonous\",\n                          shapekey = c(20, 21),\n                          colby = \"region\",\n                          colkey = c('#0571B0', '#FBA01D',\"#FFDA00\", \"steelblue\", '#A6611A',\"#008470\",'#92C5DE'),\n                          title = \"PCA - region\",\n                          legendPosition = \"none\") +\n  theme(plot.title = element_blank(),\n        plot.subtitle = element_blank(),\n        legend.background = element_rect(colour = \"grey25\", size = 0.5))\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\nplot(p_farm)\n\n\n\n\n\n\n\np_farm_pair = PCAtools::pairsplot(pca_obj,\n                                  components = pca_obj$components[1:4],\n                                  colby = \"region\",\n                                  shape =\"Allochthonous\",\n                                  shapekey = c(20, 21),\n                                  colkey = c('#0571B0', '#FBA01D',\"#FFDA00\", \"steelblue\", '#A6611A',\"#008470\",'#92C5DE'),\n                                  pointSize = 1,\n                                  trianglelabSize = 12,\n                                  plotaxes = FALSE,\n                                  margingaps = unit(c(0.05, 0.05, 0.05, 0.05), \"cm\")) +\n  theme(plot.title = element_blank())\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\nprint(p_farm_pair)\n\n\n\n\n\n\n\np1 = PCAtools::biplot(pca_obj,\n                      labSize = 0,\n                      pointSize = 2,\n                      drawConnectors = FALSE,\n                      max.overlaps = 700,\n                      colby = \"method\",\n                      colkey = c(\"grey75\", \"firebrick\", \"steelblue\"),\n                      title = \"PCA - preservation\",\n                      legendPosition = \"bottom\") +\n  theme(plot.title = element_text(size = 22, hjust = 0.5),\n        plot.subtitle = element_text(size = 18, hjust = 0.5),\n        legend.background = element_rect(colour = \"grey25\", size = 0.5))\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\nplot(p1)\n\n\n\n\n\n\n\np1 = PCAtools::pairsplot(pca_obj,\n                          components = pca_obj$components[1:10],\n                          colby = \"method\",\n                          colkey = c(\"grey75\", \"firebrick\", \"steelblue\"),\n                          pointSize = 1,\n                          trianglelabSize = 12,\n                          plotaxes = FALSE,\n                          margingaps = unit(c(0.05, 0.05, 0.05, 0.05), \"cm\")) +\n  theme(plot.title = element_blank())\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\nprint(p1)\n\n\n\n\n\n\n\n### PRINCIPAL COMPONENTS LOADINGS\n# plot loadings\np1 = PCAtools::plotloadings(pca_obj,\n                            components = getComponents(pca_obj, seq_len(nPCmax - 1)),\n                            rangeRetain = 0.01,\n                            labSize = 3,\n                            title = \"Loadings plot: correlation between phenotypes\",\n                            subtitle = paste0(\"and the \", nPCmax - 1, \" Significant Principal Components \"),\n                            caption = \"Top 1% variables\",\n                            shape = 21,\n                            col = c('steelblue', 'white', 'red3'),\n                            drawConnectors = TRUE) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5),\n        plot.subtitle = element_text(size = 18, hjust = 0.5))\n\n-- variables retained:\nBiggy, CuSO4_0.1, T39C\n\nprint(p1)\n\n\n\n\n\n\n\n\n\n\n\n6.2.2 Discriminant analysis\nsPLS-DA",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>High-throughput phenotyping</span>"
    ]
  },
  {
    "objectID": "p01-06-phenotyping.html#farmhouse",
    "href": "p01-06-phenotyping.html#farmhouse",
    "title": "6  High-throughput phenotyping",
    "section": "6.3 FArmhouse",
    "text": "6.3 FArmhouse\n\n6.3.1 PCA\n\n\n6.3.2 Distributions",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>High-throughput phenotyping</span>"
    ]
  },
  {
    "objectID": "p01-06-phenotyping.html#fermentations",
    "href": "p01-06-phenotyping.html#fermentations",
    "title": "6  High-throughput phenotyping",
    "section": "6.4 Fermentations",
    "text": "6.4 Fermentations",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>High-throughput phenotyping</span>"
    ]
  },
  {
    "objectID": "p01-06-phenotyping.html#sec-lesson-learnt-feature-selection",
    "href": "p01-06-phenotyping.html#sec-lesson-learnt-feature-selection",
    "title": "6  High-throughput phenotyping",
    "section": "6.5 Lessons Learnt",
    "text": "6.5 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>High-throughput phenotyping</span>"
    ]
  },
  {
    "objectID": "p01-06-phenotyping.html#session-information",
    "href": "p01-06-phenotyping.html#session-information",
    "title": "6  High-throughput phenotyping",
    "section": "6.6 Session Information",
    "text": "6.6 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] treeio_1.26.0      stringr_1.5.1      reshape2_1.4.4     reshape_0.8.10    \n [5] RColorBrewer_1.1-3 plyr_1.8.9         phytools_2.4-4     maps_3.4.3        \n [9] PCAtools_2.14.0    ggrepel_0.9.6      naturalsort_0.1.3  mixOmics_6.26.0   \n[13] lattice_0.22-5     MASS_7.3-60.0.1    gtable_0.3.6       gridExtra_2.3     \n[17] ggtreeExtra_1.12.0 ggtree_3.10.1      ggpubr_0.6.1       ggplot2_3.5.2     \n[21] ggnewscale_0.5.2   dplyr_1.1.4        aplot_0.2.8        ape_5.8-1         \n\nloaded via a namespace (and not attached):\n [1] mnormt_2.1.1              phangorn_2.12.1          \n [3] rlang_1.1.6               magrittr_2.0.3           \n [5] matrixStats_1.5.0         compiler_4.3.3           \n [7] DelayedMatrixStats_1.24.0 vctrs_0.6.5              \n [9] combinat_0.0-8            quadprog_1.5-8           \n[11] pkgconfig_2.0.3           crayon_1.5.3             \n[13] fastmap_1.2.0             backports_1.5.0          \n[15] XVector_0.42.0            labeling_0.4.3           \n[17] rmarkdown_2.29            purrr_1.1.0              \n[19] xfun_0.52                 zlibbioc_1.48.2          \n[21] beachmat_2.18.1           clusterGeneration_1.3.8  \n[23] jsonlite_2.0.0            DelayedArray_0.28.0      \n[25] BiocParallel_1.36.0       broom_1.0.9              \n[27] irlba_2.3.5.1             parallel_4.3.3           \n[29] R6_2.6.1                  stringi_1.8.7            \n[31] car_3.1-3                 numDeriv_2016.8-1.1      \n[33] iterators_1.0.14          Rcpp_1.1.0               \n[35] knitr_1.50                optimParallel_1.0-2      \n[37] IRanges_2.36.0            Matrix_1.6-5             \n[39] igraph_2.1.4              tidyselect_1.2.1         \n[41] dichromat_2.0-0.1         abind_1.4-8              \n[43] yaml_2.3.10               doParallel_1.0.17        \n[45] codetools_0.2-19          tibble_3.3.0             \n[47] withr_3.0.2               rARPACK_0.11-0           \n[49] coda_0.19-4.1             evaluate_1.0.4           \n[51] gridGraphics_0.5-1        pillar_1.11.0            \n[53] MatrixGenerics_1.14.0     carData_3.0-5            \n[55] foreach_1.5.2             stats4_4.3.3             \n[57] ellipse_0.5.0             ggfun_0.2.0              \n[59] generics_0.1.4            S4Vectors_0.40.2         \n[61] sparseMatrixStats_1.14.0  scales_1.4.0             \n[63] tidytree_0.4.6            glue_1.8.0               \n[65] scatterplot3d_0.3-44      lazyeval_0.2.2           \n[67] tools_4.3.3               ScaledMatrix_1.10.0      \n[69] RSpectra_0.16-2           ggsignif_0.6.4           \n[71] fs_1.6.6                  fastmatch_1.1-6          \n[73] cowplot_1.2.0             tidyr_1.3.1              \n[75] nlme_3.1-164              patchwork_1.3.1          \n[77] BiocSingular_1.18.0       Formula_1.2-5            \n[79] cli_3.6.5                 rsvd_1.0.5               \n[81] DEoptim_2.2-8             expm_1.0-0               \n[83] S4Arrays_1.2.1            corpcor_1.6.10           \n[85] rstatix_0.7.2             yulab.utils_0.2.0        \n[87] digest_0.6.37             BiocGenerics_0.48.1      \n[89] SparseArray_1.2.4         ggplotify_0.1.2          \n[91] dqrng_0.4.1               htmlwidgets_1.6.4        \n[93] farver_2.1.2              htmltools_0.5.8.1        \n[95] lifecycle_1.0.4",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>High-throughput phenotyping</span>"
    ]
  },
  {
    "objectID": "p02-01-Figure1.html",
    "href": "p02-01-Figure1.html",
    "title": "7  Figure 1",
    "section": "",
    "text": "7.1 Figure 1 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Figure 1</span>"
    ]
  },
  {
    "objectID": "p02-01-Figure1.html#figure-1-code",
    "href": "p02-01-Figure1.html#figure-1-code",
    "title": "7  Figure 1",
    "section": "",
    "text": "7.1.1 Panel B code\n\nlibrary(Cairo)\n# make color palettes\n'NW' = colorRampPalette(c('#0571B0', 'white'))(37)\n'SW' = colorRampPalette(c('#92C5DE', 'white'))(37)\n'CE' = colorRampPalette(c('#018571', 'white'))(37)\n'SE' = colorRampPalette(c('#80CDC1', 'white'))(37)\n'LAT' = colorRampPalette(c('#FFDA00', 'white'))(37)\n'LIT' = colorRampPalette(c('#FBA01D', 'white'))(37)\n'RUS' = colorRampPalette(c('#A6611A', 'white'))(37)\n\n\n\n# Make a horizontal stacked barplot \nmydata &lt;- rev(read.csv('Diversity data for R.csv', header = TRUE, encoding = 'UTF-8'))\nmymatrix &lt;- as.matrix(mydata[1:37,])\ntempmatrix &lt;- mymatrix\ntempmatrix[,] &lt;- 0\n\ncairo_pdf('Strain Diversity updated 2.pdf', height = 10, width = 10)\n# note using cairo_pdf to print special characters correctly\n# plot empty chart\npar(xpd = TRUE, mar = c(4, 8, 4, 10) + 0.1)\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xlab = 'Percentage', main = 'Strain diversity of farmhouse ale cultures', yaxt =  'n', \n             col = RUS, xlim = c(0,100))\n# plot Russian\npar(new = TRUE)\ntempmatrix[,c(\"X39\",\"X40\")] &lt;- mymatrix[,c(\"X39\",\"X40\")]\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xaxt = 'n', yaxt =  'n', \n             col = RUS, xlim = c(0,100))\ntempmatrix[,] &lt;- 0\n\n# plot Lithuanian\npar(new = TRUE)\ntempmatrix[,c(\"X16\",\"X46\", \"X68\")] &lt;- mymatrix[,c(\"X16\",\"X46\", \"X68\")]\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xlab = 'Percentage', main = 'Strain diversity of farmhouse ale cultures', yaxt =  'n', \n             col = LIT, xlim = c(0,100))\ntempmatrix[,] &lt;- 0\n\n# plot Latvian\npar(new = TRUE)\ntempmatrix[,c(\"X42\", \"X45\")] &lt;- mymatrix[,c(\"X42\", \"X45\")]\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xlab = 'Percentage', main = 'Strain diversity of farmhouse ale cultures', yaxt =  'n', \n             col = LAT, xlim = c(0,100))\ntempmatrix[,] &lt;- 0\n\n# plot Central European\npar(new = TRUE)\ntempmatrix[,c(\"X27\", \"X28\")] &lt;- mymatrix[,c(\"X27\", \"X28\")]\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xlab = 'Percentage', main = 'Strain diversity of farmhouse ale cultures', yaxt =  'n', \n             col = CE, xlim = c(0,100))\ntempmatrix[,] &lt;- 0\n\n# plot Southern European\npar(new = TRUE)\ntempmatrix[,c(\"X54\", \"X57\")] &lt;- mymatrix[,c(\"X54\", \"X57\")]\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xlab = 'Percentage', main = 'Strain diversity of farmhouse ale cultures', yaxt =  'n', \n             col = SE, xlim = c(0,100))\ntempmatrix[,] &lt;- 0\n\n# plot North western\npar(new = TRUE)\ntempmatrix[,c(\"AA\", \"X29\", \"X53\", \"X11\", \"X5\", \"X62\", \"X17\", \"X21\", \"X12\", \"X63\",\n              \"X69\", \"X9\", \"X20\", \"X13\", \"X18\", \"X10\", \"X22\", \"AB\", \"X8\", \"X35\",\n              \"AC\", \"AE\", \"X43\", \"X3\", \"X41\")]  &lt;- mymatrix[,c(\"AA\", \"X29\", \"X53\",\n                                                               \"X11\", \"X5\", \"X62\", \"X17\", \"X21\", \"X12\", \"X63\",\n                                                               \"X69\", \"X9\", \"X20\", \"X13\", \"X18\", \"X10\", \"X22\", \"AB\", \"X8\", \"X35\",\n                                                               \"AC\", \"AE\", \"X43\", \"X3\", \"X41\")]\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xlab = 'Percentage', main = 'Strain diversity of farmhouse ale cultures', yaxt =  'n', \n             col = NW, xlim = c(0,100))\ntempmatrix[,] &lt;- 0\n\n# plot South western\npar(new = TRUE)\ntempmatrix[,c(\"X19\", \"X38\", \"X44\", \"X14\", \"X6\", \"X1\", \"X2\", \"X7\")]  &lt;- mymatrix[,c(\"X19\", \"X38\", \"X44\", \"X14\", \"X6\", \"X1\", \"X2\", \"X7\")]\nb &lt;- barplot(tempmatrix, horiz = TRUE, las = 1, xlab = 'Percentage', main = 'Strain diversity of farmhouse ale cultures', yaxt =  'n', \n             col = SE, xlim = c(0,100))\ntempmatrix[,] &lt;- 0\n\n\n\n# label axis\naxis(4,at = b,  mydata[42,], tick = FALSE, line = 0, cex.axis = 1, las = 2)\ntext(103.4, b[44]+3, 'n. strains', cex = 1, srt = 90)\naxis(2,at = b,  mydata[43,], line = 0, cex.axis = 1, las = 1)\ntext(110, b[44]+3.7, 'current\\npreservation', cex = 1, srt = 90)\naxis(4,at = b,  mydata[44,], tick = FALSE, line = +1.5, cex.axis = 1, las = 2)\ntext(120, b[44]+3.7, 'historic\\npreservation', cex = 1, srt = 90)\naxis(4,at = b,  mydata[45,], tick = FALSE, line = +4.5, cex.axis = 1, las = 2)\n\n\n\n\n\n\n\n\n# Read the table into a data frame\nstrain_data &lt;- read.csv(\"sequenced_strains.csv\", stringsAsFactors = FALSE)\n\n# Extract the columns as vectors\nstrain_list &lt;- strain_data$strain\ngroup_index_list &lt;- strain_data$group_index\nstrain_name_list &lt;- strain_data$strain_name\n\n# Loop over strains to highlight and add labels\nfor (i in seq_along(strain_list)) {\n  strain &lt;- strain_list[i]\n  group_index &lt;- group_index_list[i]\n  strain_name &lt;- strain_name_list[i]\n  \n  # Find the strain index in mydata\n  strain_index &lt;- match(strain, names(mydata))\n  if (is.na(strain_index)) next  # Skip if strain not found\n  \n  # Get y-coordinates for the bar\n  y_bottom &lt;- b[strain_index] - 0.47  # Adjust for bar width\n  y_top &lt;- b[strain_index] + 0.47\n  \n  # Calculate x-coordinates for the specific group_index\n  if (group_index == 1) {\n    x_start &lt;- 0  # No preceding groups\n  } else {\n    x_start &lt;- sum(as.numeric(mymatrix[1:(group_index - 1), strain_index]), na.rm = TRUE)\n  }\n  x_end &lt;- x_start + as.numeric(mymatrix[group_index, strain_index])\n  \n  # Highlight the specific portion\n  rect(x_start, y_bottom, x_end, y_top, border = \"red\", lwd = 2)\n  \n  # Add the text label\n  x_mid &lt;- (x_start + x_end) / 2  # Midpoint for the label\n  text(x_mid, (y_bottom + y_top) / 2 - 0.1, strain_name, col = \"white\", cex = 0.8)\n}\n\n\ndev.off()\n\n\n\n7.1.2 Panel C code\n\n'''\nThe CSV file comes from Peter's Google spreadsheet for fig 1B.\n'''\n\nimport sys, csv, re\n\n# --- FUNCTIONS\n\nREG_CULTURE = re.compile('(\\\\d+|A[ABCDEF])(P|R)\\\\d+')\ndef get_culture(strain_name):\n    m = REG_CULTURE.match(strain_name)\n    if m:\n        c = m.group(1)\n        return c if len(c) == 2 else '0' + c\n\ndef is_picked(strain):\n    return 'P' in strain\n\n# --- SPLIT BY CULTURE\n\nby_culture = {}\nfor (strain, group, intragroup, culture, no) in csv.reader(open(sys.argv[1])):\n    if is_picked(strain) or strain == 'strain':\n        continue\n\n    c = get_culture(strain)\n    if c not in by_culture:\n        by_culture[c] = []\n    by_culture[c].append((strain, group))\n\n# --- FIND PROPORTION PR CULTURE\n\nproportions = []\nculture_codes = sorted(list(by_culture.keys()))\nfor c in culture_codes:\n    strains = len(by_culture[c])\n\n    group_counts = {}\n    for (strain, group) in by_culture[c]:\n        group_counts[group] = group_counts.get(group, 0) + 1\n\n    biggest = max(group_counts.values())\n\n    print(c, biggest, biggest / strains)\n    proportions.append((c, biggest / strains ))\n\nbare_props = [p for (_, p) in proportions]\n\n# --- PREP\n\nfrom matplotlib import pyplot\n\nfig, ((one_ax1, one_ax2), (two_ax1, two_ax2)) = pyplot.subplots(2, 2)\nfig.set_size_inches(10, 4)\n\n# this is for four panels\n#pyplot.figtext(0.075, 0.9, 'A', {'size' : 16})\n#pyplot.figtext(0.075, 0.47, 'C', {'size' : 16})\n#pyplot.figtext(0.5, 0.9, 'B', {'size' : 16})\n#pyplot.figtext(0.5, 0.47, 'D', {'size' : 16})\n\n# fig, (single_ax, two_ax1, two_ax2) = pyplot.subplots(1, 3, sharex = True,\n#                                                      sharey = True,\n#                                                      figsize = [12, 4])\n# # pyplot.figtext(0.075, 0.9, 'C', {'size' : 16})\n# # pyplot.figtext(0.375, 0.9, 'D', {'size' : 16})\n# # pyplot.figtext(0.65,  0.9, 'E', {'size' : 16})\n\n\n# --- PLOT THE HISTOGRAM\n\n# http://matplotlib.org/1.2.1/examples/pylab_examples/histogram_demo.html\n\npyplot.style.use('ggplot')\n\nif False:\n    (n, bins, patches) = ax1.hist(bare_props, 10)\n    #pyplot.title('Proportion of dominant strain in culture')\n    ax1.set_ylabel('Number of cultures')\n    ax1.set_xlabel('Proportion')\n    #pyplot.show()\n\n# --- PLOT THE SINGLE-LINE PLOT\n\n#pyplot.clf()\n\ndef find_cultures(proportions, min_proportion):\n    return 100 * len([v for v in proportions if v &gt;= min_proportion]) / len(proportions)\n\nx = [v / 100 for v in range(100)]\ny = [find_cultures(bare_props, v) for v in x]\n\none_ax1.plot(x, y)\n#pyplot.title('Proportion of dominant strain in culture')\n#one_ax1.set_ylabel('% of cultures')\n#two_ax1.set_xlabel('Proportion')\n# single_ax.set_xlabel('Min proportion')\n#pyplot.show()\n\n# --- TWO-LINE PLOT FOR PETER\n\n#pyplot.clf()\n\ndef two_line_plot_drying(ax, field_name):\n    preservation = {\n        row['culture'].zfill(2) : row[field_name] for row\n        in csv.DictReader(open('culture-data.csv'))\n    }\n\n    props_dry = [p for (c, p) in proportions if preservation[c] == 'Dried']\n    props_liq = [p for (c, p) in proportions if preservation[c] == 'Liquid']\n\n    two_line_plot(ax, props_dry, props_liq, 'Dried', 'Liquid')\n\ndef two_line_plot(ax, props1, props2, l1, l2):\n    def find_cultures(proportions, min_proportion):\n        return 100 * len([v for v in proportions if v &gt;= min_proportion]) / len(proportions)\n\n    x = [v / 100 for v in range(100)]\n    y1 = [find_cultures(props1, v) for v in x]\n    y2 = [find_cultures(props2, v) for v in x]\n\n    ax.plot(x, y1, label = l1)\n    ax.plot(x, y2, label = l2)\n    ax.legend()\n\n    # ----- T-TEST\n\n    from scipy import stats\n\n    print('---', l1, l2)\n    out = stats.ttest_ind(props1, props2)\n    print(out)\n    out = stats.mannwhitneyu(props1, props2)\n    print(out)\n\ndef to_float(pitch):\n    return float(pitch) if pitch else None\n\ndef two_line_plot_pitch(ax):\n    pitch = {\n        row['culture'].zfill(2) : to_float(row['pitch']) for row\n        in csv.DictReader(open('culture-data.csv'))\n    }\n\n    props_hi = [p for (c, p) in proportions if pitch[c] and pitch[c] &gt;= 30]\n    props_lo = [p for (c, p) in proportions if pitch[c] and pitch[c]&lt; 30]\n\n    two_line_plot(ax, props_hi, props_lo, 'High pitch', 'Low pitch')\n\ndef two_line_plot_ftime(ax):\n    ftime = {\n        row['culture'].zfill(2) : to_float(row['fermtime']) for row\n        in csv.DictReader(open('culture-data.csv'))\n    }\n\n    SPLIT = 60\n    props_ln = [p for (c, p) in proportions if ftime[c] and ftime[c] &gt;= SPLIT]\n    props_sh = [p for (c, p) in proportions if ftime[c] and ftime[c]&lt; SPLIT]\n\n    two_line_plot(ax, props_ln, props_sh, 'Long ferm', 'Short ferm')\n\n#two_line_plot_drying(two_ax1, 'preservation')\ntwo_line_plot_ftime(one_ax2)\ntwo_line_plot_pitch(two_ax1)\ntwo_line_plot_drying(two_ax2, 'received')\n\n#pyplot.show()\npyplot.savefig('dominant-strain.nolabels.pdf', format = 'pdf', dpi = 288) # dpi = 288 * 2\n\n\n\n7.1.3 Panel D code and merge\n\n# get panel A\npanel_a = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-01/fig-1A-map-with-numbers.png\"),\n    width = ggplot2::unit(1, \"npc\"),\n    height = ggplot2::unit(1, \"npc\")),\n  -Inf, Inf, -Inf, Inf)\n  \n\n\n#==============================================================================#\n# 2 - Load Panel B                                                          ####\n\n# get panel B\npanel_b = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-01/Strain Diversity updated 2 - notitle.png\"),\n    width = ggplot2::unit(1,\"npc\"),\n    height = ggplot2::unit(1,\"npc\")),\n  -Inf, Inf, -Inf, Inf)\n\n\n\n#==============================================================================#\n# 3 - Load Panel C                                                          ####\n\n# get panel C\npanel_c = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-01/dominant-strain.nolabels.pdf\"),\n    width = ggplot2::unit(1,\"npc\"),\n    height = ggplot2::unit(1,\"npc\")),\n  -Inf, Inf, -Inf, Inf)\n\n\n\n#==============================================================================#\n# 4 - Panel D - Cultures' Violin Plots                                      ####\n\n#------------------------------------------------------------------------------#\n## 4.1 - Import data and prep data                                          ####\n\n# import and prep data\nraw_data = read.delim(\"./data/p02-01/grouped phenotype data with annotations.csv\", sep = \",\", header = TRUE)\n\nraw_data = raw_data %&gt;%\n  dplyr::filter(group != \"WL004\") %&gt;%\n  dplyr::filter(group != \"LA001\")\nraw_data$Industry = ifelse(\n  raw_data$region %in% c(\"South-West Norway\", \"Lithuania\", \"North-West Norway\", \"Russia\",\n                         \"Central-Eastern Norway\", \"Latvia\", \"South-Eastern Norway\"),\n  \"Farmhouse\",\n  raw_data$region\n)\nraw_data$Industry = ifelse(\n  raw_data$Outside == \"yes\",\n  \"Outside\",\n  raw_data$Industry\n)\nraw_data$region = ifelse(\n  raw_data$Industry == \"Farmhouse\",\n  raw_data$region,\n  \"NA\"\n)\n\nraw_data$region = ifelse(\n  raw_data$culture %in% c(\"7\", \"38\"),\n  \"South-West Norway\",\n  ifelse(\n    raw_data$culture == \"40\",\n    \"Russia\",\n    ifelse(\n      raw_data$culture == \"45\",\n      \"Latvia\",\n      ifelse(\n        raw_data$culture == \"57\",\n        \"Central-Eastern Norway\",\n        raw_data$region\n      )\n    )\n  )\n)\n\nmetadata = raw_data %&gt;%\n  dplyr::select(c(\"group\", \"culture\", \"region\", \"Industry\", \"Outside\", \"method\"))\nrownames(metadata) = metadata$group\n\nrownames(raw_data) = raw_data$group\ncounts = raw_data %&gt;%\n  dplyr::select(-c(\"group\", \"culture\", \"region\", \"Industry\", \"Outside\", \"method\"))\n\n## farmhouse focus\nmetadata_farm_only = metadata[which(metadata$Industry %in% c(\"Farmhouse\", \"Outside\")), ]\ncounts_farm_only = counts[which(rownames(counts) %in% metadata_farm_only$group), ]\n\n\n\n## import cultures\ncultures_metadata = read.delim(\"./data/p02-01/datakveikculture/culture-data.csv\", sep = \",\", header = TRUE)\ncultures_db = data.frame(culture = character(), value = numeric())\nculture_files = list.files(\n  path = \"./data/p02-01/datakveikculture/\",\n  pattern = \".txt\",\n  all.files = FALSE,\n  full.names = TRUE\n)\n\n# import data\nfor(infile in culture_files){\n  \n  culture_name = stringr::str_remove(infile, \"./data/p02-01/datakveikculture//\") %&gt;%\n    stringr::str_remove(\".txt\")\n  \n  tmp_df = utils::read.delim(infile, sep = \"\\t\", header = FALSE)\n  for(k in 2:ncol(tmp_df)){\n    tmp_df[k-1, k] = NA\n  }\n  tmp_df = tmp_df %&gt;%\n    reshape::melt() %&gt;%\n    stats::na.omit() %&gt;%\n    dplyr::filter(value != 0)\n  \n  \n  tmp_df$culture = culture_name\n  tmp_df = tmp_df %&gt;%\n    dplyr::select(\"culture\", \"value\")\n  \n  cultures_db = rbind(cultures_db, tmp_df)\n  \n}\n\ncultures_db = dplyr::left_join(cultures_db, metadata_farm_only)\n\ncultures_db$region = stringr::str_replace_all(cultures_db$region, \" \", \"\\n\")\ncultures_db$region = factor(\n  cultures_db$region,\n  levels = c(\"North-West\\nNorway\", \"Central-Eastern\\nNorway\", \"South-West\\nNorway\",\n             \"South-Eastern\\nNorway\", \"Latvia\", \"Lithuania\", \"Russia\")\n)\n\n\ncultures_db$culture = ifelse(\n  cultures_db$culture %in% c(\"AA\", \"AB\", \"AC\", \"AE\"),\n  cultures_db$culture,\n  paste0(\"#\", cultures_db$culture)\n)\ncultures_db$culture = factor(\n  cultures_db$culture,\n  levels = c(\n    \"#1\", \"#2\", \"#3\", \"#5\", \"#6\", \"#7\", \"#8\", \"#9\",\n    \"#10\", \"#11\", \"#12\", \"#13\", \"#14\", \"#16\", \"#17\", \"#18\", \"#19\",\n    \"#20\", \"#21\", \"#22\", \"#27\", \"#28\", \"#29\",\n    \"#35\", \"#38\", \"#39\",\n    \"#40\", \"#41\", \"#42\", \"#43\", \"#44\", \"#45\", \"#46\",\n    \"#53\", \"#54\", \"#57\",\n    \"#62\", \"#63\", \"#68\", \"#69\",\n    \"AA\", \"AB\", \"AC\", \"AE\")\n)\n\n\ncounts_data = data.frame(\n  label = c(\n    \"n=16\", \"n=9\", \"n=22\", \"n=19\", \"n=17\", \"n=18\", \"n=22\", \"n=7\", \"n=12\", \"n=20\", \"n=22\", \"n=15\", \"n=22\", \"n=33\", \"n=16\", \"n=12\", \"n=24\", \"n=10\", \"n=19\", \"n=22\", \"n=3\", \"n=11\", \"n=2\", \"n=3\", \"n=3\",\n    \"n=22\", \"n=24\", \"n=8\",\n    \"n=30\", \"n=15\", \"n=10\", \"n=12\", \"n=10\", \"n=29\", \"n=12\", \"n=5\",\n    \"n=21\",\n    \"n=12\", \"n=5\",\n    \"n=32\", \"n=4\", \"n=7\",\n    \"n=14\", \"n=9\"\n  ),\n  x = c(1:25, 1:3, 1:8, 1, 1:2, 1:3, 1:2),\n  y = rep(115, 44),\n  region = c(rep(\"North-West\\nNorway\", 25), rep(\"Central-Eastern\\nNorway\", 3), rep(\"South-West\\nNorway\", 8),\n             \"South-Eastern\\nNorway\", rep(\"Latvia\", 2), rep(\"Lithuania\", 3),rep(\"Russia\", 2))\n)\ncounts_data$region = factor(\n  counts_data$region,\n  levels = c(\"North-West\\nNorway\", \"Central-Eastern\\nNorway\", \"South-West\\nNorway\",\n             \"South-Eastern\\nNorway\", \"Latvia\", \"Lithuania\", \"Russia\")\n)\n\np_violins = ggplot(cultures_db, aes(x = forcats::fct_reorder(culture, value, median), y = value)) +\n  geom_violin(aes(fill = region),\n              scale = \"width\",\n              trim = FALSE) +\n  geom_text(data = counts_data, mapping = aes(x = x, y = y, label = label), angle = 90) +\n  stat_summary(fun = \"median\", colour = \"red\", geom = \"crossbar\") +\n  facet_grid(~ region, scales = \"free_x\", space = \"free\") +\n  scale_y_continuous(limits = c(0, 117), breaks = c(0, 25, 50, 75, 100)) +\n  scale_fill_manual(values = c('#0571B0', \"#008470\", '#92C5DE', \"#80CDC1\", \"#FFDA00\", '#FBA01D', '#A6611A')) +\n  labs(title = \"Similarities within cultures\",\n       y = \"% of identity\") +\n  theme(title = element_blank(),\n        axis.text.x = element_text(vjust = 0.5, angle = 90, size = 14),\n        axis.text.y = element_text(size = 16),\n        axis.title.x = element_blank(),\n        axis.title.y = element_text(size = 18),\n        legend.position = \"none\",\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(colour = \"grey75\"),\n        panel.grid.minor.y = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_blank())\n\n\nfinal_plot = cowplot::plot_grid(\n  cowplot::plot_grid(\n    cowplot::plot_grid(\n      NA, panel_a,\n      ncol = 2,\n      rel_widths = c(0.75, 10),\n      labels = c(\"A\", NA)\n    ), \n    panel_c,\n    p_violins,\n    nrow = 3,\n    rel_heights = c(1.5, 1, 1.5),\n    labels = c(NA, \"C\", \"D\")\n  ), panel_b,\n  ncol = 2,\n  labels = c(NA, \"B\")\n)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Figure 1</span>"
    ]
  },
  {
    "objectID": "p02-01-Figure1.html#figure-1-plot",
    "href": "p02-01-Figure1.html#figure-1-plot",
    "title": "7  Figure 1",
    "section": "7.2 Figure 1 plot",
    "text": "7.2 Figure 1 plot\n\n\n\n\n\nFigure 1: Genetic diversity of farmhouse yeast cultures.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Figure 1</span>"
    ]
  },
  {
    "objectID": "p02-01-Figure1.html#session-information",
    "href": "p02-01-Figure1.html#session-information",
    "title": "7  Figure 1",
    "section": "7.3 Session Information",
    "text": "7.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] RColorBrewer_1.1-3 ggtext_0.1.2       ggrepel_0.9.6      ggplot2_3.5.2     \n[5] forcats_1.0.0      dplyr_1.1.4        cowplot_1.2.0     \n\nloaded via a namespace (and not attached):\n [1] Matrix_1.6-5      gtable_0.3.6      jsonlite_2.0.0    compiler_4.3.3   \n [5] tidyselect_1.2.1  Rcpp_1.1.0        stringr_1.5.1     xml2_1.3.8       \n [9] magick_2.8.7      dichromat_2.0-0.1 png_0.1-8         scales_1.4.0     \n[13] yaml_2.3.10       fastmap_1.2.0     lattice_0.22-5    reticulate_1.43.0\n[17] plyr_1.8.9        R6_2.6.1          labeling_0.4.3    generics_0.1.4   \n[21] knitr_1.50        htmlwidgets_1.6.4 tibble_3.3.0      pillar_1.11.0    \n[25] rlang_1.1.6       reshape_0.8.10    stringi_1.8.7     xfun_0.52        \n[29] cli_3.6.5         withr_3.0.2       magrittr_2.0.3    digest_0.6.37    \n[33] grid_4.3.3        gridtext_0.1.5    lifecycle_1.0.4   vctrs_0.6.5      \n[37] evaluate_1.0.4    glue_1.8.0        farver_2.1.2      rmarkdown_2.29   \n[41] tools_4.3.3       pkgconfig_2.0.3   htmltools_0.5.8.1",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Figure 1</span>"
    ]
  },
  {
    "objectID": "p02-02-Figure2.html",
    "href": "p02-02-Figure2.html",
    "title": "8  Figure 2",
    "section": "",
    "text": "8.1 Figure 2 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Figure 2</span>"
    ]
  },
  {
    "objectID": "p02-02-Figure2.html#figure-2-code",
    "href": "p02-02-Figure2.html#figure-2-code",
    "title": "8  Figure 2",
    "section": "",
    "text": "8.1.1 Panel A code\n\nlibrary(ape)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\n\n# Read tree in newick format using ape\nkveik_tree &lt;- read.tree('DendroExport_densitybased.txt') \n# Identify tip labels that start with \"AR\" or \"AP\" as we dont have phenotype data for culture A\n#tips_to_drop &lt;- kveik_tree$tip.label[grep(\"^(AR|AP)\", kveik_tree$tip.label)]\n\n# rename A to AB\nkveik_tree$tip.label &lt;- sub(\"^AR([0-9]+)$\", \"ABR\\\\1\", kveik_tree$tip.label)\nkveik_tree$tip.label &lt;- sub(\"^AP([0-9]+)$\", \"ABP\\\\1\", kveik_tree$tip.label)\n\n# add 'R' strains to be swapped out to drop list\ntips_to_drop &lt;- c( \n               '21R40',\n               '17R20',\n               '45R38',\n               '28R31', \n               '28R1')\n\n# Drop the identified tips\nkveik_tree &lt;- drop.tip(kveik_tree, tips_to_drop)\n# list strains to relabel\nlabel_changes &lt;- c(\"21P1\" = \"21R40\",\n                   \"17P5\" = \"17R20\",\n                   \"45P5\" = \"45R38\",\n                   \"28P1\" = \"28R31\",\n                   \"28P6\" = \"28R1\")\n# Replace the specified tip labels\nkveik_tree$tip.label &lt;- sapply(kveik_tree$tip.label, function(label) {\n  if (label %in% names(label_changes)) {\n    return(label_changes[label])\n  } else {\n    return(label)\n  }\n})\n\n# Identify tip labels that are \"P\" strains\ntips_to_drop &lt;- grep(\"P\", kveik_tree$tip.label, value = TRUE)\n# Drop the P strains \nkveik_tree &lt;- drop.tip(kveik_tree, tips_to_drop)\n\n# extract group info from tip labels (label format = culture R picking number e.g. 1R1, want to extract only culture number)\ngpinfo &lt;- split(kveik_tree$tip.label, gsub(\"[RPb]\\\\w+\", \"\", kveik_tree$tip.label))\n# assign group info to tree\nkveik_tree &lt;- groupOTU(kveik_tree, gpinfo)\n# plot tree, circular cladogram with colors by group\np &lt;- ggtree(kveik_tree, aes(color = group), size = 0.25, layout = 'circular') +\n  geom_tiplab2(aes(angle = angle), size = 0.5) +\n  labs(title = 'Interdelta band clustering', color = 'Farmhouse Culture') +\n  theme(plot.title = element_text(hjust = 0.5, size = 20),\n        legend.title = element_text(size = 15),\n        legend.text = element_text(size = 12)) +\n  guides(color = guide_legend(override.aes = list(label = \"\", size = 1)))\n\n# read in info file\nheatmapData &lt;- read.csv('heatmap data - swaped P out.csv', row.names = 1)\nrn &lt;- rownames(heatmapData)\nheatmapData &lt;- heatmapData[, c(3,4)] # select which columns to display here\nheatmapData &lt;- as.data.frame(sapply(heatmapData, as.character))\nrownames(heatmapData) &lt;- rn\nheatmap.colours &lt;- c('0' = '#FFFFFF',\n                     '1' = '#0571B0',\n                     '2' = '#92C5DE',\n                     '3' = '#018571',\n                     '4' = '#80CDC1',\n                     '5' = '#FFDA00',\n                     '6' = '#FBA01D',\n                     '7' = '#A6611A',\n                     '8' = '#FF0000')\n\n\npdf(file = 'cladogram updated 2.pdf', width = 10, height = 8)\ngheatmap(p, heatmapData, offset = 1, color=NA, width = 0.1,\n         colnames = FALSE) +\n  scale_fill_manual(values=heatmap.colours, breaks=c(1:7,0,8), labels = c('North-West Norway', 'South-West Norway', 'Central-Eastern Norway', 'South-Eastern Norway','Latvia', 'Lithuania','Russia', '', 'sequenced'), aes(legend_title = 'Location'))\ndev.off()\n\n# ###########################################\n# # label nodes\n# p1 &lt;- p + geom_text(aes(label=node), hjust=-.3)\n# pdf(file = 'nodes.pdf', width = 30, height = 30)\n# p1\n# dev.off()\n# \n\n\n\n8.1.2 Merge\n\npanel_a = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-02/cladogram updated 2.pdf\"),\n    width = ggplot2::unit(1,\"npc\"),\n    height = ggplot2::unit(1,\"npc\")),\n  -Inf, Inf, -Inf, Inf)\n\npanel_b = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-02/graph2.pdf\"),\n    width = ggplot2::unit(1,\"npc\"),\n    height = ggplot2::unit(1,\"npc\")),\n  -Inf, Inf, -Inf, Inf)\n\n\nfinal_plot = cowplot::plot_grid(\n  panel_a,\n  panel_b,\n  nrow = 2,\n  rel_heights = c(3, 1),\n  labels = c(\"A\", \"B\")\n)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Figure 2</span>"
    ]
  },
  {
    "objectID": "p02-02-Figure2.html#figure-2-plot",
    "href": "p02-02-Figure2.html#figure-2-plot",
    "title": "8  Figure 2",
    "section": "8.2 Figure 2 plot",
    "text": "8.2 Figure 2 plot\n\n\n\n\n\nFigure 2: Genetic diversity within and between farmhouse yeast cultures.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Figure 2</span>"
    ]
  },
  {
    "objectID": "p02-02-Figure2.html#session-information",
    "href": "p02-02-Figure2.html#session-information",
    "title": "8  Figure 2",
    "section": "8.3 Session Information",
    "text": "8.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] RColorBrewer_1.1-3 ggtext_0.1.2       ggrepel_0.9.6      ggplot2_3.5.2     \n[5] forcats_1.0.0      dplyr_1.1.4        cowplot_1.2.0     \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_2.0.0    compiler_4.3.3    tidyselect_1.2.1 \n [5] Rcpp_1.1.0        xml2_1.3.8        magick_2.8.7      dichromat_2.0-0.1\n [9] scales_1.4.0      yaml_2.3.10       fastmap_1.2.0     R6_2.6.1         \n[13] labeling_0.4.3    generics_0.1.4    knitr_1.50        htmlwidgets_1.6.4\n[17] tibble_3.3.0      pillar_1.11.0     rlang_1.1.6       xfun_0.52        \n[21] cli_3.6.5         withr_3.0.2       magrittr_2.0.3    digest_0.6.37    \n[25] grid_4.3.3        gridtext_0.1.5    lifecycle_1.0.4   vctrs_0.6.5      \n[29] evaluate_1.0.4    glue_1.8.0        farver_2.1.2      rmarkdown_2.29   \n[33] tools_4.3.3       pkgconfig_2.0.3   htmltools_0.5.8.1",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Figure 2</span>"
    ]
  },
  {
    "objectID": "p02-03-Figure3.html",
    "href": "p02-03-Figure3.html",
    "title": "9  Figure 3",
    "section": "",
    "text": "9.1 Figure 3 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Figure 3</span>"
    ]
  },
  {
    "objectID": "p02-03-Figure3.html#figure-3-code",
    "href": "p02-03-Figure3.html#figure-3-code",
    "title": "9  Figure 3",
    "section": "",
    "text": "9.1.1 Panel A code\n\n# mapping swap_yeasts\nto_swap = data.frame(\n  old_name = c(\"21P1\", \"17P5\", \"45P5\", \"28P1\", \"28P6\"),\n  new_name = c(\"21R40\", \"17R20\", \"45R38\", \"28R31\", \"28R1\")\n)\n\n# import final calde list\nfinal_clades = read.table(\n  \"./data/p02-03/final_clades_for_pub.txt\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n\n\n# load tree\nbest_tree = read.tree(\"./data/p02-03/genetrees.output.BS.best.2025.tre\")\n\nbest_tree = as.phylo(best_tree)\nbest_tree$node.label = as.numeric(as.character(best_tree$node.label))\nbest_tree = ape::root(best_tree,\n                      which(best_tree$tip.label %in% c(\"Skud\")),\n                      edgelabel = TRUE)\nbest_tree = ladderize(best_tree, right = TRUE)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p02-03/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\ntree_annot = tree_annot_raw[, -which(colnames(tree_annot_raw) == \"seq_name\")]\ntree_annot$Origin = factor(tree_annot$niche3,\n                           levels = c(\"North-West Norway\",  \"South-West Norway\",\"Central-Eastern Norway\",\n                                      \"Latvia\", \"Lithuania\", \"Russia\", \"\"))\ncolnames(tree_annot) = c(\"Strain\", \"Name\", \"Niche\", \"niche2\", \"niche3\", \"group\", \"Origin\")\ntree_annot$Niche = ifelse(tree_annot$Niche == \"farmhouse\", \"Farmhouse\", tree_annot$Niche)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot$Strain = stringr::str_replace(\n    tree_annot$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot$Name = stringr::str_replace(\n    tree_annot$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  best_tree$tip.label = stringr::str_replace(\n    best_tree$tip.label,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  ) \n}\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$Niche == \"Farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\n\ngpinfo = list(Beer1 = tree_annot$Strain[tree_annot$Clade == 'Beer1'],\n              Beer2 = tree_annot$Strain[tree_annot$Clade == 'Beer2'],\n              Wine = tree_annot$Strain[tree_annot$Clade == 'Wine'],\n              Asian = tree_annot$Strain[tree_annot$Clade == 'Asia'],\n              Farmhouse = tree_annot$Strain[tree_annot$Clade == 'Farmhouse'],\n              Mixed = tree_annot$Strain[tree_annot$Clade == 'Mixed'],\n              Other = tree_annot$Strain[tree_annot$Clade == 'Other'])\n\n#relabel nodes\nbest_tree = treeio::rename_taxa(best_tree, data = tree_annot, Name, Strain)\nbest_tree = ggtree::groupOTU(best_tree, gpinfo)\n\n\n# mark allhocthonous yeast\nselected_labels = c(\"Muri\", \"7R25\", \"38R16\", \"40R14\", \"40R20\", \"40R1\")\nall_other_labels = best_tree$tip.label[-which(best_tree$tip.label %in% selected_labels)]\n\n# plot\np = ggtree(best_tree,\n           #aes(color = group),\n           layout = \"fan\",\n           open.angle = 0) + \n  geom_tiplab2(aes(subset = isTip & label %in% all_other_labels),\n               color = \"black\",\n               offset = 3,\n               size = 2.75) +\n  geom_tiplab2(aes(subset = isTip & label %in% selected_labels),\n               color = \"grey75\",\n               offset = 3,\n               size = 2.75) +\n  scale_color_manual(values = c(2, 3, 4, 5, 6, '#000000', 7, 8))+\n  geom_nodepoint(aes(fill = cut(as.numeric(label),\n                                c(0, 70, 90, 100))), shape = 21, size = 3) +\n  theme_tree(legend.position = c(0.1, 0.55)) +\n  scale_fill_manual(values = c(\"white\", \"grey\", \"black\"),\n                    guide = \"legend\",\n                    name = \"Bootstrap\",\n                    breaks = c(\"(90,100]\", \"(70,90]\", \"(0,70]\"),\n                    labels = expression(BP&gt;=90,70 &lt;= BP * \" &lt; 90\", BP &lt; 70))+\n  labs(title = 'Phylogenetic Tree', color = 'Clade') +\n  theme(plot.title = element_text(hjust = 0.5))\np = ggtree::flip(p, 258, 325)\n\np_tree = p +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Clade),\n                          color = NA, offset = 0.04, pwidth = 2) +\n  scale_fill_manual(values = c(\"#df536b\", \"#61d04f\", \"#28e2e5\", \"#2297e6\", \"#cd0bbc\", \"grey75\", \"#bcf60c\")) +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Origin),\n                          color = NA, offset = 0.06, pwidth = 1.5) +\n  scale_fill_manual(values = c('#0571B0',\n                               '#92C5DE',\n                               '#018571',\n                               '#FFDA00',\n                               '#FBA01D',\n                               '#A6611A',\n                               '#ffffff')) +\n  labs(fill = \"Origin\") +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\n\n\n9.1.2 Panel B code\n\n# with outside yeasts included in the gategories\ndiversity_table = data.frame(\n  \"Subpopulation\" = c(\"Farmhouse\", \"CE-Norway\", \"SW-Norway\", \"NW-Norway\", \"Lithuania\", \"Latvia\", \"Russia\", \"allochthonous yeast\"),\n  \"Number of Strains\" = c(\"42*\", \"6\", \"11\", \"11\", \"3\", \"4\", \"4\", \"6\"),\n  \"Segregating Sites\" = c(\"702,428\", \"100,194\", \"655,345\", \"129,478\", \"113,348\", \"124,295\", \"129,453\", \"615,038\"),\n  \"π\" = c(\"6.64E-3\", \"3.99E-3\", \"1.06E-3\", \"4.12E-3\", \"4.85E-3\", \"5.03E-3\", \"4.72E-3\", \"1.61E-2\")\n)\ncolnames(diversity_table) = stringr::str_replace_all(colnames(diversity_table), \"\\\\.\", \" \")\nrownames(diversity_table) = NULL\n\ndiv_table_with_out = ggpubr::ggtexttable(diversity_table, theme = ggpubr::ttheme(\"blank\"), rows = NULL) %&gt;%\n  ggpubr::table_cell_font(row = 3:9, column = 1:4, face = \"italic\") %&gt;%\n  ggpubr::tab_add_hline(at.row = 1:2, row.side = \"top\", linewidth = 2) %&gt;%\n  ggpubr::tab_add_hline(at.row = 9:9, row.side = \"bottom\", linewidth = 2) \n\n\n# outside yeasts only separated\ndiversity_table = data.frame(\n  \"Subpopulation\" = c(\"Farmhouse\", \"CE-Norway\", \"SW-Norway\", \"NW-Norway\", \"Lithuania\", \"Latvia\", \"Russia\", \"allochthonous yeast\"),\n  \"Number of Strains\" = c(38, 6, 10, 11, 3, 4, 1, 6),\n  \"Segregating Sites\" = c(\"231,211\", \"100,194\", \"152,561\", \"129,478\", \"113,348\", \"124,295\", \"-\", \"615,038\"),\n  \"π\" = c(\"4.75E-3\", \"3.99E-3\", \"4.57E-3\", \"4.12E-3\", \"4.85E-3\", \"5.03E-3\", \"3.17E-3\", \"1.61E-2\")\n)\ncolnames(diversity_table) = stringr::str_replace_all(colnames(diversity_table), \"\\\\.\", \" \")\n\ndiv_table_without_out = ggpubr::ggtexttable(diversity_table, rows = NULL, theme = ggpubr::ttheme(\"blank\")) %&gt;%\n  ggpubr::tab_add_hline(at.row = 1:2, row.side = \"top\", linewidth = 2) \n\n\n\n9.1.3 Panel C code\n\n# import table\nPCA_all = read.delim(\"./data/p02-03/kveiks_and_Gallone2016.fltr.bi.eigenvec\", header = FALSE, sep = \" \", stringsAsFactors = FALSE)\nPCA_variance1 = read.delim(\"./data/p02-03/kveiks_and_Gallone2016.fltr.bi.eigenval\", header = FALSE, sep = \"\\t\", stringsAsFactors = FALSE)\n\n# format\nPCA_all$V1 = tree_annot_raw[match(PCA_all$V1, tree_annot_raw$seq_name), \"Strain\"]\nPCA_all[42, \"V1\"] = \"7R25\"\nrow.names(PCA_all) = PCA_all$V1\nPCA_all$niche1 = tree_annot[match(PCA_all$V1, tree_annot$Strain), \"Clade\"]\nPCA_all$group = tree_annot[match(PCA_all$V1, tree_annot_raw$Strain), \"group\"]\nPCA_all$niche1 = stringr::str_replace_all(PCA_all$niche1, \"farmhouse\", \"Farmhouse\")\nPCA_all$niche1[is.na(PCA_all$niche1)] = \"Farmhouse\"\nPCA_all$niche1 = ifelse(\n  PCA_all$V1 %in% c(\"k7R25\", \"Muri\", \"40R1\", \"40R20\", \"40R14\", \"38R16\"),\n  \"Allochthonous\",\n  PCA_all$niche1\n)\n\nPCA_all_plot = ggplot2::ggplot(PCA_all, aes(x = V3, y = V4)) +\n  geom_point(aes(fill = niche1), size = 4, alpha = 0.5, shape = 21) +\n  #ggrepel::geom_text_repel(aes(label = V1), hjust = 0, vjust = 0, max.overlaps = 20, show.legend = FALSE) +\n  scale_fill_manual(values = c(\n    'salmon',\n    \"#df536b\", \"#61d04f\", \"#28e2e5\", \"#2297e6\", \"#cd0bbc\", \"grey75\", \"#bcf60c\"\n  )) +\n  guides(fill = guide_legend(nrow = 5, byrow = TRUE)) +\n  labs(x = paste0(\"PC1 (\", round(PCA_variance1[1, 1], 2),\"%)\"),\n       y = paste0(\"PC2 (\", round(PCA_variance1[2, 1], 2),\"%)\")) +\n  theme(title = element_blank(),\n        axis.text.x = element_text(size = 16),\n        axis.text.y = element_text(size = 16),\n        axis.title = element_text(size = 18),\n        legend.position = c(0.75, 0.75),\n        #legend.position = \"bottom\",\n        legend.box.background = element_rect(colour = \"grey45\"),\n        legend.key = element_blank(),\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank())\n\n\n\n9.1.4 Panel D code\n\n# import table\nPCA_kveiks = read.delim(\"./data/p02-03/kveiks.fltr.bi.eigenvec\", header = FALSE, sep = \" \", stringsAsFactors = FALSE)\nPCA_variance = read.delim(\"./data/p02-03/kveiks.fltr.bi.eigenval\", header = FALSE, sep = \"\\t\", stringsAsFactors = FALSE)\nfor(k in 1:nrow(to_swap)){\n  PCA_kveiks$V1 = stringr::str_replace(\n    PCA_kveiks$V1,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  PCA_kveiks$V2 = stringr::str_replace(\n    PCA_kveiks$V2,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\n# format\nrow.names(PCA_kveiks) = PCA_kveiks$V1\nPCA_kveiks = PCA_kveiks %&gt;% \n  dplyr::mutate(Strain = V2) %&gt;%\n  dplyr::left_join(., tree_annot, by = \"Strain\") %&gt;%\n  dplyr::mutate(\n    niche3 = ifelse(niche3 == \"South-West Norway\", \"S-W Norway\", niche3),\n    niche3 = ifelse(niche3 == \"North-West Norway\", \"N-W Norway\", niche3),\n    niche3 = ifelse(niche3 == \"Central-Eastern Norway\", \"C-E Norway\", niche3)\n  )\nPCA_kveiks$niche3 = ifelse(\n  PCA_kveiks$V1 %in% c(\"k7R25\", \"Muri\", \"40R1\", \"40R20\", \"40R14\", \"38R16\"),\n  \"Allochthonous\",\n  PCA_kveiks$niche3\n)\n\nPCA_kveiks_plot = ggplot2::ggplot(PCA_kveiks, aes(x = V3, y = V4)) +\n  geom_point(aes(fill = niche3), size = 4, alpha = 0.5, shape = 21) +\n  ggrepel::geom_text_repel(aes(label = V1), hjust = 0, vjust = 0, max.overlaps = 20, show.legend = FALSE) +\n  scale_fill_manual(values = c('salmon', '#018571', '#FFDA00', '#FBA01D', '#0571B0','#A6611A', '#92C5DE')) +\n  guides(fill = guide_legend(nrow = 4, byrow = TRUE)) +\n  labs(x = paste0(\"PC1 (\", round(PCA_variance[1, 1], 2),\"%)\"),\n       y = paste0(\"PC2 (\", round(PCA_variance[2, 1], 2),\"%)\")) +\n  theme(title = element_blank(),\n        axis.text.x = element_text(size = 16),\n        axis.text.y = element_text(size = 16),\n        axis.title = element_text(size = 18),\n        legend.position = c(0.75, 0.2),\n        #legend.position = \"bottom\",\n        legend.box.background = element_rect(colour = \"grey45\"),\n        legend.key = element_blank(),\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank())\n\n\n\n9.1.5 Panel E and F code\n\n# all strains print sequence\nsort_all = c(\n  \"2509\", \"2587\", \"2588\", \"2589\", \"2503\", \"2538\", \"2541\", \"2542\", \"2544\", \"2546\", \n  \"2555\", \"X1018\", \"X1033\", \"X1062\", \"X1086\", \"X1113\", \"X2018\", \n  \"x1129\", \"X2013\", \"X5508\", \"2549\", \"X1052\", \"2502\", \"2504\", \"2505\", \"2506\", \"2507\", \"2510\", \"2511\", \"2512\", \"2513\", \"2522\",\n  \"2524\", \"2528\", \"2533\", \"2547\", \"2563\", \"2571\", \"2585\", \"2592\", \"2597\", \"2598\", \"X1002\",\n  \"X1022\", \"X1030\", \"X1157\", \"x1156\", \"2508\", \"2501\", \"2523\", \"2525\", \"2527\",\n  \"2535\", \"2550\", \"2591\", \"2599\", \"X1014\",\n\n  \"2519\", \"2578\", \"2579\", \"2583\", \"X1091\", \"X1111\", \"X2001\",\n  \"X5501\", \"X8003\", \"X8007\", \"X8008\", \"X8009\", \"X1011\", \"X4047\", \"X1120\", \"x1119\", \"X1008\", \"X4035\",\n\n  \"X4051\", \"X4046\", \"2534\", \"2536\", \"2560\", \"VIN7\", \"X1046\", \"X1075\", \"X1092\", \"X1127\", \"X1137\", \"X4002\",\n  \"X4025\", \"X4028\", \"X4031\", \"X4033\", \"X4040\", \"X4042\", \"X4043\", \"X4060\",\n  \"X4061\", \"X4065\", \"X4077\", \"X4\", \"X5002\", \"X5500\", \"X5506\",\n\n  \"X1005\", \"X1004\", \"2577\", \"X1076\", \"2554\", \"X1131\", \"2521\",\n  \"2516\", \"X1045\", \"2548\", \"2520\",\"2551\", \"2552\",  \"2572\", \"X1148\",\n  \"2553\", \"X1007\", \"X1031\", \"X1118\", \"X2003\", \"X2005\",\n\n  \"X5000\", \"X5003\", \"X5004\", \"X5009\", \"X5011\", \"X5013\", \"X6000\", \"X6004\",\n\n  \"2514\", \"2515\", \"2517\", \"2526\", \"2529\", \"2531\", \"2537\", \"2540\", \"2584\", \n  \"X1065\", \"2590\", \"X1071\", \"X1072\", \"X1155\", \"X2014\", \"X27\", \"X35\", \"X5503\", \"X4000\", \"X4009\",\n  \"X4037\", \"X5510\", \"X6003\",\n\n  \"17R20\", \"21R40\", \"21R38\", \"9R40\", \"3R11\", \"41R10\", \"SortdalEbbe1\", \"Hornindal2\", \"8R19\", \"Hornindal1\", \"41R15\",\n  \"1R16\", \"44R7\", \"6R15\", \"7R7\", \"Granvin1\", \"Laerdal2\", \"Voss1\", \"2R23\", \"44R32\", \"19R18\", \"14R30\", \"14R6\",\n  \"27R17\", \"28R31\", \"28R1\", \"28R21\", \"28R33\", \"28R8\",\n  \"45R38\", \"42R31\", \"42R20\", \"45R11\", \"16R23\", \"16R37\", \"46R12\", \"46R37\",\n  \"39R20\", \"40R1\", \"40R20\", \"40R14\",\n  \"38R16\",\n  \"k7R25\", \"Muri\"\n)\n\n# kveiks print sequence\nsort_kveik = c(\n  \"17R20\", \"21R40\", \"21R38\", \"9R40\", \"3R11\", \"41R10\", \"SortdalEbbe1\", \"Hornindal2\", \"8R19\", \"Hornindal1\", \"41R15\",\n  \"1R16\", \"44R7\", \"6R15\", \"7R7\", \"Granvin1\", \"Laerdal2\", \"Voss1\", \"2R23\", \"44R32\", \"19R18\", \"14R30\", \"14R6\",\n  \"27R17\", \"28R31\", \"28R1\", \"28R21\", \"28R33\", \"28R8\",\n  \"45R38\", \"42R31\", \"42R20\", \"45R11\", \"16R23\", \"16R37\", \"46R12\", \"46R37\",\n  \"39R20\", \"40R1\", \"40R20\", \"40R14\",\n  \"38R16\",\n  \"k7R25\", \"Muri\"\n)\n\n#### Gallone + kveiks\n\n# import meanQ\nffiles = list.files(\n  path = \"./data/p02-03/all_GalloneKveiks/\",\n  all.files = FALSE,\n  full.names = TRUE\n)\nflist_all = pophelper::readQ(files = naturalsort::naturalsort(ffiles))\n\n# add yeast names\nyeast_names_all = read.delim(\n  \"./data/p02-03/all_GalloneKveiks.lst\",\n  header = FALSE,\n  stringsAsFactors = FALSE\n)\nyeast_names_all$V1 = stringr::str_remove_all(yeast_names_all$V1, \"_all_sorted_picard_dedup_realigned_recalibrated_all\")\nyeast_names_all$V1 = stringr::str_remove_all(yeast_names_all$V1, \"_all_sorted_picard_dedup_all\")\nyeast_names_all$V1 = stringr::str_remove_all(yeast_names_all$V1, \"Sample_\")\nfor(k in 1:nrow(to_swap)){\n  yeast_names_all$V1 = stringr::str_replace(\n    yeast_names_all$V1,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\nfor(k in 1:length(flist_all)){\n  \n  attributes(flist_all[[k]])$row.names = yeast_names_all$V1\n  flist_all[[k]] = flist_all[[k]][match(sort_all, rownames(flist_all[[k]])), ]\n  \n}\n\nsort_all_print = sort_all\nfor(i in 1:length(sort_all_print)){\n  sort_all_print[i] = ifelse(\n    length(tree_annot[which(tree_annot$Name == stringr::str_replace_all(sort_all_print[i], \"X\", \"x\")), \"Strain\"]) &gt; 0,\n    tree_annot[which(tree_annot$Name == stringr::str_replace_all(sort_all_print[i], \"X\", \"x\")), \"Strain\"],\n    sort_all_print[i]\n  )\n}\n\nfor(k in 2:length(flist_all)){\n  rownames(flist_all[[k]]) = sort_all_print\n}\n\n# get populations annotations\nonelabset_all = tree_annot[which(tree_annot$Name %in% stringr::str_replace_all(yeast_names_all$V1, \"X\", \"x\")), ]\nonelabset_all = onelabset_all[match(stringr::str_replace_all(sort_all, \"X\", \"x\"), onelabset_all$Name), ]\n\n### kveiks only\nffiles = list.files(\n  path = \"./data/p02-03/onlyKveiks/\",\n  all.files = FALSE,\n  full.names = TRUE\n)\nflist_kveik = pophelper::readQ(files = naturalsort::naturalsort(ffiles))\n\n# add yeast names\nyeast_names_kveik = read.delim(\n  \"./data/p02-03/onlyKveiks.lst\",\n  header = FALSE,\n  stringsAsFactors = FALSE\n)\nfor(k in 1:nrow(to_swap)){\n  yeast_names_kveik$V1 = stringr::str_replace(\n    yeast_names_kveik$V1,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\nfor(k in 1:length(flist_kveik)){\n  \n  attributes(flist_kveik[[k]])$row.names = yeast_names_kveik$V1\n  flist_kveik[[k]] = flist_kveik[[k]][match(sort_kveik, rownames(flist_kveik[[k]])), ]\n  \n}\n\n# get populations annotations\nonelabset_kveiks = tree_annot[which(tree_annot$Name %in% yeast_names_kveik$V1), ]\nonelabset_kveiks = onelabset_kveiks[match(sort_kveik, onelabset_kveiks$Name), ]\n\n\n\n#------------------------------------------------------------------------------#\n## 1.2 - Distruct plot Kveiks                                               ####\n\n# plot\nmycolors = c(\"#FFDA00\", \"#FBA01D\", \"#A6611A\", \"#0571B0\", \"#92C5DE\", \"#018571\")\n\nshiny_col = c(\n  \"#1D72F5\",\"#DF0101\",\"#77CE61\", \"#FF9326\",\"#A945FF\",\"#0089B2\",\"#FDF060\",\n  \"#FFA6B2\",\"#BFF217\",\"#60D5FD\",\"#CC1577\",\"#F2B950\",\"#7FB21D\",\"#EC496F\",\n  \"#326397\",\"#B26314\",\"#027368\",\"#A4A4A4\",\"#610B5E\"\n)\n\n\n\nonelabset_kveiks = onelabset_kveiks[, c(\"Origin\"), drop = FALSE]\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"North-West Norway\", \"1. N-W Norway\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"South-West Norway\", \"2. S-W Norway\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Central-Eastern Norway\", \"3. C-E Norway\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Latvia\", \"4. Latvia\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Lithuania\", \"5. Lithuania\")\nonelabset_kveiks$Origin = stringr::str_replace_all(onelabset_kveiks$Origin, \"Russia\", \"6. Russia\")\nonelabset_kveiks[38:44, 1] = \"7. Allochthonous\"\ncolnames(onelabset_kveiks) = c(\"Geo.\")\n\n# sorted\np_kveiks = pophelper::plotQ(\n  pophelper::alignK(flist_kveik[c(4, 5, 6)]), \n  imgoutput = \"join\",\n  returnplot = TRUE, exportplot = FALSE,\n  showtitle = TRUE,\n  showsubtitle = TRUE,\n  titlesize = 24,\n  titlecol = \"black\",\n  subtitlesize = 16, subtitlevjust = -0.5, subtitlespacer = 16,\n  titlelab = \"\",\n  subtitlelab = \"N strains = 44\",\n  height = 15, width = 80, panelspacer = 0.35,\n  barbordercolour = \"white\", barbordersize = 0, basesize = 11,\n  divcol = \"black\", divtype = 1, divsize = 0.25,\n  grplab = onelabset_kveiks,\n  ordergrp = FALSE,\n  #subsetgrp = c(\"Central-E Norway\", \"S-W Norway\", \"N-W Norway\", \"Lithuania\", \"Latvia\", \"Russia\", \"NA farmhouse\"),\n  selgrp = \"Geo.\",\n  grplabsize = 4, linesize = 0.8, pointsize = 4, grplabpos = 0.35,\n  grplabangle = 0, grplabjust = 0.6, grplabheight = 4000,\n  sortind = NA,\n  sharedindlab = TRUE,\n  showindlab = TRUE,\n  useindlab = TRUE,\n  #indlabcol = c(\"black\", \"red\", \"yellow\"),\n  showlegend = FALSE, grpmean = FALSE,\n  splab = paste0(\"K=\", sapply(flist_kveik[c(4, 5, 6)], ncol)), splabsize = 16,\n  showyaxis = TRUE, showticks = TRUE, ticksize = 0.25,\n  clustercol = c(\"#FFDA00\", \"#FBA01D\", \"#0571B0\", \"#018571\", \"#92C5DE\", \"grey\"))\n  #clustercol = shiny_col)\ngrid.arrange(p_kveiks$plot[[1]])\n\n\n\n\n\n\n\n#------------------------------------------------------------------------------#\n## 1.3 - Distruct plot Gallone + Kveiks                                     ####\n\nonelabset_all = onelabset_all[!is.na(onelabset_all$Clade), ]\nonelabset_all = onelabset_all[, \"Clade\", drop = FALSE]\nrownames(onelabset_all) = NULL\nonelabset_all[1:57, ] = \"Beer1\"\nonelabset_all[58:75, ] = \"Mixed\"\nonelabset_all[76:102, ] = \"Wine\"\nonelabset_all[103:123, ] = \"Beer2\"\nonelabset_all[124:131, ] = \"Asia\"\nonelabset_all[132:154, ] = \"Other\"\nonelabset_all[155:192, ] = \"Farmhouse\"\nonelabset_all[193:198, ] = \"Allochthonous\"\n\n\n# sorted\np_all = pophelper::plotQ(\n  pophelper::alignK(flist_all[c(13, 14, 15)]), \n  imgoutput = \"join\",\n  returnplot = TRUE, exportplot = FALSE,\n  showtitle = TRUE,\n  showsubtitle = TRUE,\n  titlesize = 24,\n  titlecol = \"black\",\n  subtitlesize = 16, subtitlevjust = -0.5, subtitlespacer = 16,\n  titlelab = \"\",\n  subtitlelab = \"N strains = 199\",\n  height = 15, width = 80, panelspacer = 0.35,\n  barbordercolour = \"white\", barbordersize = 0, basesize = 11,\n  divcol = \"black\", divtype = 1, divsize = 0.25,\n  grplab = onelabset_all,\n  ordergrp = FALSE,\n  #subsetgrp = c(\"Central-E Norway\", \"S-W Norway\", \"N-W Norway\", \"Lithuania\", \"Latvia\", \"Russia\", \"NA farmhouse\"),\n  selgrp = \"Clade\",\n  grplabsize = 4, linesize = 0.8, pointsize = 4, grplabpos = 0.35,\n  grplabangle = 0, grplabjust = 0.6, grplabheight = 4000,\n  sortind = NA, indlabsize = 7,\n  sharedindlab = TRUE, showindlab = TRUE,\n  useindlab = TRUE,\n  showlegend = FALSE, grpmean = FALSE,\n  splab = paste0(\"K=\", sapply(flist_all[c(13, 14, 15)], ncol)), splabsize = 16,\n  showyaxis = TRUE, showticks = TRUE, ticksize = 0.25,\n  clustercol = shiny_col)\ngrid.arrange(p_all$plot[[1]])\n\n\n\n\n\n\n\n\n\n\n9.1.6 Merge\n\npanel2 = cowplot::plot_grid(\n  div_table_with_out, PCA_all_plot, PCA_kveiks_plot,\n  nrow = 3,\n  rel_heights = c(1.5, 2.5, 2.5),\n  labels = c(\"B\", \"C\", \"D\")\n)\n\nfinal_plot = cowplot::plot_grid(\n    cowplot::plot_grid(\n      p_tree, panel2,\n      nrow = 1,\n      rel_widths = c(0.6, 0.43),\n      labels = c(\"A\", NA)\n    ), p_all$plot[[1]], p_kveiks$plot[[1]],\n  nrow = 3,\n  rel_heights = c(5, 2.75, 2.25),\n  labels = c(NA, \"E\", \"F\")\n)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Figure 3</span>"
    ]
  },
  {
    "objectID": "p02-03-Figure3.html#figure-3-plot",
    "href": "p02-03-Figure3.html#figure-3-plot",
    "title": "9  Figure 3",
    "section": "9.2 Figure 3 plot",
    "text": "9.2 Figure 3 plot\n\n\n\n\n\nFigure 3: Genomics analyses of farmhouse yeast.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Figure 3</span>"
    ]
  },
  {
    "objectID": "p02-03-Figure3.html#session-information",
    "href": "p02-03-Figure3.html#session-information",
    "title": "9  Figure 3",
    "section": "9.3 Session Information",
    "text": "9.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] treeio_1.26.0      stringr_1.5.1      reshape_0.8.10     RColorBrewer_1.1-3\n [5] pophelper_2.3.1    naturalsort_0.1.3  gridExtra_2.3      ggtreeExtra_1.12.0\n [9] ggtree_3.10.1      ggplot2_3.5.2      ggnewscale_0.5.2   aplot_0.2.8       \n[13] ape_5.8-1         \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6        xfun_0.52           htmlwidgets_1.6.4  \n [4] ggrepel_0.9.6       rstatix_0.7.2       lattice_0.22-5     \n [7] vctrs_0.6.5         tools_4.3.3         generics_0.1.4     \n[10] yulab.utils_0.2.0   parallel_4.3.3      tibble_3.3.0       \n[13] pkgconfig_2.0.3     ggplotify_0.1.2     lifecycle_1.0.4    \n[16] compiler_4.3.3      farver_2.1.2        combinat_0.0-8     \n[19] carData_3.0-5       ggfun_0.2.0         htmltools_0.5.8.1  \n[22] yaml_2.3.10         lazyeval_0.2.2      Formula_1.2-5      \n[25] pillar_1.11.0       car_3.1-3           ggpubr_0.6.1       \n[28] tidyr_1.3.1         abind_1.4-8         nlme_3.1-164       \n[31] tidyselect_1.2.1    digest_0.6.37       stringi_1.8.7      \n[34] dplyr_1.1.4         purrr_1.1.0         labeling_0.4.3     \n[37] cowplot_1.2.0       fastmap_1.2.0       cli_3.6.5          \n[40] magrittr_2.0.3      patchwork_1.3.1     label.switching_1.8\n[43] dichromat_2.0-0.1   broom_1.0.9         withr_3.0.2        \n[46] scales_1.4.0        backports_1.5.0     rmarkdown_2.29     \n[49] ggsignif_0.6.4      evaluate_1.0.4      lpSolve_5.6.23     \n[52] knitr_1.50          gridGraphics_0.5-1  rlang_1.1.6        \n[55] Rcpp_1.1.0          glue_1.8.0          tidytree_0.4.6     \n[58] jsonlite_2.0.0      R6_2.6.1            plyr_1.8.9         \n[61] fs_1.6.6",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Figure 3</span>"
    ]
  },
  {
    "objectID": "p02-04-Figure4.html",
    "href": "p02-04-Figure4.html",
    "title": "10  Figure 4",
    "section": "",
    "text": "10.1 Figure 4 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Figure 4</span>"
    ]
  },
  {
    "objectID": "p02-04-Figure4.html#figure-4-code",
    "href": "p02-04-Figure4.html#figure-4-code",
    "title": "10  Figure 4",
    "section": "",
    "text": "10.1.1 Panel A code\n\n# import dataset\nkveik_het = read.delim(\"./data/p02-04/all_plusKV.heterozygous.positions.txt\", header = TRUE)\n\n# sort \nkveik_het$Pop = factor(kveik_het$Pop,\n                       levels = c(\"Farmhouse\", \"Asian\", \"Beer1\", \"Beer2\", \"Bread\",\n                                  \"Mixed\", \"Mosaic\", \"Sake\", \"Wild\", \"Wine\"))\nkveik_het$Pop = relevel(kveik_het$Pop, \"Farmhouse\")\nkveik_het$Geographic.origin = ifelse(\n  kveik_het$Geographic.origin == \"Central-E Norway\",\n  \"C-E Norway\",\n  kveik_het$Geographic.origin\n)\n\ncolnames(kveik_het) = c(\"ID\", \"Pop\", \"HET_CT\", \"Subpopulation\", \"Geographic.origin\")\n\n# mapping swap_yeasts\nto_swap = data.frame(\n  old_name = c(\"21P1\", \"17P5\", \"45P5\", \"28P1\", \"28P6\"),\n  new_name = c(\"21R40\", \"17R20\", \"45R38\", \"28R31\", \"28R1\")\n)\n\n# import final clade list\nfinal_clades = read.table(\n  \"./data/p02-04/final_clades_for_pub.txt\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p02-04/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot_raw$Strain = stringr::str_replace(\n    tree_annot_raw$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot_raw$Name = stringr::str_replace(\n    tree_annot_raw$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot_raw %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$niche1 == \"farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\ntree_annot = tree_annot[, -which(colnames(tree_annot) %in% c(\"niche1\", \"niche2\", \"niche3\", \"group\", \"seq_name\", \"Mosaic\"))]\ncolnames(tree_annot) = c(\"Strain\", \"ID\", \"Clade\")\ntree_annot$ID = stringr::str_replace_all(tree_annot$ID, \"x\", \"X\")\n\n\n# merge\nkveik_het = merge(kveik_het, tree_annot, by = \"ID\")\nkveik_het = kveik_het[, which(colnames(kveik_het) %in% c(\"ID\", \"HET_CT\", \"Pop\", \"Culture\", \"Subpopulation\", \"Geographic.origin\", \"Clade\"))]\n\n\n\n#------------------------------------------------------------------------------#\n## 2.2 - Heterozigous position - all                                        ####\n\n# t-test\ntests = kveik_het %&gt;%\n  dplyr::filter(!(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\"))) %&gt;%\n  rstatix::t_test(HET_CT ~ Clade, ref.group = \"Farmhouse\")\n\nkveik_het$Clade = factor(kveik_het$Clade,\n  levels = c(\"Farmhouse\", \"Asia\", \"Beer1\", \"Beer2\", \"Mixed\", \"Other\", \"Wine\"))\nkveik_het$Clade = relevel(kveik_het$Clade, \"Farmhouse\")\n\n# plot\np_het = ggplot(kveik_het, aes(x = Clade, y = HET_CT)) +\n  geom_violin(aes(fill = Clade), alpha = 0.2,\n              scale = \"width\",\n              trim = FALSE) +\n  geom_point(data = ~dplyr::filter(.x, !(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\"))),\n             aes(fill = Clade),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  stat_summary(fun = \"median\", colour = \"red\", geom = \"crossbar\") +\n  geom_vline(xintercept = 1.5) +\n  geom_point(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n             aes(fill = \"red\"),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  geom_text(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n            aes(label = as.character(ID)),\n            hjust = 0, vjust = 0, color = \"red\") +\n  scale_fill_manual(values = c(\"#2297e6\", \"#df536b\", \"#61d04f\", \"#28e2e5\", \"#cd0bbc\", \"grey75\", \"#bcf60c\",\n                               \"red\")) +\n  ggpubr::stat_compare_means(method = \"anova\", label.x = 1.1, label.y = 98000) +\n  annotate(\"text\", x = 2,  y = 95000, label = c(tests$p.adj.signif)[[1]]) +\n  annotate(\"text\", x = 3,  y = 95000, label = c(tests$p.adj.signif)[[2]]) +\n  annotate(\"text\", x = 4,  y = 95000, label = c(tests$p.adj.signif)[[3]]) +\n  annotate(\"text\", x = 5,  y = 95000, label = c(tests$p.adj.signif)[[4]]) +\n  annotate(\"text\", x = 6,  y = 95000, label = c(tests$p.adj.signif)[[5]]) +\n  annotate(\"text\", x = 7,  y = 95000, label = c(tests$p.adj.signif)[[6]]) +\n  scale_y_continuous(labels = scales::comma,\n                     limits = c(1, 100000)) +\n  labs(title = \"Heterozygosity in yeast populations\",\n       x = \"Clade / Niche\",\n       y = \"# heterozygous\\npositions\") +\n  theme(title = element_blank(),\n        axis.text.x = element_text(hjust = 0.95, angle = 60, size = 16),\n        axis.text.y = element_text(size = 16),\n        axis.title = element_text(size = 18),\n        legend.position = \"none\",\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(colour = \"grey75\"),\n        panel.grid.minor.y = element_blank())\n\n\n\n#------------------------------------------------------------------------------#\n## 2.3 - Heterozigous position - kveiks                                     ####\n\n# t-test\nkveik_comp = kveik_het[which(kveik_het$Pop == \"Farmhouse\" & kveik_het$Subpopulation != \"Beer1\"), ]\nkveik_comp$Subpopulation = \"All Farmhouse\"\nkveik_comp$Geographic.origin = \"All Farmhouse\"\n#kveik_comp$Culture = \"All Farmhouse\"\nkveik_comp = rbind(kveik_comp, kveik_het[which(kveik_het$Pop == \"Farmhouse\" & kveik_het$Subpopulation != \"Beer1\"), ])\n\ntests_geo = kveik_comp %&gt;% \n  dplyr::filter(!(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\", \"39R20\"))) %&gt;%\n  rstatix::t_test(HET_CT ~ Geographic.origin, ref.group = \"All Farmhouse\")\n\ntests_geo[6, ] = list(\"HET_CT\", \"All Farmhouse\", \"Russia\", 37, 1, 0, 0, 1, 1, \"ns\")\n\n# plot\nkveik_comp = kveik_het[which(kveik_het$Pop == \"Farmhouse\" & kveik_het$Subpopulation != \"Beer1\"), ]\n\np_het2 = ggplot(kveik_comp, aes(x = Geographic.origin, y = HET_CT)) +\n  geom_violin(aes(fill = Geographic.origin), alpha = 0.2,\n              scale = \"width\",\n              trim = FALSE) +\n  geom_point(data = ~dplyr::filter(.x, !(ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\"))),\n             aes(fill = Geographic.origin),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  geom_point(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n             aes(fill = \"red\"),\n             position = position_jitter(width = 0.25),\n             shape = 21, \n             alpha = 0.375,\n             size = 3) +\n  stat_summary(fun = \"median\", colour = \"red\", geom = \"crossbar\") +\n  geom_text(data = ~dplyr::filter(.x, ID %in% c(\"40R20\", \"40R1\", \"40R14\", \"38R16\", \"k7R25\", \"Muri\")),\n            aes(label = as.character(ID)),\n            hjust = 0, vjust = 0, color = \"red\") +\n  scale_fill_manual(values = c(\"green\", \"#FFDA00\", \"orange\", \"#0571B0\", \"red\", \"#A6611A\", \"#92C5DE\")) +\n  scale_x_discrete(labels = scales::label_wrap(10)) +\n  scale_y_continuous(labels = scales::comma,\n                     limits = c(1, 100000)) +\n  ggpubr::stat_compare_means(method = \"anova\", label.x = 1.1, label.y = 98000) +\n  annotate(\"text\", x = 1,  y = 95000, label = c(tests_geo$p.adj.signif)[[1]]) +\n  annotate(\"text\", x = 2,  y = 95000, label = c(tests_geo$p.adj.signif)[[2]]) +\n  annotate(\"text\", x = 3,  y = 95000, label = c(tests_geo$p.adj.signif)[[3]]) +\n  annotate(\"text\", x = 4,  y = 95000, label = c(tests_geo$p.adj.signif)[[4]]) +\n  annotate(\"text\", x = 5,  y = 95000, label = c(tests_geo$p.adj.signif)[[5]]) +\n  annotate(\"text\", x = 6,  y = 95000, label = c(tests_geo$p.adj.signif)[[6]]) +\n  labs(x = \"Geographic origin\") +\n  theme(title = element_blank(),\n        axis.text.x = element_text(hjust = 0.95, angle = 60, size = 16),\n        axis.text.y = element_blank(),\n        axis.title.x = element_text(size = 18),\n        axis.title.y = element_blank(),\n        legend.position = \"none\",\n        panel.background = element_rect(colour = \"black\", fill = NA),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(colour = \"grey75\"),\n        panel.grid.minor.y = element_blank())\n\n\n\n10.1.2 Panel B code\n\n# load the tree file to make dendrogram\ntree = read.tree(\"./data/p02-04/genetrees.output.BS.best.2025.tre\")\n\n# Define the specific samples to keep\nselected_samples = c(\n  \"1R16\", \"2R23\", \"3R11\", \"6R15\", \"k7R25\", \"7R7\", \"8R19\", \"9R40\", \"14R30\", \"14R6\", \n  \"16R23\", \"16R37\", \"17P5\", \"19R18\", \"21P1\", \"21R38\", \"27R17\", \"28P1\", \"28P6\", \"28R21\", \n  \"28R33\", \"28R8\", \"38R16\", \"39R20\", \"40R1\", \"40R14\", \"40R20\", \"41R10\", \"41R15\", \"42R20\", \n  \"42R31\", \"44R32\", \"44R7\", \"45P5\", \"45R11\", \"46R12\", \"46R37\", \"Hornindal1\", \"Hornindal2\",\n  \"Laerdal2\", \"Muri\" , \"SortdalEbbe1\", \"Voss1\", \"Granvin1\", \"Skud\"\n)\n\n# Prune the tree to keep only the selected samples\npruned_tree = keep.tip(tree, selected_samples)\n# Reroot the pruned tree with \"Skud\" as outgroup\npruned_tree = root(pruned_tree, outgroup = \"Skud\", resolve.root = FALSE)\n# Prune the pruned tree to remove Skud \npruned_tree = drop.tip(pruned_tree, \"Skud\")\n# dendrogram plot\np_tree = # Plot the pruned tree\n  ggtree(pruned_tree) + \n  theme(plot.margin = margin(10, 10, 10, 10)) + \n  xlim(0, 15) \n# extract tip order\ntip_order = p_tree$data %&gt;% \n  filter(isTip) %&gt;%           # Select only tip labels\n  arrange(y) %&gt;%              # Arrange by y-axis position\n  pull(label)\n\n# import table\nheatfile = read.delim(\"./data/p02-04/Vikings.Asco.HGT.heatmap.tab\", header = FALSE)\nheatfile$V2 = stringr::str_replace_all(heatfile$V2, \"x\", \"X\")\nheatfile = heatfile[which(heatfile$V2 %in% c(\n  \"Voss1\", \"SortdalEbbe1\", \"Muri\", \"Laerdal2\", \"k7R25\", \"Hornindal2\", \"Hornindal1\",\n  \"Granvin1\", \"9R40\", \"8R19\", \"7R7\", \"6R15\", \"46R37\", \"46R12\", \"45R11\", \"45P5\", \"44R7\", \"44R32\",\n  \"42R31\", \"42R20\", \"41R15\", \"41R10\", \"40R20\", \"40R1\", \"40R14\", \"3R11\", \"39R20\", \"38R16\", \"2R23\",\n  \"28R8\", \"28R33\", \"28R21\", \"28P6\", \"28P1\", \"27R17\", \"21R38\", \"21P1\", \"1R16\", \"19R18\", \"17P5\",\n  \"16R37\", \"16R23\", \"14R6\", \"14R30\")\n  ), ]\nfor(k in 1:nrow(to_swap)){\n  heatfile$V2 = stringr::str_replace_all(\n    heatfile$V2,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n    )\n  tip_order = stringr::str_replace_all(\n    tip_order,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\n# relevel\nheatfile$V2 = factor(heatfile$V2, levels = tip_order)\n# drop OG for plotting purposes\nheatfile = heatfile %&gt;%\n  dplyr::filter(!(V1 %in% c(\n    \"OG0000037\", \"OG0000038\", \"OG0000039\", \"OG0000040\", \"OG0000041\", \"OG0000042\",\n    \"OG0000043\", \"OG0000044\", \"OG0000045\", \"OG0000046\", \"OG0000047\", \"OG0000048\"\n  )))\n\n# set color labels\ncol_label = rev(\n  c(\"#0571B0\", rep(\"#92C5DE\", 5), \"#0571B0\", rep(\"#92C5DE\", 3),\n    rep(\"#0571B0\", 9), rep(\"#92C5DE\", 4), rep(\"#FFDA00\", 4),\n    rep(\"#FBA01D\", 3), rep(\"#008470\", 6), rep(\"grey75\", 6),\n    \"#A6611A\", \"#FBA01D\")\n)\n\n# prepare heatmap\np_HGT = ggplot(heatfile) +\n  geom_tile(aes(x = V1, y = V2, fill = V3), color = \"grey75\") +\n  scale_fill_gradientn(na.value = \"white\", limits = c(0, 2),\n                       colours = c(\"white\", \"steelblue\", \"steelblue\"),\n                       breaks = c(0, 1, 2)) +\n  coord_cartesian(expand = FALSE) +\n  scale_y_discrete(position = \"right\") +\n  labs(fill = \"Gene presence\",\n       y = \"Strain\",\n       x = \"Orthologous groups\") +\n  theme(axis.title.x = element_text(size = 16),\n        axis.title.y = element_blank(),\n        axis.text.x = element_text(size = 18, angle = 90, hjust = 0.95, vjust = 0.5),\n        axis.text.y = element_text(size = 18, colour = col_label),\n        legend.position = \"none\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = 0.75)) +\n  annotate(xmin = 25.5, xmax = 32.5, \n           ymin = -Inf, ymax = Inf, \n           geom = \"rect\", alpha = 0,\n           colour = \"red\", linewidth = 1.5)\n\n\n\n10.1.3 Panel C code\n\n# read best hits table\nmatrix.d = read.delim(\"data/p02-04/Vikings.Asco.HGT.besthits.tab\", header = FALSE, sep = \"\\t\")\n\np_HGT2 = ggpubr::ggtexttable(matrix.d, rows = NULL, theme = ggpubr::ttheme(\"blank\")) %&gt;%\n  ggpubr::tab_add_hline(at.row = 1:2, row.side = \"top\", linewidth = 2)\n\n\n# genome seq\nyeast_seqs = utils::read.delim(\"data/p02-04/Vikings.Asco.HCT.seqs.txt\", header = TRUE, stringsAsFactors = FALSE) %&gt;%\n  dplyr::mutate(seq_id = stringr::str_replace_all(seq_id, \"\\\\\\\\n\", \"\\n\"))\nyeast_genes = utils::read.delim(\"data/p02-04/Vikings.Asco.HCT.genes.txt\", header = TRUE, stringsAsFactors = FALSE) %&gt;%\n  dplyr::mutate(seq_id = stringr::str_replace_all(seq_id, \"\\\\\\\\n\", \"\\n\"))\nyeast_ava = utils::read.delim(\"data/p02-04/Vikings.Asco.HCT.ava.txt\", header = TRUE, stringsAsFactors = FALSE) %&gt;%\n  dplyr::mutate(seq_id = stringr::str_replace_all(seq_id, \"\\\\\\\\n\", \"\\n\")) %&gt;%\n  dplyr::mutate(seq_id2 = stringr::str_replace_all(seq_id2, \"\\\\\\\\n\", \"\\n\"))\n\np_HGT3 = gggenomes::gggenomes(seqs = yeast_seqs, genes = yeast_genes, links = yeast_ava) +\n  geom_seq(size = 1) +\n  geom_bin_label(size = 4) +\n  geom_gene(aes(fill = name)) +\n  scale_fill_brewer(\"HGT genes\", palette = \"Set3\") +\n  geom_link(alpha = 0.25, show.legend = FALSE)\n\n\n\n10.1.4 Panel D code\n\nlibrary(ape)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(dplyr)\n\n# load the tree file to make dendrogram\ntree &lt;- read.tree(\"genetrees.output.BS.best.tre\")\n\n# Define the specific samples to keep\nselected_samples &lt;- c(\"1R16\" \n                      ,\"2R23\" \n                      ,\"3R11\" \n                      ,\"6R15\" \n                      ,\"k7R25\" \n                      ,\"7R7\" \n                      ,\"8R19\" \n                      ,\"9R40\" \n                      ,\"14R30\" \n                      ,\"14R6\" \n                      ,\"16R23\" \n                      ,\"16R37\" \n                      ,\"17P5\" \n                      ,\"19R18\" \n                      ,\"21P1\" \n                      ,\"21R38\" \n                      ,\"27R17\" \n                      ,\"28P1\" \n                      ,\"28P6\" \n                      ,\"28R21\" \n                      ,\"28R33\" \n                      ,\"28R8\" \n                      ,\"38R16\" \n                      ,\"39R20\" \n                      ,\"40R1\" \n                      ,\"40R14\" \n                      ,\"40R20\" \n                      ,\"41R10\" \n                      ,\"41R15\" \n                      ,\"42R20\" \n                      ,\"42R31\" \n                      ,\"44R32\" \n                      ,\"44R7\" \n                      ,\"45P5\" \n                      ,\"45R11\" \n                      ,\"46R12\" \n                      ,\"46R37\" \n                      ,\"Hornindal1\" \n                      ,\"Hornindal2\" \n                      ,\"Laerdal2\" \n                      ,\"Muri\" \n                      ,\"SortdalEbbe1\",\n                      \"Skud\",\n                      \"x1111\",\n                      \"x1011\",\n                      \"x1030\",\n                      \"x1129\",\n                      \"x1046\"\n)\n\n#where are voss1 and granvin1?\n\n# Prune the tree to keep only the selected samples\npruned_tree &lt;- keep.tip(tree, selected_samples)\n# Reroot the pruned tree with \"Skud\" as outgroup\npruned_tree &lt;- root(pruned_tree, outgroup = \"Skud\", resolve.root = FALSE)\n# Prune the pruned tree to remove Skud \npruned_tree &lt;- drop.tip(pruned_tree, \"Skud\")\n# dendrogram plot\np0 &lt;- # Plot the pruned tree\n  ggtree(pruned_tree) + \n  theme(plot.margin = margin(10, 10, 10, 10)) + \n  xlim(0, 15)+\n  coord_flip()\n# extract tip order\ntip_order &lt;- p0$data %&gt;% \n  filter(isTip) %&gt;%           # Select only tip labels\n  arrange(y) %&gt;%              # Arrange by y-axis position\n  pull(label)\n\n# load genotype data\nPOFdata &lt;- read.csv('Mutations summary for R FARMHOUSE 3.csv')\n# add levels to V2 to match dendrogram\nPOFdata$V2 = factor(POFdata$V2, levels = tip_order)\n\n# where are granvin 1 and voss 1 supposed to be in the tree???\n\n# Remove all rows with any NA in the dataframe, including in V2\nPOFdata &lt;- na.omit(POFdata)\n# add facor levels to genes/phenotype\nPOFdata$V4 = factor(POFdata$V4, \n           levels = c(\"Phenotype\", \"FDC\",\"PAD\"))\nPOFcolors &lt;- c('0' = \"grey\", '1' = \"yellow\", '2' = \"red\")\n\n\n####################################################################################################\n# Plotting\n####################################################################################################\n\n\np1 &lt;- ggplot(POFdata[POFdata$V4 == 'Phenotype',]) +\n geom_tile(aes(x = V2, y = V1, fill = factor(V3)), color = \"white\", lwd = 0.5) +\n scale_y_discrete(labels = c('4VG'), expand = c(0,0))+\n scale_x_discrete(expand = c(0,0))+\n scale_fill_manual(values = POFcolors)+\n theme(plot.title = element_text(size = 24, hjust = 0.5),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.length.y = unit(1, \"lines\"),\n    axis.text.x = element_blank(),\n    legend.position = \"none\",\n    panel.background = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill = NA),\n    axis.title = element_blank(),\n    plot.margin = margin(0.1,0.1,0.1,0.1, 'mm'))+\n coord_fixed()\n\np2 &lt;- ggplot(POFdata[POFdata$V4 == 'PAD',]) +\n geom_tile(aes(x = V2, y = V1, fill = factor(V3)), color = \"white\", lwd = 0.5) +\n scale_y_discrete(labels = c('W102*'), expand = c(0,0))+\n scale_x_discrete(expand = c(0,0))+\n scale_fill_manual(values = POFcolors)+\n theme(plot.title = element_text(size = 24, hjust = 0.5),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.length.y = unit(1, \"lines\"),\n    axis.text.x = element_blank(),\n    legend.position = \"none\",\n    panel.background = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill = NA),\n    axis.title = element_blank(),\n    plot.margin = margin(0.1,0.1,0.1,0.1, 'mm'))+\n coord_fixed()\n\n\np3 &lt;- ggplot(POFdata[POFdata$V4 == 'FDC',]) +\n geom_tile(aes(x = V2, y = V1, fill = factor(V3)), color = \"white\", lwd = 0.5) +\n scale_y_discrete(labels = c(\"K78*\", \"Q154*\", \"R309*\", \"W168fs\", \"W497*\"), expand = c(0,0))+\n scale_x_discrete(expand = c(0,0))+\n scale_fill_manual(values = POFcolors)+\n theme(plot.title = element_text(size = 24, hjust = 0.5),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.length.y = unit(1, \"lines\"),\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(hjust = 1),\n    legend.position = \"none\",\n    panel.background = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill = NA),\n    axis.title = element_blank(),\n    plot.margin = margin(0.1,0.1,0.1,0.1, 'mm'))+\n coord_fixed()\n\n# Define custom colors for the regions\nRegionColors &lt;- c(\n  'North-West Norway' = '#0571B0',\n  'South-West Norway' = '#92C5DE',\n  'Central-Eastern Norway' = '#018571',\n  'South-Eastern Norway' = '#80CDC1',\n  'Latvia' = '#FFDA00',\n  'Lithuania' = '#FBA01D',\n  'Russia' = '#A6611A',\n  'beer1' = '#FF0000',\n  'beer2' = 'limegreen'\n)\n\np4 &lt;- ggplot(POFdata[POFdata$V4 == 'Phenotype',]) +\n  geom_tile(aes(x = V2, y = V1, fill = factor(V5)), color = \"white\", lwd = 0.5) +\n  scale_y_discrete(labels = c('Region'), expand = c(0, 0)) +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_fill_manual(values = RegionColors) +\n  theme(plot.title = element_text(size = 24, hjust = 0.5),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.ticks.length.y = unit(1, \"lines\"),\n        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n        axis.text.y = element_text(hjust = 1),\n        legend.position = \"none\",\n        panel.background = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill = NA),\n        axis.title = element_blank(),\n        plot.margin = margin(0.1,0.1,0.1,0.1, 'mm'))+\n  coord_fixed()\n\n\n\ncombined_plot &lt;- p1 + p2 +p3 + p4 + p0 + \n  plot_layout(ncol = 1, widths = c(1))\n\n\nplot(combined_plot)\n\nggsave(\"POF plot 4.pdf\", plot = combined_plot, height = 5, width = 6)\n\n\n# get panel D\npanel_d = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"./data/p02-04/Figure 6B - POF.svg\"),\n    width = ggplot2::unit(1, \"npc\"),\n    height = ggplot2::unit(1, \"npc\")),\n  -Inf, Inf, -Inf, Inf)\n\n\n\n10.1.5 Merge\n\nmy_plot1 = ggpubr::ggarrange(\n  p_het, p_het2,\n  ncol = 2, nrow = 1,\n  align = \"h\",\n  widths = c(1, 0.5)\n)\n\nmy_plot2 = ggpubr::ggarrange(\n  ggpubr::ggarrange(\n    p_tree, p_HGT,\n    align = \"h\", nrow = 1,\n    widths = c(0.15, 0.9)\n  ), ggpubr::ggarrange(\n    p_HGT2, p_HGT3,\n    ncol = 1, nrow = 2,\n    heights = c(0.4, 0.6)),\n  ncol = 2, nrow = 1,\n  widths = c(0.8, 1.2)\n)\n\nfinal_plot = cowplot::plot_grid(\n  my_plot1, my_plot2, panel_d,\n  nrow = 3,\n  rel_heights = c(0.75, 2, 1),\n  labels = \"AUTO\"\n)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Figure 4</span>"
    ]
  },
  {
    "objectID": "p02-04-Figure4.html#figure-4-plot",
    "href": "p02-04-Figure4.html#figure-4-plot",
    "title": "10  Figure 4",
    "section": "10.2 Figure 4 plot",
    "text": "10.2 Figure 4 plot\n\n\n\n\n\nFigure 4: Genomics analyses of farmhouse yeast.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Figure 4</span>"
    ]
  },
  {
    "objectID": "p02-04-Figure4.html#session-information",
    "href": "p02-04-Figure4.html#session-information",
    "title": "10  Figure 4",
    "section": "10.3 Session Information",
    "text": "10.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] treeio_1.26.0       stringr_1.5.1       rstatix_0.7.2      \n [4] reshape_0.8.10      RColorBrewer_1.1-3  plyr_1.8.9         \n [7] naturalsort_0.1.3   ggtreeExtra_1.12.0  ggtree_3.10.1      \n[10] gggenomes_1.0.1     ggh4x_0.3.1         ggplot2_3.5.2      \n[13] ggnewscale_0.5.2    gridExtra_2.3       dplyr_1.1.4        \n[16] BiocManager_1.30.26 aplot_0.2.8         ape_5.8-1          \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6       xfun_0.52          htmlwidgets_1.6.4  lattice_0.22-5    \n [5] tzdb_0.5.0         vctrs_0.6.5        tools_4.3.3        generics_0.1.4    \n [9] yulab.utils_0.2.0  parallel_4.3.3     tibble_3.3.0       pkgconfig_2.0.3   \n[13] ggplotify_0.1.2    lifecycle_1.0.4    compiler_4.3.3     farver_2.1.2      \n[17] carData_3.0-5      ggfun_0.2.0        htmltools_0.5.8.1  yaml_2.3.10       \n[21] lazyeval_0.2.2     Formula_1.2-5      pillar_1.11.0      car_3.1-3         \n[25] ggpubr_0.6.1       tidyr_1.3.1        ellipsis_0.3.2     magick_2.8.7      \n[29] abind_1.4-8        nlme_3.1-164       tidyselect_1.2.1   digest_0.6.37     \n[33] stringi_1.8.7      purrr_1.1.0        labeling_0.4.3     cowplot_1.2.0     \n[37] fastmap_1.2.0      colorspace_2.1-1   cli_3.6.5          magrittr_2.0.3    \n[41] patchwork_1.3.1    dichromat_2.0-0.1  broom_1.0.9        readr_2.1.5       \n[45] withr_3.0.2        scales_1.4.0       backports_1.5.0    rmarkdown_2.29    \n[49] ggsignif_0.6.4     hms_1.1.3          evaluate_1.0.4     knitr_1.50        \n[53] gridGraphics_0.5-1 rlang_1.1.6        Rcpp_1.1.0         glue_1.8.0        \n[57] tidytree_0.4.6     jsonlite_2.0.0     R6_2.6.1           fs_1.6.6",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Figure 4</span>"
    ]
  },
  {
    "objectID": "p02-05-Figure5.html",
    "href": "p02-05-Figure5.html",
    "title": "11  Figure 5",
    "section": "",
    "text": "11.1 Figure 5 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Figure 5</span>"
    ]
  },
  {
    "objectID": "p02-05-Figure5.html#figure-5-code",
    "href": "p02-05-Figure5.html#figure-5-code",
    "title": "11  Figure 5",
    "section": "",
    "text": "11.1.1 Panel A code\n\n# import and prep data\nraw_data = read.delim(\"./data/p02-05/grouped phenotype data with annotations.csv\", sep = \",\", header = TRUE)\n\nraw_data = raw_data %&gt;%\n  dplyr::filter(group != \"WL004\") %&gt;%\n  dplyr::filter(group != \"LA001\")\nraw_data$Industry = ifelse(\n  raw_data$region %in% c(\"South-West Norway\", \"Lithuania\", \"North-West Norway\", \"Russia\",\n                         \"Central-Eastern Norway\", \"Latvia\", \"South-Eastern Norway\"),\n  \"Farmhouse\",\n  raw_data$region\n)\nraw_data$Industry = ifelse(\n  raw_data$Outside == \"yes\",\n  \"Allochthonous\\nyeast\",\n  raw_data$Industry\n)\nraw_data$region = ifelse(\n  raw_data$Industry == \"Farmhouse\",\n  raw_data$region,\n  \"NA\"\n)\n\nraw_data$region = ifelse(\n  raw_data$culture %in% c(\"7\", \"38\"),\n  \"South-West Norway\",\n  ifelse(\n    raw_data$culture == \"40\",\n    \"Russia\",\n    ifelse(\n      raw_data$culture == \"45\",\n      \"Latvia\",\n      ifelse(\n        raw_data$culture == \"57\",\n        \"Central-Eastern Norway\",\n        raw_data$region\n      )\n    )\n  )\n)\n\n\nraw_data = raw_data %&gt;%\n  dplyr::mutate(region = dplyr::case_when(\n    region == \"South-West Norway\" ~ \"SW Norway\",\n    region == \"North-West Norway\" ~ \"NW Norway\",\n    region == \"Central-Eastern Norway\" ~ \"CE Norway\",\n    region == \"South-Eastern Norway\" ~ \"SE Norway\",\n    .default = as.character(region)\n  ))\n\nmetadata = raw_data %&gt;%\n  dplyr::select(c(\"group\", \"culture\", \"region\", \"Industry\", \"Outside\", \"method\"))\nrownames(metadata) = metadata$group\n\nrownames(raw_data) = raw_data$group\ncounts = raw_data %&gt;%\n  dplyr::select(-c(\"group\", \"culture\", \"region\", \"Industry\", \"Outside\", \"method\"))\n\n# import final clade list\nfinal_clades = read.table(\n  \"data/p02-05/final_clades_for_pub.txt\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n# replace\nfor(i in 1:nrow(final_clades)){\n\n  strain = final_clades[i, \"Strain\"]\n  clade = final_clades[i, \"Clade\"]\n  metadata[which(metadata$group == strain), \"Industry\"] = clade\n\n}\nmetadata$Industry = ifelse(metadata$Industry == \"Beer\", \"Beer2\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI001\", \"Asia\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BR003\", \"Mixed\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI002\", \"Other\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI004\", \"Asia\", metadata$Industry)\nmetadata$Industry = ifelse(metadata$group == \"BI005\", \"Other\", metadata$Industry)\n\n\n## background: no farmhouse\nmetadata_no_farm = metadata[which(metadata$Industry != \"Farmhouse\"), ]\ncounts_no_farm = counts[which(rownames(counts) %in% metadata_no_farm$group), ]\n\n## farmhouse focus\nmetadata_farm_only = metadata[which(metadata$Industry %in% c(\"Farmhouse\", \"Allochthonous\\nyeast\")), ]\ncolnames(metadata_farm_only)[5] = \"Allochthonous\"\nmetadata_farm_only$Allochthonous = ifelse(metadata_farm_only$Allochthonous == \"yes\", \"yes\", \"no\")\ncounts_farm_only = counts[which(rownames(counts) %in% metadata_farm_only$group), ]\n\n\n# sPLS-DA\ncounts_splsda = sapply(\n  counts,\n  function(counts) (counts-mean(counts))/stats::sd(counts)\n)\n\n# initial sPLS_DA\ninitial_splsda = mixOmics::splsda(\n  counts_splsda,\n  factor(metadata$Industry),\n  ncomp = 10\n) # set ncomp to 10 for performance assessment later\n\nmetadata$mock = \"mock\"\np_all_spls = mixOmics::plotIndiv(\n  initial_splsda,\n  comp = c(1, 2),\n  group = factor(metadata$Industry),\n  pch = factor(metadata$mock),\n  ind.names = FALSE,\n  ellipse = TRUE,\n  legend = TRUE,\n  legend.position = \"left\",\n  legend.title = \"Clade\",\n  title = \"\",\n  col = c(\"red\", \"#df536b\", \"#61d04f\", \"#28e2e5\", \"#2297e6\", \"#cd0bbc\", \"grey75\", \"#bcf60c\")\n)\n\n\n\n\n\n\n\np_all_spls = p_all_spls$graph + theme(strip.background = element_blank())\n\n\n\n11.1.2 Panel B code\n\n# initial sPLS_DA\ninitial_splsda = mixOmics::splsda(\n  counts_farm_only,\n  factor(metadata_farm_only$region),\n  ncomp = 10\n) # set ncomp to 10 for performance assessment later\n\np_farm_spls = mixOmics::plotIndiv(\n  initial_splsda,\n  comp = c(1, 2),\n  group = factor(metadata_farm_only$region),\n  pch = factor(metadata_farm_only$Allochthonous),\n  ind.names = FALSE,\n  ellipse = TRUE,\n  legend = TRUE,\n  legend.position = \"left\",\n  legend.title = \"region\",\n  legend.title.pch = \"Allochthnous\\nyeast\",\n  title = \"\",\n  col = c('#0571B0', '#FBA01D',\"#FFDA00\", \"steelblue\", '#A6611A',\"#008470\",'#92C5DE')\n)\n\n\n\n\n\n\n\np_farm_spls = p_farm_spls$graph + theme(strip.background = element_blank())\n\n\n\n11.1.3 Panel C code\n\n# Load the dataset\nmydata &lt;- read.csv('./data/p02-05/grouped phenotype data with annotations.csv')\n\n# Define region colors\nRegionColors &lt;- c(\n  'North-West Norway' = '#0571B0',\n  'South-West Norway' = '#92C5DE',\n  'Central-Eastern Norway' = '#018571',\n  'South-Eastern Norway' = '#80CDC1',\n  'Latvia' = '#FFDA00',\n  'Lithuania' = '#FBA01D',\n  'Russia' = '#A6611A',\n  'Beer' = '#FF0000',\n  'Wine' = 'limegreen',\n  'Outside' = '#000000'  # Black for the Outside group\n)\n\n# Create a new grouping variable:\n# - \"Outside\" if Outside == \"yes\"\n# - culture if available; otherwise, use region\nmydata$grouping &lt;- ifelse(\n  mydata$Outside == \"yes\", \"Outside\",\n  ifelse(is.na(mydata$culture), mydata$region, as.character(mydata$culture))\n)\n\n# Reorder the grouping factor with \"Outside\" first, then by region order\ngroup_levels &lt;- c(\"Outside\", unique(mydata$grouping[mydata$grouping != \"Outside\"][order(mydata$region)]))\nmydata$grouping &lt;- factor(mydata$grouping, levels = group_levels)\n\n# Select phenotypic data columns\nphenotypic_data &lt;- mydata %&gt;% dplyr::select(Biggy:T43C)\n\n# Calculate mean pairwise distance (multivariate diversity) per group\ngroupwise_distance &lt;- mydata %&gt;%\n  dplyr::group_by(grouping) %&gt;%\n  dplyr::summarise(\n    Mean_Pairwise_Distance = mean(\n      vegdist(phenotypic_data[cur_group_rows(), ], method = \"euclidean\"),\n      na.rm = TRUE\n    ),\n    n_individuals = n()\n  )\n\n# Combine the diversity metrics with region information\ntotal_diversity &lt;- groupwise_distance %&gt;%\n  left_join(mydata %&gt;% dplyr::select(grouping, region) %&gt;% distinct(), by = \"grouping\")\n\n# (Optional) Check the diversity summary\nprint(total_diversity)\n\n# A tibble: 55 × 4\n   grouping Mean_Pairwise_Distance n_individuals region              \n   &lt;fct&gt;                     &lt;dbl&gt;         &lt;int&gt; &lt;chr&gt;               \n 1 Outside                    66.8            24 Russia              \n 2 Outside                    66.8            24 South-West Norway   \n 3 Outside                    66.8            24 Latvia              \n 4 Outside                    66.8            24 South-Eastern Norway\n 5 Wild                       56.3             4 Wild                \n 6 Beer                      105.             72 Beer                \n 7 Wine                       72.1            18 Wine                \n 8 Spirits                    69.5             6 Spirits             \n 9 Bread                      80.8             4 Bread               \n10 Sake                       55.6             7 Sake                \n# ℹ 45 more rows\n\n# Remove specific rows if needed\ntotal_diversity &lt;- total_diversity[-c(1:10, 54:55), ]\n\n# Test correlation between Mean Pairwise Distance and Number of Individuals\ncor_test_distance &lt;- cor.test(total_diversity$n_individuals, total_diversity$Mean_Pairwise_Distance, method = \"pearson\")\nprint(cor_test_distance)\n\n\n    Pearson's product-moment correlation\n\ndata:  total_diversity$n_individuals and total_diversity$Mean_Pairwise_Distance\nt = 3.0334, df = 41, p-value = 0.004183\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.1466415 0.6454742\nsample estimates:\n      cor \n0.4281293 \n\n# Extract correlation results for annotation\nr_squared &lt;- round(cor_test_distance$estimate^2, 2)\np_value &lt;- signif(cor_test_distance$p.value, 3)\n\n# Plot: Mean Pairwise Distance vs. Number of Individuals (colored by Region)\n# Remove the legend from this plot since the color scheme is shared.\np_diversity_individuals &lt;- ggplot(total_diversity, aes(x = n_individuals, y = Mean_Pairwise_Distance, color = region)) +\n  geom_point(size = 3) +\n  geom_smooth(method = \"lm\", color = \"red\", se = TRUE) +\n  scale_color_manual(values = RegionColors) +\n  labs(\n    x = \"Number of individuals in culture\",\n    y = \"Phenotypic diversity\\n(mean pairwise distance)\"\n  ) +\n  theme_classic(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    axis.line.x = element_line(color = \"black\"),\n    axis.line.y = element_line(color = \"black\"),\n    axis.ticks = element_line(color = \"black\")\n  ) +\n  annotate(\"text\", \n           x = max(total_diversity$n_individuals) * 0.8, \n           y = max(total_diversity$Mean_Pairwise_Distance) * 0.9,\n           label = paste0(\"R² = \", r_squared, \"\\np = \", p_value), \n           size = 5, hjust = 0)\n\n\n\n11.1.4 Panel D code\n\npheno_list = c(\n  #\"Biggy\",\n  \"T12C\",\n  \"T39C\",\n  \"T41C\",\n  \"T43C\"\n  #\"T37C\",\n  #\"EtOH_12\",\n  #\"CuSO4_0.1\",\n  #\"EtOH_10\"\n)\n\ncounts_long1 = counts %&gt;%\n  dplyr::mutate(group = rownames(counts)) %&gt;%\n  dplyr::left_join(metadata, by = \"group\") %&gt;%\n  reshape2::melt() %&gt;%\n  dplyr::filter(Industry %in% c(\"Farmhouse\", \"Allochthonous\\nyeast\")) %&gt;%\n  dplyr::filter(variable %in% pheno_list)\ncounts_long1$category = counts_long1$region\ncounts_long1$Industry = \"Farmhouse\"\n\ncounts_long2 = counts %&gt;%\n  dplyr::mutate(group = rownames(counts)) %&gt;%\n  dplyr::left_join(metadata, by = \"group\") %&gt;%\n  reshape2::melt() %&gt;%\n  dplyr::filter(variable %in% pheno_list)\ncounts_long2$category = ifelse(\n  counts_long2$Industry %in% c(\"Farmhouse\", \"Allochthonous\\nyeast\"),\n  \"Farmhouse\",\n  counts_long2$Industry\n)\ncounts_long2$region = counts_long2$category\n\ncounts_long3 = rbind(counts_long1, counts_long2)%&gt;%\n  dplyr::filter(region != \"Other\")\ncounts_long3$category = ifelse(\n  counts_long3$category == \"Allochthonous\\nyeast\", \"Farmhouse\", counts_long3$category\n) \n# counts_long3$region = ifelse(\n#   is.na(counts_long3$region),\n#   counts_long3$category,\n#   counts_long3$region\n# ) \n\ncounts_long3$region = factor(\n  counts_long3$region,\n  levels = c(\n    \"SW Norway\", \"Lithuania\", \"NW Norway\", \"Russia\",\n    \"CE Norway\", \"Latvia\", \"SE Norway\",\n    \"Farmhouse\", \"Asia\", \"Beer1\", \"Beer2\", \"Mixed\", \"Wine\"\n    )\n)\n\ncounts_long3$facet_factor = ifelse(\n  counts_long3$region %in% c(\"SW Norway\", \"Lithuania\", \"NW Norway\", \"Russia\",\n                             \"CE Norway\", \"Latvia\", \"SE Norway\"),\n  \"Farmhouse, by region\",\n  ifelse(\n    counts_long3$region %in% c(\"Asia\", \"Beer1\", \"Beer2\", \"Mixed\", \"Wine\"),\n    \"Industrial\",\n    \"Farmhouse\"\n  )\n) %&gt;% factor(\n  levels = c(\"Farmhouse\", \"Industrial\", \"Farmhouse, by region\")\n)\n\n\ntext_annot = matrix(nrow = 13, ncol = 3) %&gt;% data.frame\ncolnames(text_annot) = c(\"category\", \"facet_factor\", \"value\")\ntext_annot$category = c(\n  \"Farmhouse\",\n  \"CE Norway\", \"Latvia\", \"Lithuania\", \"NW Norway\", \"Russia\", \"SE Norway\", \"SW Norway\",\n  \"Asia\", \"Beer1\", \"Beer2\", \"Mixed\", \"Wine\"\n)\ntext_annot$facet_factor = c(\n  \"Farmhouse\",\n  rep(\"Farmhouse, by region\", 7),\n  rep(\"Industrial\", 5)\n)\ntext_annot$value = c(\n  661,\n  54, 17, 43, 380, 23, 21, 123,\n  32, 172, 68, 56, 96\n)\n\n\ncolor_annot = c(\n  '#df536b', # Asia\n  '#61d04f', # Beer1\n  '#46f0f0', # Beer2\n  \"#008470\", # CE Norway\n  '#2297e6', # Farmhouse\n  \"#FFDA00\", # Latvia\n  '#FBA01D', # Lithuania\n  '#cd0bbc', # Mixed\n  '#0571B0', # NW Norway\n  '#A6611A', # Russia\n  \"steelblue\", # SE Norway\n  '#92C5DE', # SW Norway\n  '#bcf60c' # wine\n)\ncolor_annot = stats::setNames(\n  color_annot,\n  counts_long3$category %&gt;% factor() %&gt;% levels()\n)\n\n\np_violins_final = list()\n\nfor(k in 1:length(pheno_list)){\n  \n  my_pheno = pheno_list[[k]]\n  tmp_df = counts_long3 %&gt;% dplyr::filter(variable == my_pheno)\n  \n  tests_pheno = tmp_df %&gt;% \n    dplyr::filter(facet_factor %in% c(\"Farmhouse\", \"Industrial\")) %&gt;%\n    rstatix::t_test(value ~ Industry, ref.group = \"Farmhouse\")\n  tests_pheno_annot = matrix(nrow = 5, ncol = 3) %&gt;% data.frame\n  colnames(tests_pheno_annot) = c(\"category\", \"facet_factor\", \"value\")\n  tests_pheno_annot$category = c(\"Asia\", \"Beer1\", \"Beer2\", \"Mixed\", \"Wine\")\n  tests_pheno_annot$facet_factor = c(rep(\"Industrial\", 5))\n  tests_pheno_annot$value = c(\n    tests_pheno[2, \"p.adj.signif\"], tests_pheno[3, \"p.adj.signif\"], tests_pheno[4, \"p.adj.signif\"],\n    tests_pheno[5, \"p.adj.signif\"], tests_pheno[6, \"p.adj.signif\"]\n  )\n\n  p_violins_final[[k]] = ggplot(tmp_df,\n                                aes(x = forcats::fct_reorder(category, value, median),\n                                    y = value)) +\n    geom_violin(aes(fill = category),\n                alpha = 0.5,\n                scale = \"width\",\n                trim = FALSE) +\n    geom_point(data = tmp_df %&gt;% dplyr::filter(Outside == \"yes\"),\n               aes(x = category, y = value), fill = \"red\",\n               position = position_jitter(width = 0.25),\n               shape = 21, \n               alpha = 0.375,\n               size = 3) + \n    geom_text(data = text_annot,\n              aes(x = category, y = 115, label = paste0(\"n=\", as.character(value)))) +\n    geom_text(data = tests_pheno_annot,\n              aes(x = category, y = 105, label = as.character(value))) +\n    stat_summary(fun = \"median\", colour = \"red\", geom = \"crossbar\") +\n    facet_grid(~ factor(facet_factor, levels = c(\"Farmhouse\", \"Industrial\", \"Farmhouse, by region\")), scales = \"free_x\", space = \"free\") +\n    scale_y_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(0, 120), ) +\n    scale_fill_manual(values = color_annot) +\n    scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 10)) +\n    labs(y = my_pheno) +\n    theme(title = element_blank(),\n          axis.text.x = element_text(size = 12),\n          axis.text.y = element_text(size = 14),\n          axis.title.x = element_blank(),\n          axis.title.y = element_text(size = 18),\n          legend.position = \"none\",\n          panel.background = element_rect(colour = \"black\", fill = NA),\n          panel.grid.major.x = element_blank(),\n          panel.grid.minor.x = element_blank(),\n          panel.grid.major.y = element_line(colour = \"grey75\"),\n          panel.grid.minor.y = element_blank(),\n          strip.background = element_rect(colour = \"black\", fill = NA),\n          strip.text = element_text(size = 12))\n  \n}\n\n\n\n11.1.5 Merge\n\nfinal_plot = cowplot::plot_grid(\n  cowplot::plot_grid(\n    p_all_spls, p_farm_spls, p_diversity_individuals,\n    nrow = 1,\n    rel_widths = c(1, 1, 1),\n    labels = c(\"A\", \"B\", \"C\")\n  ),\n  cowplot::plot_grid(\n    p_violins_final[[1]], p_violins_final[[2]], p_violins_final[[3]],\n    p_violins_final[[4]],\n    ncol = 1,\n    labels = c(\"D\", NA, NA, NA)\n  ),\n  nrow = 2,\n  rel_heights = c(1.5, 2.5)\n)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Figure 5</span>"
    ]
  },
  {
    "objectID": "p02-05-Figure5.html#figure-5-plot",
    "href": "p02-05-Figure5.html#figure-5-plot",
    "title": "11  Figure 5",
    "section": "11.2 Figure 5 plot",
    "text": "11.2 Figure 5 plot\n\n\n\n\n\nFigure 5: High-throughput phenotyping of farmhouse and industrial yeasts.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Figure 5</span>"
    ]
  },
  {
    "objectID": "p02-05-Figure5.html#session-information",
    "href": "p02-05-Figure5.html#session-information",
    "title": "11  Figure 5",
    "section": "11.3 Session Information",
    "text": "11.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] vegan_2.7-1        permute_0.9-8      umap_0.2.10.0      RColorBrewer_1.1-3\n [5] PCAtools_2.14.0    patchwork_1.3.1    mixOmics_6.26.0    lattice_0.22-5    \n [9] MASS_7.3-60.0.1    ggrepel_0.9.6      ggplot2_3.5.2      forcats_1.0.0     \n[13] dplyr_1.1.4       \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1          farver_2.1.2             \n [3] fastmap_1.2.0             digest_0.6.37            \n [5] rsvd_1.0.5                lifecycle_1.0.4          \n [7] cluster_2.1.6             magrittr_2.0.3           \n [9] compiler_4.3.3            rlang_1.1.6              \n[11] tools_4.3.3               utf8_1.2.6               \n[13] igraph_2.1.4              yaml_2.3.10              \n[15] knitr_1.50                labeling_0.4.3           \n[17] askpass_1.2.1             S4Arrays_1.2.1           \n[19] dqrng_0.4.1               rARPACK_0.11-0           \n[21] htmlwidgets_1.6.4         reticulate_1.43.0        \n[23] DelayedArray_0.28.0       plyr_1.8.9               \n[25] abind_1.4-8               BiocParallel_1.36.0      \n[27] withr_3.0.2               purrr_1.1.0              \n[29] BiocGenerics_0.48.1       grid_4.3.3               \n[31] stats4_4.3.3              beachmat_2.18.1          \n[33] scales_1.4.0              dichromat_2.0-0.1        \n[35] cli_3.6.5                 ellipse_0.5.0            \n[37] rmarkdown_2.29            crayon_1.5.3             \n[39] generics_0.1.4            RSpectra_0.16-2          \n[41] reshape2_1.4.4            DelayedMatrixStats_1.24.0\n[43] stringr_1.5.1             splines_4.3.3            \n[45] zlibbioc_1.48.2           parallel_4.3.3           \n[47] XVector_0.42.0            matrixStats_1.5.0        \n[49] vctrs_0.6.5               Matrix_1.6-5             \n[51] carData_3.0-5             jsonlite_2.0.0           \n[53] car_3.1-3                 BiocSingular_1.18.0      \n[55] IRanges_2.36.0            S4Vectors_0.40.2         \n[57] rstatix_0.7.2             Formula_1.2-5            \n[59] irlba_2.3.5.1             tidyr_1.3.1              \n[61] glue_1.8.0                codetools_0.2-19         \n[63] cowplot_1.2.0             stringi_1.8.7            \n[65] gtable_0.3.6              ScaledMatrix_1.10.0      \n[67] tibble_3.3.0              pillar_1.11.0            \n[69] htmltools_0.5.8.1         openssl_2.3.3            \n[71] R6_2.6.1                  sparseMatrixStats_1.14.0 \n[73] evaluate_1.0.4            backports_1.5.0          \n[75] png_0.1-8                 broom_1.0.9              \n[77] corpcor_1.6.10            Rcpp_1.1.0               \n[79] nlme_3.1-164              gridExtra_2.3            \n[81] SparseArray_1.2.4         mgcv_1.9-1               \n[83] xfun_0.52                 MatrixGenerics_1.14.0    \n[85] pkgconfig_2.0.3",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Figure 5</span>"
    ]
  },
  {
    "objectID": "p02-06-Figure6.html",
    "href": "p02-06-Figure6.html",
    "title": "12  Figure 6",
    "section": "",
    "text": "12.1 Figure 6 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Figure 6</span>"
    ]
  },
  {
    "objectID": "p02-06-Figure6.html#figure-6-code",
    "href": "p02-06-Figure6.html#figure-6-code",
    "title": "12  Figure 6",
    "section": "",
    "text": "12.1.1 Panel A code\n\n################################################################################\n# Load fermentation data and set up color functions\n################################################################################\nlabel.colours &lt;- brewer.pal(7, 'Paired')\ncol_fun &lt;- colorRamp2(c(-3, 0, 3), c(\"blue\", \"white\", \"red\"))\ncompound_split &lt;- factor(c(rep(\"16P Fermentation\", 22),\n                           rep(\"22P Fermentation\", 22),\n                           rep(\"Growth\", 14)),\n                         levels = c(\"16P Fermentation\", \"22P Fermentation\", \"Growth\"))\n\nmydata &lt;- read.csv('./data/p02-06/data for R FILTERED.csv')\nannotations &lt;- mydata[1:4]\nrow_split &lt;- factor(annotations$region, levels = c(\"Ale\",\n                                                   \"Russia\",\n                                                   \"Latvia\",\n                                                   \"Lithuania\",\n                                                   \"Central-Eastern Norway\",\n                                                   \"North-West Norway\",\n                                                   \"South-West Norway\"))\nrownames(mydata) &lt;- mydata[,1]\nmydata &lt;- mydata[,-c(1:4)]\nmydata &lt;- as.matrix(mydata)\nmydata &lt;- t(mydata)  # Transpose the matrix\n\n################################################################################\n# Create annotations with legends disabled\n################################################################################\n# For Historic_preservation, use anno_simple so it appears without generating a legend.\nha &lt;- HeatmapAnnotation(\n  Region = annotations$region, \n  `Current preservation` = annotations$current_preservation,\n  `Historic preservation` = annotations$historic_preservation,\n  col = list(\n    Region = c('North-West Norway' = '#0571B0',\n               'South-West Norway' = '#92C5DE',\n               'Central-Eastern Norway' = '#018571',\n               'South-Eastern Norway' = '#80CDC1',\n               'Latvia' = '#FFDA00',\n               'Lithuania' = '#FBA01D',\n               'Russia' = '#A6611A',\n               'Ale' = '#FF0000'),\n    `Current preservation` = c('Dried' = 'purple', 'Liquid' = 'green'),\n    `Historic preservation` = c('Dried' = 'purple', 'Liquid' = 'green')\n  ),\n  # Disable legends for vector annotations\n  annotation_legend_param = list(\n    Region = list(legend = FALSE),\n    `Current preservation` = list(legend = FALSE),\n    `Historic preservation` = list(legend = FALSE)\n  ),\n  annotation_name_side = \"left\",\n  annotation_name_gp = gpar(fontsize = 16)\n)\n\n################################################################################\n# Create heatmap with default legends disabled\n################################################################################\n# Assume mydata already has unique rownames\ncustom_labels &lt;- c(\"isobutyl acetate\", \n                   \"isopentyl acetate\", \n                   \"phenethyl acetate\", \n                   \"ethyl acetate\", \n                   \"propyl acetate\", \n                   \"ethyl decanoate\", \n                   \"ethyl butyrate\", \n                   \"ethyl octanoate\", \n                   \"ethyl hexanoate\", \n                   \"ethyl isovalerate\", \n                   \"isobutanol\", \n                   \"butanol\", \n                   \"propanol\", \n                   \"hexanol\", \n                   \"isoamyl alcohol\", \n                   \"phenethyl alcohol\", \n                   \"4VG\", \n                   \"ABV\", \n                   \"acetic acid\", \n                   \"glycerol\", \n                   \"pH\", \n                   \"SO2\", \n                   \"isobutyl acetate\", \n                   \"isopentyl acetate\", \n                   \"phenethyl acetate\", \n                   \"ethyl acetate\", \n                   \"propyl acetate\", \n                   \"ethyl decanoate\", \n                   \"ethyl butyrate\", \n                   \"ethyl octanoate\", \n                   \"ethyl hexanoate\", \n                   \"ethyl isovalerate\", \n                   \"isobutanol\", \n                   \"butanol\", \n                   \"propanol\", \n                   \"hexanol\", \n                   \"isoamyl alcohol\", \n                   \"phenethyl alcohol\", \n                   \"4VG\", \n                   \"ABV\", \n                   \"acetic acid\", \n                   \"glycerol\", \n                   \"pH\", \n                   \"SO2\", \n                   \"Biggy\", \n                   \"CuSO4\", \n                   \"8% ethanol\", \n                   \"10% ethanol\", \n                   \"12% ethanol\", \n                   \"Low nitrogen\", \n                   \"8°C\", \n                   \"12°C\", \n                   \"20°C\", \n                   \"37°C\", \n                   \"39°C\", \n                   \"41°C\", \n                   \"sporulation\", \n                   \"% of culture\")\n\nhm &lt;- Heatmap(mydata, \n              col = col_fun, \n              border = TRUE, \n              name = 'Z-score',\n              cluster_rows = FALSE,\n              cluster_columns = TRUE,\n              cluster_column_slices = FALSE,\n              cluster_row_slices = FALSE,\n              show_row_dend = FALSE,\n              show_column_dend = FALSE,\n              row_split = compound_split,\n              row_labels = custom_labels,\n              row_title_gp = gpar(fontsize = 16), \n              clustering_distance_columns = \"manhattan\", \n              right_annotation = NULL,\n              bottom_annotation = ha,\n              column_names_gp = grid::gpar(fontsize = 9),\n              column_title = NULL,\n              show_heatmap_legend = FALSE)\n\n################################################################################\n# Manually create legend objects\n################################################################################\n# Heatmap (Z-score) legend\nlg_heatmap &lt;- Legend(col_fun = col_fun, title = \"Z-score\")\n\n# Region legend (adjust levels and colors as needed)\nlg_region &lt;- Legend(title = \"Region\",\n                    at = c(\"North-West Norway\", \"South-West Norway\", \"Central-Eastern Norway\", \n                           \"South-Eastern Norway\", \"Latvia\", \"Lithuania\", \"Russia\", \"Ale\"),\n                    legend_gp = gpar(fill = c(\"#0571B0\", \"#92C5DE\", \"#018571\", \"#80CDC1\",\n                                              \"#FFDA00\", \"#FBA01D\", \"#A6611A\", \"#FF0000\")))\n\n# Preservation legend: combining both preservation annotations\nlg_preservation &lt;- Legend(title = \"Preservation\",\n                          at = c(\"Dried\", \"Liquid\"),\n                          legend_gp = gpar(fill = c(\"purple\", \"green\")))\n\n################################################################################\n# Pack legends vertically\n################################################################################\ncombined_legends &lt;- packLegend(lg_heatmap, lg_region, lg_preservation, direction = \"vertical\")",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Figure 6</span>"
    ]
  },
  {
    "objectID": "p02-06-Figure6.html#figure-6-plot",
    "href": "p02-06-Figure6.html#figure-6-plot",
    "title": "12  Figure 6",
    "section": "12.2 Figure 6 plot",
    "text": "12.2 Figure 6 plot\n\n\n\n\n\nFigure 6: High-throughput phenotyping of farmhouse and industrial yeasts.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Figure 6</span>"
    ]
  },
  {
    "objectID": "p02-06-Figure6.html#session-information",
    "href": "p02-06-Figure6.html#session-information",
    "title": "12  Figure 6",
    "section": "12.3 Session Information",
    "text": "12.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] vegan_2.7-1           permute_0.9-8         umap_0.2.10.0        \n[4] RColorBrewer_1.1-3    patchwork_1.3.1       ComplexHeatmap_2.18.0\n[7] circlize_0.4.16      \n\nloaded via a namespace (and not attached):\n [1] generics_0.1.4      shape_1.4.6.1       lattice_0.22-5     \n [4] digest_0.6.37       magrittr_2.0.3      evaluate_1.0.4     \n [7] iterators_1.0.14    fastmap_1.2.0       Matrix_1.6-5       \n[10] foreach_1.5.2       doParallel_1.0.17   jsonlite_2.0.0     \n[13] RSpectra_0.16-2     GlobalOptions_0.1.2 mgcv_1.9-1         \n[16] scales_1.4.0        codetools_0.2-19    cli_3.6.5          \n[19] rlang_1.1.6         crayon_1.5.3        splines_4.3.3      \n[22] yaml_2.3.10         tools_4.3.3         parallel_4.3.3     \n[25] dplyr_1.1.4         colorspace_2.1-1    ggplot2_3.5.2      \n[28] GetoptLong_1.0.5    BiocGenerics_0.48.1 reticulate_1.43.0  \n[31] vctrs_0.6.5         R6_2.6.1            png_0.1-8          \n[34] magick_2.8.7        matrixStats_1.5.0   stats4_4.3.3       \n[37] lifecycle_1.0.4     S4Vectors_0.40.2    htmlwidgets_1.6.4  \n[40] IRanges_2.36.0      MASS_7.3-60.0.1     clue_0.3-66        \n[43] cluster_2.1.6       pkgconfig_2.0.3     pillar_1.11.0      \n[46] gtable_0.3.6        glue_1.8.0          Rcpp_1.1.0         \n[49] xfun_0.52           tibble_3.3.0        tidyselect_1.2.1   \n[52] knitr_1.50          dichromat_2.0-0.1   farver_2.1.2       \n[55] rjson_0.2.23        nlme_3.1-164        htmltools_0.5.8.1  \n[58] rmarkdown_2.29      compiler_4.3.3      askpass_1.2.1      \n[61] openssl_2.3.3",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Figure 6</span>"
    ]
  },
  {
    "objectID": "p02-07-FigureS1.html",
    "href": "p02-07-FigureS1.html",
    "title": "13  Figure S1",
    "section": "",
    "text": "13.1 Figure S1 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Figure S1</span>"
    ]
  },
  {
    "objectID": "p02-07-FigureS1.html#figure-s1-code",
    "href": "p02-07-FigureS1.html#figure-s1-code",
    "title": "13  Figure S1",
    "section": "",
    "text": "13.1.1 Import\n\n# get Figure S1\nfinal_plot = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-07/Figure_S1.png\"),\n    width = ggplot2::unit(1, \"npc\"),\n    height = ggplot2::unit(1, \"npc\")),\n  -Inf, Inf, -Inf, Inf)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Figure S1</span>"
    ]
  },
  {
    "objectID": "p02-07-FigureS1.html#figure-s1-plot",
    "href": "p02-07-FigureS1.html#figure-s1-plot",
    "title": "13  Figure S1",
    "section": "13.2 Figure S1 plot",
    "text": "13.2 Figure S1 plot\n\n\n\n\n\nFigure S1: Schematic overview of the project’s workflow.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Figure S1</span>"
    ]
  },
  {
    "objectID": "p02-07-FigureS1.html#session-information",
    "href": "p02-07-FigureS1.html#session-information",
    "title": "13  Figure S1",
    "section": "13.3 Session Information",
    "text": "13.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] magick_2.8.7  ggplot2_3.5.2\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5        cli_3.6.5          knitr_1.50         rlang_1.1.6       \n [5] xfun_0.52          generics_0.1.4     jsonlite_2.0.0     glue_1.8.0        \n [9] htmltools_0.5.8.1  scales_1.4.0       rmarkdown_2.29     evaluate_1.0.4    \n[13] tibble_3.3.0       fastmap_1.2.0      yaml_2.3.10        lifecycle_1.0.4   \n[17] compiler_4.3.3     dplyr_1.1.4        RColorBrewer_1.1-3 Rcpp_1.1.0        \n[21] htmlwidgets_1.6.4  pkgconfig_2.0.3    farver_2.1.2       digest_0.6.37     \n[25] R6_2.6.1           tidyselect_1.2.1   dichromat_2.0-0.1  pillar_1.11.0     \n[29] magrittr_2.0.3     withr_3.0.2        tools_4.3.3        gtable_0.3.6",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Figure S1</span>"
    ]
  },
  {
    "objectID": "p02-08-FigureS2.html",
    "href": "p02-08-FigureS2.html",
    "title": "14  Figure S2",
    "section": "",
    "text": "14.1 Figure S2 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Figure S2</span>"
    ]
  },
  {
    "objectID": "p02-08-FigureS2.html#figure-s2-code",
    "href": "p02-08-FigureS2.html#figure-s2-code",
    "title": "14  Figure S2",
    "section": "",
    "text": "14.1.1 Panel A code\n\n\n14.1.2 Merge",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Figure S2</span>"
    ]
  },
  {
    "objectID": "p02-08-FigureS2.html#figure-s2-plot",
    "href": "p02-08-FigureS2.html#figure-s2-plot",
    "title": "14  Figure S2",
    "section": "14.2 Figure S2 plot",
    "text": "14.2 Figure S2 plot",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Figure S2</span>"
    ]
  },
  {
    "objectID": "p02-08-FigureS2.html#session-information",
    "href": "p02-08-FigureS2.html#session-information",
    "title": "14  Figure S2",
    "section": "14.3 Session Information",
    "text": "14.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] vegan_2.7-1        permute_0.9-8      umap_0.2.10.0      RColorBrewer_1.1-3\n [5] PCAtools_2.14.0    patchwork_1.3.1    mixOmics_6.26.0    lattice_0.22-5    \n [9] MASS_7.3-60.0.1    ggrepel_0.9.6      ggplot2_3.5.2      forcats_1.0.0     \n[13] dplyr_1.1.4       \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1          farver_2.1.2             \n [3] fastmap_1.2.0             digest_0.6.37            \n [5] rsvd_1.0.5                lifecycle_1.0.4          \n [7] cluster_2.1.6             magrittr_2.0.3           \n [9] compiler_4.3.3            rlang_1.1.6              \n[11] tools_4.3.3               igraph_2.1.4             \n[13] yaml_2.3.10               knitr_1.50               \n[15] askpass_1.2.1             S4Arrays_1.2.1           \n[17] dqrng_0.4.1               rARPACK_0.11-0           \n[19] htmlwidgets_1.6.4         reticulate_1.43.0        \n[21] DelayedArray_0.28.0       plyr_1.8.9               \n[23] abind_1.4-8               BiocParallel_1.36.0      \n[25] withr_3.0.2               purrr_1.1.0              \n[27] BiocGenerics_0.48.1       grid_4.3.3               \n[29] stats4_4.3.3              beachmat_2.18.1          \n[31] scales_1.4.0              dichromat_2.0-0.1        \n[33] cli_3.6.5                 ellipse_0.5.0            \n[35] rmarkdown_2.29            crayon_1.5.3             \n[37] generics_0.1.4            RSpectra_0.16-2          \n[39] reshape2_1.4.4            DelayedMatrixStats_1.24.0\n[41] stringr_1.5.1             splines_4.3.3            \n[43] zlibbioc_1.48.2           parallel_4.3.3           \n[45] XVector_0.42.0            matrixStats_1.5.0        \n[47] vctrs_0.6.5               Matrix_1.6-5             \n[49] jsonlite_2.0.0            BiocSingular_1.18.0      \n[51] IRanges_2.36.0            S4Vectors_0.40.2         \n[53] irlba_2.3.5.1             tidyr_1.3.1              \n[55] glue_1.8.0                codetools_0.2-19         \n[57] cowplot_1.2.0             stringi_1.8.7            \n[59] gtable_0.3.6              ScaledMatrix_1.10.0      \n[61] tibble_3.3.0              pillar_1.11.0            \n[63] htmltools_0.5.8.1         openssl_2.3.3            \n[65] R6_2.6.1                  sparseMatrixStats_1.14.0 \n[67] evaluate_1.0.4            png_0.1-8                \n[69] corpcor_1.6.10            Rcpp_1.1.0               \n[71] nlme_3.1-164              gridExtra_2.3            \n[73] SparseArray_1.2.4         mgcv_1.9-1               \n[75] xfun_0.52                 MatrixGenerics_1.14.0    \n[77] pkgconfig_2.0.3",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Figure S2</span>"
    ]
  },
  {
    "objectID": "p02-09-FigureS3.html",
    "href": "p02-09-FigureS3.html",
    "title": "15  Figure S3",
    "section": "",
    "text": "15.1 Figure S3 code\n# get Figure S3\nfinal_plot = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-09/Figure_S3.png\"),\n    width = ggplot2::unit(1, \"npc\"),\n    height = ggplot2::unit(1, \"npc\")),\n  -Inf, Inf, -Inf, Inf)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Figure S3</span>"
    ]
  },
  {
    "objectID": "p02-09-FigureS3.html#figure-s3-plot",
    "href": "p02-09-FigureS3.html#figure-s3-plot",
    "title": "15  Figure S3",
    "section": "15.2 Figure S3 plot",
    "text": "15.2 Figure S3 plot\n\n\n\n\n\nFigure S3: Strain diversity within farmhouse yeast cultures.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Figure S3</span>"
    ]
  },
  {
    "objectID": "p02-09-FigureS3.html#session-information",
    "href": "p02-09-FigureS3.html#session-information",
    "title": "15  Figure S3",
    "section": "15.3 Session Information",
    "text": "15.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] magick_2.8.7  ggplot2_3.5.2\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5        cli_3.6.5          knitr_1.50         rlang_1.1.6       \n [5] xfun_0.52          generics_0.1.4     jsonlite_2.0.0     glue_1.8.0        \n [9] htmltools_0.5.8.1  scales_1.4.0       rmarkdown_2.29     evaluate_1.0.4    \n[13] tibble_3.3.0       fastmap_1.2.0      yaml_2.3.10        lifecycle_1.0.4   \n[17] compiler_4.3.3     dplyr_1.1.4        RColorBrewer_1.1-3 Rcpp_1.1.0        \n[21] htmlwidgets_1.6.4  pkgconfig_2.0.3    farver_2.1.2       digest_0.6.37     \n[25] R6_2.6.1           tidyselect_1.2.1   dichromat_2.0-0.1  pillar_1.11.0     \n[29] magrittr_2.0.3     withr_3.0.2        tools_4.3.3        gtable_0.3.6",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Figure S3</span>"
    ]
  },
  {
    "objectID": "p02-10-FigureS4.html",
    "href": "p02-10-FigureS4.html",
    "title": "16  Figure S4",
    "section": "",
    "text": "16.1 Figure S4 code\n# get Figure S4\nfinal_plot = ggplot2::ggplot() + ggplot2::annotation_custom(\n  grid::rasterGrob(\n    magick::image_read(\"data/p02-10/Figure_S4.png\"),\n    width = ggplot2::unit(1, \"npc\"),\n    height = ggplot2::unit(1, \"npc\")),\n  -Inf, Inf, -Inf, Inf)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Figure S4</span>"
    ]
  },
  {
    "objectID": "p02-10-FigureS4.html#figure-s4-plot",
    "href": "p02-10-FigureS4.html#figure-s4-plot",
    "title": "16  Figure S4",
    "section": "16.2 Figure S4 plot",
    "text": "16.2 Figure S4 plot\n\n\n\n\n\nFigure S4: Strain overlap between cultures originating from the same farmhouse, but isolated at different times.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Figure S4</span>"
    ]
  },
  {
    "objectID": "p02-10-FigureS4.html#session-information",
    "href": "p02-10-FigureS4.html#session-information",
    "title": "16  Figure S4",
    "section": "16.3 Session Information",
    "text": "16.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] magick_2.8.7  ggplot2_3.5.2\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5        cli_3.6.5          knitr_1.50         rlang_1.1.6       \n [5] xfun_0.52          generics_0.1.4     jsonlite_2.0.0     glue_1.8.0        \n [9] htmltools_0.5.8.1  scales_1.4.0       rmarkdown_2.29     evaluate_1.0.4    \n[13] tibble_3.3.0       fastmap_1.2.0      yaml_2.3.10        lifecycle_1.0.4   \n[17] compiler_4.3.3     dplyr_1.1.4        RColorBrewer_1.1-3 Rcpp_1.1.0        \n[21] htmlwidgets_1.6.4  pkgconfig_2.0.3    farver_2.1.2       digest_0.6.37     \n[25] R6_2.6.1           tidyselect_1.2.1   dichromat_2.0-0.1  pillar_1.11.0     \n[29] magrittr_2.0.3     withr_3.0.2        tools_4.3.3        gtable_0.3.6",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Figure S4</span>"
    ]
  },
  {
    "objectID": "p02-11-FigureS5.html",
    "href": "p02-11-FigureS5.html",
    "title": "17  Figure S5",
    "section": "",
    "text": "17.1 Figure S5 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Figure S5</span>"
    ]
  },
  {
    "objectID": "p02-11-FigureS5.html#figure-s5-code",
    "href": "p02-11-FigureS5.html#figure-s5-code",
    "title": "17  Figure S5",
    "section": "",
    "text": "17.1.1 Panel A code\n\n#------------------------------------------------------------------------------#\n## 1.1 - Import data and prep tree                                          ####\n\n# mapping swap_yeasts\nto_swap = data.frame(\n  old_name = c(\"21P1\", \"17P5\", \"45P5\", \"28P1\", \"28P6\"),\n  new_name = c(\"21R40\", \"17R20\", \"45R38\", \"28R31\", \"28R1\")\n)\n\n# import final calde list\nfinal_clades = read.table(\n  \"./data/p02-11/final_clades_for_pub.txt\",\n  sep = \"\\t\",\n  header = TRUE,\n  stringsAsFactors = FALSE\n)\n\n\n# load tree\nbest_tree = read.tree(\"./data/p02-11/clstr.all.concat.nt.align.short.tre\")\n\nbest_tree = as.phylo(best_tree)\nbest_tree$node.label = as.numeric(as.character(best_tree$node.label))\nbest_tree = ape::root(best_tree,\n                      which(best_tree$tip.label %in% c(\"Skud\")),\n                      edgelabel = TRUE)\nbest_tree = ladderize(best_tree, right = TRUE)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p02-11/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\ntree_annot = tree_annot_raw[, -which(colnames(tree_annot_raw) == \"seq_name\")]\ntree_annot$Origin = factor(tree_annot$niche3,\n                           levels = c(\"North-West Norway\",  \"South-West Norway\",\"Central-Eastern Norway\",\n                                      \"Latvia\", \"Lithuania\", \"Russia\", \"\"))\ncolnames(tree_annot) = c(\"Strain\", \"Name\", \"Niche\", \"niche2\", \"niche3\", \"group\", \"Origin\")\ntree_annot$Niche = ifelse(tree_annot$Niche == \"farmhouse\", \"Farmhouse\", tree_annot$Niche)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot$Strain = stringr::str_replace(\n    tree_annot$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot$Name = stringr::str_replace(\n    tree_annot$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  best_tree$tip.label = stringr::str_replace(\n    best_tree$tip.label,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  ) \n}\n\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$Niche == \"Farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\n\ngpinfo = list(Beer1 = tree_annot$Strain[tree_annot$Clade == 'Beer1'],\n              Beer2 = tree_annot$Strain[tree_annot$Clade == 'Beer2'],\n              Wine = tree_annot$Strain[tree_annot$Clade == 'Wine'],\n              Asian = tree_annot$Strain[tree_annot$Clade == 'Asia'],\n              Farmhouse = tree_annot$Strain[tree_annot$Clade == 'Farmhouse'],\n              Mixed = tree_annot$Strain[tree_annot$Clade == 'Mixed'],\n              Other = tree_annot$Strain[tree_annot$Clade == 'Other'])\n\n#relabel nodes\nbest_tree = treeio::rename_taxa(best_tree, data = tree_annot, Name, Strain)\nbest_tree = ggtree::groupOTU(best_tree, gpinfo)\n\n\n\n#------------------------------------------------------------------------------#\n## 1.2 - Plot tree                                                          ####\n\nselected_labels = c(\"Muri\", \"7R25\", \"38R16\", \"40R14\", \"40R20\", \"40R1\")\nall_other_labels = best_tree$tip.label[-which(best_tree$tip.label %in% selected_labels)]\n\n# plot\np_ML = ggtree(best_tree,\n              #aes(color = group),\n              layout = \"fan\",\n              open.angle = 0) + \n  geom_tiplab2(aes(subset = isTip & label %in% all_other_labels),\n               color = \"black\",\n               align = TRUE,\n               linesize = 0.125,\n               offset = 0.0038,\n               size = 2.75) +\n  geom_tiplab2(aes(subset = isTip & label %in% selected_labels),\n               color = \"grey75\",\n               align = TRUE,\n               linesize = 0.125,\n               offset = 0.0038,\n               size = 2.75) +\n  scale_color_manual(values = c(2, 3, 4, 5, 6, '#000000', 7, 8))+\n  geom_nodepoint(aes(fill = cut(as.numeric(label),\n                                c(0, 70, 90, 100))), shape = 21, size = 3) +\n  theme_tree(legend.position = c(0.1, 0.55)) +\n  scale_fill_manual(values = c(\"white\", \"grey\", \"black\"),\n                    guide = \"legend\",\n                    name = \"Bootstrap\",\n                    breaks = c(\"(90,100]\", \"(70,90]\", \"(0,70]\"),\n                    labels = expression(BP&gt;=90,70 &lt;= BP * \" &lt; 90\", BP &lt; 70))+\n  labs(title = 'Phylogenetic Tree', color = 'Clade') +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n#p = ggtree::flip(p, 258, 325)\n\n\np_ML = p_ML +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Clade),\n                          color = NA, offset = 0.045, pwidth = 0.0025) +\n  scale_fill_manual(values = c(\"#df536b\", \"#61d04f\", \"#28e2e5\", \"#2297e6\", \"#cd0bbc\", \"grey75\", \"#bcf60c\")) +\n  # scale_fill_manual(values = c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231',\n  #                              '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe',\n  #                              '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000',\n  #                              '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080',\n  #                              '#ffffff', '#000000')) +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Origin),\n                          color = NA, offset = 0.0475, pwidth = 0.0025) +\n  scale_fill_manual(values = c('#0571B0',\n                               '#92C5DE',\n                               '#018571',\n                               '#FFDA00',\n                               '#FBA01D',\n                               '#A6611A',\n                               '#ffffff')) +\n  labs(fill = \"Origin\") +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\n\n\n17.1.2 Panel B code\n\n#==============================================================================#\n# 2 - Maximum Likelihood tree no Farmhouse                                  ####\n\n#------------------------------------------------------------------------------#\n## 2.1 - Import data                                                        ####\n\n# load tree\nbest_tree = read.tree(\"./data/p02-11/clstr.all.concat.nt.align.noKV.short.tre\")\n\nbest_tree = as.phylo(best_tree)\nbest_tree$node.label = as.numeric(as.character(best_tree$node.label))\nbest_tree = ape::root(best_tree,\n                      which(best_tree$tip.label %in% c(\"Skud\")),\n                      edgelabel = TRUE)\nbest_tree = ladderize(best_tree, right = TRUE)\n\n# load annotations\ntree_annot_raw = read.table(\"./data/p02-11/genetrees.output.BS.annot-PETER.txt\",\n                            sep = \"\\t\",\n                            header = TRUE,\n                            stringsAsFactors = FALSE)\ntree_annot_raw = data.frame(tree_annot_raw)\ntree_annot = tree_annot_raw[, -which(colnames(tree_annot_raw) == \"seq_name\")]\ntree_annot$Origin = factor(tree_annot$niche3,\n                           levels = c(\"North-West Norway\",  \"South-West Norway\",\"Central-Eastern Norway\",\n                                      \"Latvia\", \"Lithuania\", \"Russia\", \"\"))\ncolnames(tree_annot) = c(\"Strain\", \"Name\", \"Niche\", \"niche2\", \"niche3\", \"group\", \"Origin\")\ntree_annot$Niche = ifelse(tree_annot$Niche == \"farmhouse\", \"Farmhouse\", tree_annot$Niche)\n\nfor(k in 1:nrow(to_swap)){\n  tree_annot$Strain = stringr::str_replace(\n    tree_annot$Strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  tree_annot$Name = stringr::str_replace(\n    tree_annot$Name,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  best_tree$tip.label = stringr::str_replace(\n    best_tree$tip.label,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  ) \n}\n\n# merge with last clade grouping from 20250630\ntree_annot = tree_annot %&gt;%\n  dplyr::left_join(., final_clades, by = \"Strain\")\ntree_annot$Clade = ifelse(tree_annot$Niche == \"Farmhouse\", \"Farmhouse\", tree_annot$Clade)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'beer2',\n  \"Beer2\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'wine',\n  \"Wine\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(\n  is.na(tree_annot$Clade) & tree_annot$group == 'asian',\n  \"Asia\", tree_annot$Clade\n)\ntree_annot$Clade = ifelse(is.na(tree_annot$Clade), \"Other\", tree_annot$Clade)\n\ngpinfo = list(Beer1 = tree_annot$Strain[tree_annot$Clade == 'Beer1'],\n              Beer2 = tree_annot$Strain[tree_annot$Clade == 'Beer2'],\n              Wine = tree_annot$Strain[tree_annot$Clade == 'Wine'],\n              Asian = tree_annot$Strain[tree_annot$Clade == 'Asia'],\n              Farmhouse = tree_annot$Strain[tree_annot$Clade == 'Farmhouse'],\n              Mixed = tree_annot$Strain[tree_annot$Clade == 'Mixed'],\n              Other = tree_annot$Strain[tree_annot$Clade == 'Other'])\n\n#relabel nodes\nbest_tree = treeio::rename_taxa(best_tree, data = tree_annot, Name, Strain)\nbest_tree = ggtree::groupOTU(best_tree, gpinfo)\n\n\n# plot\np_ML_noK = ggtree(best_tree,\n                  #aes(color = group),\n                  layout = \"fan\",\n                  open.angle = 0) + \n  geom_tiplab2(color = \"black\",\n               align = TRUE,\n               linesize = 0.125,\n               offset = 0.0028,\n               size = 2.75) +\n  scale_color_manual(values = c(2, 3, 4,  6, '#000000', 7, 8))+\n  geom_nodepoint(aes(fill = cut(as.numeric(label),\n                                c(0, 70, 90, 100))), shape = 21, size = 3) +\n  theme_tree(legend.position = c(0.1, 0.55)) +\n  scale_fill_manual(values = c(\"white\", \"grey\", \"black\"),\n                    guide = \"legend\",\n                    name = \"Bootstrap\",\n                    breaks = c(\"(90,100]\", \"(70,90]\", \"(0,70]\"),\n                    labels = expression(BP&gt;=90,70 &lt;= BP * \" &lt; 90\", BP &lt; 70))+\n  labs(title = 'Phylogenetic Tree', color = 'Clade') +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\np_ML_noK = p_ML_noK +\n  new_scale_fill() +\n  ggtreeExtra::geom_fruit(data = tree_annot,\n                          geom = geom_tile,\n                          mapping = aes(y = Strain, fill = Clade),\n                          color = NA, offset = 0.07, pwidth = 0.0025) +\n  scale_fill_manual(values = c(\"#df536b\", \"#61d04f\", \"#28e2e5\", \"#cd0bbc\", \"grey75\", \"#bcf60c\")) +\n  theme(legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.box.background = element_rect(colour = \"white\"),\n        legend.margin = margin(t = 0, unit = \"cm\"),\n        legend.key.size = unit(0.25, \"cm\"),\n        plot.title = element_blank())\n\n\n\n17.1.3 Merge\n\nfinal_plot = cowplot::plot_grid(\n  p_ML, p_ML_noK,\n  nrow = 2,\n  labels = c(\"A\", \"B\")\n)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Figure S5</span>"
    ]
  },
  {
    "objectID": "p02-11-FigureS5.html#figure-s5-plot",
    "href": "p02-11-FigureS5.html#figure-s5-plot",
    "title": "17  Figure S5",
    "section": "17.2 Figure S5 plot",
    "text": "17.2 Figure S5 plot\n\n\n\n\n\nFigure S5: Phylogenetic analysis of farmhouse yeast.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Figure S5</span>"
    ]
  },
  {
    "objectID": "p02-11-FigureS5.html#session-information",
    "href": "p02-11-FigureS5.html#session-information",
    "title": "17  Figure S5",
    "section": "17.3 Session Information",
    "text": "17.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] treeio_1.26.0      stringr_1.5.1      reshape_0.8.10     RColorBrewer_1.1-3\n [5] pophelper_2.3.1    naturalsort_0.1.3  gridExtra_2.3      ggtreeExtra_1.12.0\n [9] ggtree_3.10.1      ggplot2_3.5.2      ggnewscale_0.5.2   aplot_0.2.8       \n[13] ape_5.8-1         \n\nloaded via a namespace (and not attached):\n [1] yulab.utils_0.2.0   generics_0.1.4      tidyr_1.3.1        \n [4] ggplotify_0.1.2     lpSolve_5.6.23      stringi_1.8.7      \n [7] lattice_0.22-5      digest_0.6.37       magrittr_2.0.3     \n[10] evaluate_1.0.4      fastmap_1.2.0       plyr_1.8.9         \n[13] jsonlite_2.0.0      combinat_0.0-8      purrr_1.1.0        \n[16] scales_1.4.0        label.switching_1.8 lazyeval_0.2.2     \n[19] cli_3.6.5           rlang_1.1.6         cowplot_1.2.0      \n[22] tidytree_0.4.6      withr_3.0.2         yaml_2.3.10        \n[25] tools_4.3.3         parallel_4.3.3      dplyr_1.1.4        \n[28] vctrs_0.6.5         R6_2.6.1            gridGraphics_0.5-1 \n[31] lifecycle_1.0.4     fs_1.6.6            htmlwidgets_1.6.4  \n[34] ggfun_0.2.0         pkgconfig_2.0.3     pillar_1.11.0      \n[37] gtable_0.3.6        glue_1.8.0          Rcpp_1.1.0         \n[40] xfun_0.52           tibble_3.3.0        tidyselect_1.2.1   \n[43] knitr_1.50          dichromat_2.0-0.1   farver_2.1.2       \n[46] htmltools_0.5.8.1   nlme_3.1-164        patchwork_1.3.1    \n[49] labeling_0.4.3      rmarkdown_2.29      compiler_4.3.3",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Figure S5</span>"
    ]
  },
  {
    "objectID": "p02-12-FigureS6.html",
    "href": "p02-12-FigureS6.html",
    "title": "18  Figure S6",
    "section": "",
    "text": "18.1 Figure S6 code",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figure S6</span>"
    ]
  },
  {
    "objectID": "p02-12-FigureS6.html#figure-s6-code",
    "href": "p02-12-FigureS6.html#figure-s6-code",
    "title": "18  Figure S6",
    "section": "",
    "text": "18.1.1 Panel A code\n\n#==============================================================================#\n# 1 - k-mer frequencies                                                     ####\n\n#------------------------------------------------------------------------------#\n## 1.1 - Import and reformat k-mer freq                                     ####\n\n# mapping swap_yeasts\nto_swap = data.frame(\n  old_name = c(\"21P1\", \"17P5\", \"45P5\", \"28P1\", \"28P6\"),\n  new_name = c(\"21R40\", \"17R20\", \"45R38\", \"28R31\", \"28R1\")\n)\n\n\n# load the tree file to make dendrogram\ntree = read.tree(\"./data/p02-12/genetrees.output.BS.best.2025.tre\")\n\n# Define the specific samples to keep\nselected_samples = c(\n  \"1R16\", \"2R23\", \"3R11\", \"6R15\", \"k7R25\", \"7R7\", \"8R19\", \"9R40\", \"14R30\", \"14R6\", \n  \"16R23\", \"16R37\", \"17P5\", \"19R18\", \"21P1\", \"21R38\", \"27R17\", \"28P1\", \"28P6\", \"28R21\", \n  \"28R33\", \"28R8\", \"38R16\", \"39R20\", \"40R1\", \"40R14\", \"40R20\", \"41R10\", \"41R15\", \"42R20\", \n  \"42R31\", \"44R32\", \"44R7\", \"45P5\", \"45R11\", \"46R12\", \"46R37\", \"Hornindal1\", \"Hornindal2\",\n  \"Laerdal2\", \"Muri\" , \"SortdalEbbe1\", \"Voss1\", \"Granvin1\", \"Skud\"\n)\n\n# Prune the tree to keep only the selected samples\npruned_tree = keep.tip(tree, selected_samples)\n# Reroot the pruned tree with \"Skud\" as outgroup\npruned_tree = root(pruned_tree, outgroup = \"Skud\", resolve.root = FALSE)\n# Prune the pruned tree to remove Skud \npruned_tree = drop.tip(pruned_tree, \"Skud\")\n# dendrogram plot\np_tree = # Plot the pruned tree\n  ggtree(pruned_tree) + \n  theme(plot.margin = margin(10, 10, 10, 10)) + \n  xlim(0, 15) \n# extract tip order\ntip_order = p_tree$data %&gt;% \n  filter(isTip) %&gt;%           # Select only tip labels\n  arrange(y) %&gt;%              # Arrange by y-axis position\n  pull(label)\n\nfor(k in 1:nrow(to_swap)){\n  tip_order = stringr::str_replace_all(\n    tip_order,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\n\n\n# import CNV matrix\nkmer41freq = read.delim(\"./data/p02-12/Vikings.species.kmer41freq.mod.txt\", header = FALSE)\ncolnames(kmer41freq) = c(\"strain\", \"type\", \"kmer\", \"freq\")\n\nfor(k in 1:nrow(to_swap)){\n  kmer41freq$strain = stringr::str_replace_all(\n    kmer41freq$strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\nkmer41freq$strain = factor(kmer41freq$strain, levels = rev(tip_order))\n\nkmer41freq$peak = ifelse(\n  kmer41freq$strain %in% c(\"Muri\", \"k7R25\"), \"one_peak\",\n  ifelse(\n    kmer41freq$strain %in% c(\"38R16\", \"16R23\", \"39R20\", \"40R14\"), \"two_peaks\",\n    ifelse(\n      kmer41freq$strain %in% c(\n        \"41R10\", \"21R38\", \"21P1\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\",\n        \"46R12\", \"46R37\", \"16R37\", \"40R1\", \"40R20\"\n      ), \"three_peaks\",\n      ifelse(kmer41freq$strain == \"44R32\", \"five_peaks\", \"four_peaks\")\n    )\n  )\n)\nkmer41freq$peak = factor(\n  kmer41freq$peak,\n  levels = c(\"one_peak\", \"two_peaks\", \"three_peaks\", \"four_peaks\", \"five_peaks\")\n)\n\n\n\n#------------------------------------------------------------------------------#\n## 3.2 - Plot                                                               ####\n\n# set color labels\ncol_label = c(\"#0571B0\", rep(\"#92C5DE\", 5), \"#0571B0\", rep(\"#92C5DE\", 3),\n    rep(\"#0571B0\", 9), rep(\"#92C5DE\", 4), rep(\"#FFDA00\", 4),\n    rep(\"#FBA01D\", 3), rep(\"#008470\", 6), rep(\"grey75\", 6),\n    \"#A6611A\", \"#FBA01D\")\n\n# plot kmer distributions\np_kmer = ggplot(kmer41freq, aes(x = kmer, y = freq)) +\n  geom_line(aes(colour = peak), linewidth = 2) +\n  scale_colour_manual(values = c(\"tomato4\", \"tomato2\", \"skyblue1\", \"skyblue3\", \"skyblue4\")) +\n  coord_cartesian(expand = FALSE) +\n  annotation_custom(grid::linesGrob(y = c(0, 0), gp = grid::gpar(lwd = 3))) +\n  ggh4x::facet_grid2(strain ~ type,\n                     scales = \"free\",\n                     independent = \"x\",\n                     switch = \"both\",\n                     strip = strip_themed(\n                       background_y = ggh4x::elem_list_rect(fill = col_label),\n                       text_y = ggh4x::elem_list_text(color = c(\n                         rep(\"black\", 36), rep(\"grey50\", 6), rep(\"black\", 2)\n                       ))\n                    )) +\n  theme(plot.title = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text = element_blank(),\n        legend.position = \"none\",\n        panel.background = element_blank(),\n        panel.border = element_blank(),\n        panel.spacing = unit(0, \"lines\"),\n        strip.background = element_blank(),\n        strip.text.x = element_text(size = 8),\n        strip.text.y.left = element_text(size = 8, angle = 0, face = \"bold\"))\n\n\n\n#==============================================================================#\n# 2 - CNVs                                                                  ####\n\n#------------------------------------------------------------------------------#\n## 2.1 - Import and reformat coverage                                       ####\n\n# import CNV matrix\nCNV_table = read.delim(\"./data/p02-12/Vikings.CNVsmerged.all.tab\", header = TRUE)\nCNV_table$CNV = as.factor(CNV_table$CNV)\n\n# import dataset\nfile_list = list.files(\n  path = \"./data/p02-12/01_start_bed/\",\n  pattern = \"1kb_cov.bed\",\n  full.names = TRUE,\n  ignore.case = FALSE\n)\n\n# declare average df\naverage_table = data.frame(\n  strain = character(),\n  average = double(),\n  max = double(),\n  sd = double(),\n  stringsAsFactors = FALSE\n)\n\n# declare cov df\ncoverage_table = data.frame(\n  strain = character(),\n  chr = character(),\n  start = integer(),\n  stop = integer(),\n  cov = double(),\n  stringsAsFactors = FALSE\n)\n\n# import coverage counts per strain\nfor(file_to_import in file_list){\n  \n  tmp_table = read.delim(file_to_import, header = FALSE)\n  \n  colnames(tmp_table) = c(\"strain\", \"chr\", \"start\", \"stop\", \"cov\")\n  tmp_table = tmp_table[which(tmp_table$chr != \"ref|NC_001224|\"), ]\n  \n  strain_name = stringr::str_remove(file_to_import, \".align.sort.1kb_cov.bed\")\n  strain_name = stringr::str_remove(strain_name, \"./data/p02-12/01_start_bed//\")\n  average_table = rbind(\n    average_table,\n    data.frame(\n      \"strain\" = strain_name,\n      \"average\" = mean(tmp_table$cov),\n      \"max\" = max(tmp_table$cov),\n      \"sd\" = sd(tmp_table$cov)\n    )\n  )\n  \n  tmp_table = tmp_table[which(tmp_table$cov &lt;= mean(tmp_table$cov)+sd(tmp_table$cov)), ]\n  \n  coverage_table = rbind(coverage_table, tmp_table)\n  \n  CNV_table[which(CNV_table$strain == strain_name), \"stop_y\"] = max(tmp_table$cov)\n  \n}\n\n\n\n#------------------------------------------------------------------------------#\n## 4.2 - plot coverage                                                      ####\n\n# format\ncoverage_table$chr = factor(\n  coverage_table$chr,\n  levels = c(\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\",\n             \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\")\n)\nCNV_table$chr = factor(\n  CNV_table$chr,\n  levels = c(\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\",\n             \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\")\n)\n\nfor(k in 1:nrow(to_swap)){\n  coverage_table$strain = stringr::str_replace_all(\n    coverage_table$strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  CNV_table$strain = stringr::str_replace_all(\n    CNV_table$strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n  average_table$strain = stringr::str_replace_all(\n    average_table$strain,\n    to_swap[k, \"old_name\"],\n    to_swap[k, \"new_name\"]\n  )\n}\n\n# relevel\ncoverage_table$strain = factor(coverage_table$strain, levels = rev(tip_order))\nCNV_table$strain = factor(CNV_table$strain, levels = rev(tip_order))\naverage_table$strain = factor(average_table$strain, levels = rev(tip_order))\n\n# debug\n# average_table = average_table[which(average_table$strain == \"Voss1\"), ]\n# coverage_table = coverage_table[which(coverage_table$strain == \"Voss1\"), ]\n# CNV_table = CNV_table[which(CNV_table$strain == \"Voss1\"), ]\n\n# plot\np_CNV = ggplot() +\n  geom_rect(data = subset(\n    coverage_table,\n    chr %in% c(\"I\", \"III\", \"V\", \"VII\", \"IX\", \"XI\", \"XIII\", \"XV\")),\n    fill = \"grey95\",\n    xmin = 0, xmax = max(coverage_table$stop),\n    ymin = 0, ymax = max(coverage_table$cov),\n    alpha = 0.3) +\n  geom_rect(data = CNV_table,\n            aes(fill = CNV,\n                xmin = start, xmax = stop,\n                ymin = start_y, ymax = stop_y),\n            alpha = 0.75) +\n  geom_hline(data = average_table, \n             aes(yintercept = average),\n             color = \"firebrick\",\n             linewidth = 1.5) +\n  geom_point(data = coverage_table,\n             aes(x = start, y = cov),\n             size = 0.05, color = \"grey35\", alpha = 0.5) +\n  scale_fill_manual(values = c(\"steelblue\", \"white\", \"salmon\", \"grey95\")) +\n  scale_y_continuous(labels = function(x) format(x, big.mark = \",\", scientific = FALSE)) +\n  coord_cartesian(expand = FALSE) +\n  annotation_custom(grid::linesGrob(y = c(0, 0), gp = grid::gpar(lwd = 3))) +\n  facet_grid(strain ~ chr,\n             scales = \"free\",\n             space = \"free_x\",\n             switch = \"both\") +\n  theme(plot.title = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text = element_blank(),\n        legend.position = \"none\",\n        panel.background = element_blank(),\n        panel.border = element_blank(),\n        panel.spacing = unit(0, \"lines\"),\n        strip.background = element_blank(),\n        strip.text.x = element_text(size = 8),\n        strip.text.y.left = element_blank())\n\n\n\n18.1.2 Merge\n\nfinal_plot = ggpubr::ggarrange(\n  p_tree, p_kmer, p_CNV,\n  ncol = 3, nrow = 1,\n  align = \"h\",\n  widths = c(0.15, 0.15, 0.7)\n)",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figure S6</span>"
    ]
  },
  {
    "objectID": "p02-12-FigureS6.html#figure-s6-plot",
    "href": "p02-12-FigureS6.html#figure-s6-plot",
    "title": "18  Figure S6",
    "section": "18.2 Figure S6 plot",
    "text": "18.2 Figure S6 plot\n\n\n\n\n\nFigure S6: Farmhouse yeast genomic landscape.",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figure S6</span>"
    ]
  },
  {
    "objectID": "p02-12-FigureS6.html#session-information",
    "href": "p02-12-FigureS6.html#session-information",
    "title": "18  Figure S6",
    "section": "18.3 Session Information",
    "text": "18.3 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 24.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8    LC_NUMERIC=C            LC_TIME=C              \n [4] LC_COLLATE=en_US.UTF-8  LC_MONETARY=C           LC_MESSAGES=en_US.UTF-8\n [7] LC_PAPER=C              LC_NAME=C               LC_ADDRESS=C           \n[10] LC_TELEPHONE=C          LC_MEASUREMENT=C        LC_IDENTIFICATION=C    \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] treeio_1.26.0          stringr_1.5.1          rstatix_0.7.2         \n [4] ReactomePA_1.46.0      RColorBrewer_1.1-3     plyr_1.8.9            \n [7] ggtreeExtra_1.12.0     ggtree_3.10.1          ggnewscale_0.5.2      \n[10] gggenomes_1.0.1        ggh4x_0.3.1            gridExtra_2.3         \n[13] enrichplot_1.22.0      EnhancedVolcano_1.20.0 ggrepel_0.9.6         \n[16] ggplot2_3.5.2          edgeR_4.0.16           limma_3.58.1          \n[19] dplyr_1.1.4            DOSE_3.28.2            ComplexHeatmap_2.18.0 \n[22] colorRamp2_0.1.0       clusterProfiler_4.10.1 BiocManager_1.30.26   \n[25] aplot_0.2.8            ape_5.8-1             \n\nloaded via a namespace (and not attached):\n  [1] jsonlite_2.0.0          shape_1.4.6.1           magrittr_2.0.3         \n  [4] farver_2.1.2            rmarkdown_2.29          GlobalOptions_0.1.2    \n  [7] fs_1.6.6                zlibbioc_1.48.2         vctrs_0.6.5            \n [10] memoise_2.0.1           RCurl_1.98-1.17         htmltools_0.5.8.1      \n [13] broom_1.0.9             Formula_1.2-5           gridGraphics_0.5-1     \n [16] htmlwidgets_1.6.4       cachem_1.1.0            igraph_2.1.4           \n [19] lifecycle_1.0.4         iterators_1.0.14        pkgconfig_2.0.3        \n [22] Matrix_1.6-5            R6_2.6.1                fastmap_1.2.0          \n [25] gson_0.1.0              GenomeInfoDbData_1.2.11 clue_0.3-66            \n [28] digest_0.6.37           colorspace_2.1-1        patchwork_1.3.1        \n [31] AnnotationDbi_1.64.1    S4Vectors_0.40.2        RSQLite_2.4.2          \n [34] ggpubr_0.6.1            labeling_0.4.3          abind_1.4-8            \n [37] httr_1.4.7              polyclip_1.10-7         compiler_4.3.3         \n [40] bit64_4.6.0-1           withr_3.0.2             doParallel_1.0.17      \n [43] backports_1.5.0         graphite_1.48.0         S7_0.2.0               \n [46] BiocParallel_1.36.0     carData_3.0-5           viridis_0.6.5          \n [49] DBI_1.2.3               ggforce_0.5.0           ggsignif_0.6.4         \n [52] MASS_7.3-60.0.1         rappdirs_0.3.3          rjson_0.2.23           \n [55] HDO.db_0.99.1           tools_4.3.3             scatterpie_0.2.5       \n [58] glue_1.8.0              nlme_3.1-164            GOSemSim_2.28.1        \n [61] shadowtext_0.1.5        cluster_2.1.6           reshape2_1.4.4         \n [64] fgsea_1.35.6            generics_0.1.4          gtable_0.3.6           \n [67] tzdb_0.5.0              tidyr_1.3.1             hms_1.1.3              \n [70] data.table_1.17.8       car_3.1-3               tidygraph_1.3.1        \n [73] XVector_0.42.0          BiocGenerics_0.48.1     foreach_1.5.2          \n [76] pillar_1.11.0           yulab.utils_0.2.0       circlize_0.4.16        \n [79] splines_4.3.3           tweenr_2.0.3            lattice_0.22-5         \n [82] bit_4.6.0               tidyselect_1.2.1        GO.db_3.18.0           \n [85] locfit_1.5-9.12         Biostrings_2.70.3       reactome.db_1.86.2     \n [88] knitr_1.50              IRanges_2.36.0          stats4_4.3.3           \n [91] xfun_0.52               graphlayouts_1.2.2      Biobase_2.62.0         \n [94] statmod_1.5.0           matrixStats_1.5.0       stringi_1.8.7          \n [97] lazyeval_0.2.2          ggfun_0.2.0             yaml_2.3.10            \n[100] evaluate_1.0.4          codetools_0.2-19        ggraph_2.2.1           \n[103] tibble_3.3.0            qvalue_2.34.0           graph_1.80.0           \n[106] ggplotify_0.1.2         cli_3.6.5               dichromat_2.0-0.1      \n[109] Rcpp_1.1.0              GenomeInfoDb_1.38.8     png_0.1-8              \n[112] parallel_4.3.3          ellipsis_0.3.2          readr_2.1.5            \n[115] blob_1.2.4              bitops_1.0-9            viridisLite_0.4.2      \n[118] tidytree_0.4.6          scales_1.4.0            purrr_1.1.0            \n[121] crayon_1.5.3            GetoptLong_1.0.5        rlang_1.1.6            \n[124] cowplot_1.2.0           fastmatch_1.1-6         KEGGREST_1.42.0",
    "crumbs": [
      "Part 2: Publications figures",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figure S6</span>"
    ]
  }
]