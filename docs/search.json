[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Farmhouse ale cultures preserve brewing’s lost yeast diversity",
    "section": "",
    "text": "Abstract\nSince its inception over 10.000 years ago, beer brewing transformed from a domestic activity based on uncontrolled spontaneous fermentations into a highly optimized industrial process that uses pure single-strain starter cultures of Saccharomyces yeasts. Along with the storage of frozen yeast stocks, this shift halted the domestication process of beer yeasts and led to a massive loss of beer yeast biodiversity. However, a few traditional farmhouse brewers in Northern and Eastern Europe still rely on artisanal fermentation methods, using mixed cultures of yeasts that are passed on from one fermentation to the next. We genetically and phenotypically analyzed 1760 isolates from 44 traditional European farmhouse ale yeast cultures from Norway, Latvia, Lithuania and Russia. We find that farmhouse cultures harbour remarkable genetic diversity, from nearly pure S. cerevisiae strains to intricate communities of over 30 unique variants. Farmhouse yeast genomes exhibit clear geographic structuring, but also reveal signs of within-culture mating and occasional admixture between populations, alongside lineage-specific genomic features, such as a horizontally transferred gene cluster unique to Baltic strains. Large-scale phenotyping showed that the farmhouse yeasts show much greater stress tolerance and a more diverse flavour production profile compared to current industrial beer strains. Together, our study reveals the complex structure and enormous diversity of microbial communities in traditional fermentations and provides a reservoir of new yeast strains that could drive a next wave of beer innovation.",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html",
    "href": "p01-01-qc-and-genome-composition.html",
    "title": "1  QC and Genome Composition assessment",
    "section": "",
    "text": "1.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 2.4.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#on-this-page",
    "href": "p01-01-qc-and-genome-composition.html#on-this-page",
    "title": "1  QC and Genome Composition assessment",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#reads-qc-and-filtering",
    "href": "p01-01-qc-and-genome-composition.html#reads-qc-and-filtering",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.2 Reads QC and Filtering",
    "text": "1.2 Reads QC and Filtering\nJust trim low quality bases with Trimmomatic and discard short reads. I keep only properly paired reads and I discard the unpaired, since the latter are just a tiny fraction of my total data, they complicate the analysis and there is not much added value in them (at least for the analysis we run).\nThe file sample.lst just contains the names of my kveiks samples.\n\n# generate FastQC report\nfor file in *.fastq; do\n  ~/bin/FastQC/fastqc $file &\ndone\n\n# LowQ base trimming and filtering\nwhile read line; do\n    java -jar ~/bin/trimmomatic/trimmomatic.jar PE \\\n        -threads 72 \\\n        -phred33 \\\n        $line.R1.fq.gz $line.R2.fq.gz \\\n        $line.R1.tr.fq.gz $line.R1.tr.un.fq.gz $line.R2.tr.fq.gz $line.R2.tr.un.fq.gz \\\n        SLIDINGWINDOW:10:30 \\\n        TRAILING:30 \\\n        MINLEN:50\ndone &lt; sample.lst",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#genome-composition",
    "href": "p01-01-qc-and-genome-composition.html#genome-composition",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.3 Genome Composition",
    "text": "1.3 Genome Composition\nWe check the composition of the sequenced kveiks by aligning the reads to a set of Saccharomyces reference genomes.\n\n\n\n\n\n\nFirst, we align the reads to the six Saccharomyces reference genomes. Then we create 10kb windows with bedtools and we calculate the average coverage for each window.\n\n## index the reference genome\n~/bin/bwa/bwa index Saccharomyces_RefGen.fa\n\n## reads alignment\nwhile read line ; do\n\n    bwa mem -t 72 \\\n        -K 100000000 \\\n        Saccharomyces_RefGen.fa \\\n      \"${line}\".R1.tr.fq.gz \\\n      \"${line}\".R2.tr.fq.gz \\\n    &gt; \"${line}\".align.sam\n    \n  samtools view -@ 72 -Sb \\\n    \"${line}\".align.sam &gt; \"${line}\".align.bam\n    \n  samtools sort -@ 72 \n    \"${line}\".align.bam \"${line}\".align.sort\n    \ndone &lt; ../sample.lst \n\n## bam2bed\n# prepare reference genomes\nsamtools-1.9/samtools faidx Saccharomyces_RefGen.fa\ngatk CreateSequenceDictionary --R Saccharomyces_RefGen.fa\ncut -f 2,3 Saccharomyces_RefGen.dict \\\n  | tail -n +2 \\\n  | sed 's/LN://g' \\\n  | sed 's/SN://g' \\\n  &gt; Saccharomyces_RefGen.bedchor\nbedtools makewindows \\\n  -g Saccharomyces_RefGen.bedchor \\\n    -w 1000 \\\n    &gt; Saccharomyces_RefGen.1kb_win.tab\n\n# calculate mean coverage\nwhile read line; do\n    bedtools coverage \\\n      -a Saccharomyces_RefGen.1kb_win.tab \\\n      -b \"${line}\".align.sort.bam -mean \\\n      &gt; \"${line}\".align.sort.1kb_cov.bed;\ndone\n\n# format output\nfor file in *.1kb_cov.bed ; do\n    sed -i 's/Scere_/Scere\\t/g' $file;\n    sed -i 's/Seuba_/Seuba\\t/g' $file;\n    sed -i 's/Skudr_/Skudr\\t/g' $file;\n    sed -i 's/Smika_/Smika\\t/g' $file;\n    sed -i 's/Spara_/Spara\\t/g' $file;\n    sed -i 's/Suvar_/Suvar\\t/g' $file;\n    python bed_remove0coverage.py \\\n      --input $file \\\n      | sed '/^[[:space:]]*$/d' \\\n      &gt; $(basename $file .bed).no0.bed;\ndone\n\nfor file in *.no0.bed; do\n    NAME=$(basename $file .align.sort.1kb_cov.no0.bed);\n    sed -i \"s/^/$NAME\\t/\" $file;\ndone\n\ncat *.1kb_cov.no0.bed &gt; Viking.species.cov.bed\n\n\n# generate per chromosomes coverages\nwhile read line; do\n    OLD=$(echo $line | cut -d \" \" -f 1)\n    NEW=$(echo $line | cut -d \" \" -f 2)\n    sed -i \"s/$OLD\\t/$NEW\\t/g\" Viking.species.cov.chr.bed\ndone &lt; ref_chr_names.lst \n\n# clean output\nfor file in *.no0.bed; do\n    cp $file $file.1;\n    while read line; do\n        OLD=$(echo $line | cut -d \" \" -f 1);\n        NEW=$(echo $line | cut -d \" \" -f 2);\n        sed -i \"s/$OLD\\t/$NEW\\t/g\" $file.1;\n    done &lt; ../00_ref_genomes/ref_chr_names.lst;\n    grep Chr $file.1 &gt; $(basename $file .bed).chr.bed;\n    rm $file.1 &\ndone\n\nWe then remove windows with 0 coverage to have a clearer figure, and we plot the coverages with transforming the y axis in log10 scale, since Krogerus kveiks have much higher coverage than the strains we sequenced.\n\ndata_cov = read.delim(\"data/p01-01/Viking.species.cov.chr.bed\", header = FALSE)\ndata_cov$V7 = ifelse(data_cov$V6 &gt;= 1, \"Up\", \"Down\")\n\n# ylim = 1500\nggplot(data_cov, aes(x = V2, y = V6)) +\n  geom_jitter(aes(color = V7),\n              show.legend = FALSE,\n              alpha = 0.035,\n              shape = \".\",\n              position = position_jitter(0.475)) +\n  geom_hline(yintercept = 1, linetype = 2, color = \"red\") +\n  coord_cartesian(expand = FALSE) +\n  scale_color_manual(values  = c(\"grey75\", \"cyan4\")) + \n  scale_y_continuous(limits = c(-4, 9000),\n                     trans = \"log2\",\n                     breaks = c(1, 10, 100, 1000),\n                     labels = scales::comma) +\n  labs(title = \"Coverage of Reference Genomes\",\n       x = \"Reference Species\",\n       y = \"Coverage\") +\n  facet_wrap(~V1, scales = \"free_y\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 20),\n        panel.background = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_line(colour = \"gray75\", size = 0.5),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text = element_text(size = 8),\n        axis.ticks.y = element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 0.65))\n\n\n\n\nFigure 1: Coverage of Reference Genomes.\n\n\n\n\nAll sequenced farmhouse yeasts are pure S. cerevisiae strains, except for Muri and k7R25 that are S. cerevisiae, S. eubayanus and S. uvarum triple hybrids.\nWe can dig in into the coverage of the single chromosomes and visualize the extent of hybridization and eventual aneuploidies.\n\n14R3014R616R2316R3717P519R181R1621P121R3827R1728P128P628R2128R3328R82R2338R1639R203R1140R1440R140R2041R1041R1542R2042R3144R3244R745P545R1146R1246R376R157R78R199R40Granvin1Hornindal1Hornindal2k7R15k7R25Laerdal2MuriSortdalEbbe1Voss1\n\n\n\nplot_lst[[\"14R30\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"14R6\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"16R23\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"16R37\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"17P5\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"19R18\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"1R16\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"21P1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"21R38\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"27R17\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28P1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28P6\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28R21\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28R33\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"28R8\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"2R23\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"38R16\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"39R20\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"3R11\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"40R14\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"40R1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"40R20\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"41R10\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"41R15\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"42R20\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"42R31\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"44R32\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"44R7\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"45P5\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"45R11\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"46R12\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"46R37\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"6R15\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"7R7\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"8R19\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"9R40\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Granvin1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Hornindal1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Hornindal2\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"k7R15\"]]\n\nNULL\n\n\n\n\n\nplot_lst[[\"k7R25\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Laerdal2\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Muri\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"SortdalEbbe1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nplot_lst[[\"Voss1\"]]\n\n\n\n\nFigure 2: Subgenome coverages.\n\n\n\n\n\n\n\nMuri and k7R25 are triple hybrids S. cerevisiae X S. eubayanus X S. uvarum. What is extremely interesting is that they share the same genomic composition in terms of origin of the chromosomes, but they have distinct CNVs patterns. I would suggest a common origin for such hybrid.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#ploydies-estimation",
    "href": "p01-01-qc-and-genome-composition.html#ploydies-estimation",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.4 Ploydies estimation",
    "text": "1.4 Ploydies estimation\nWe can estimates Kveiks ploidy by looking at the k-mer frequency distributions of the sequenced reads obtained from whole genome sequencing.\n\n\n# calculate kmer freq\nfor file in 01_alignments/*bam; do\n  ~/bin/ntCard/bin/ntcard \\\n    --threads=64 \\\n    --kmer=41 \\\n    --pref=$(basename $file .align.sort.md.r.bam).kmer41freq \\\n    $file;\ndone\n\n# merge outputs\nfor file in *.hist; do\n  tail -n +3 $file &gt; $file.1;\n  mv $file.1 $file;\n  cat $file | sed \"s/^/$(basename $file .kmer41freq_k41.hist)\\t/g\";\ndone &gt; Viking.species.kmer41freq.txt\n\nKmer frequency distribution plots can suggest us the degree of heterozygosity of kveiks genomes. All Kveiks seems to have a high degree of heterozygosity, except for hybrid strains Muri and k7R25. This support the idea that the sequenced kveiks so far are tetraploid S. cerevisiae, while Muri and k7R25 are triploid hybrids S. cerevisiae X Seubayanus X S. uvarum.\n\ndata_k = read.delim(\"./data/p01-01/Viking.species.kmer41freq.mod.txt\", header = FALSE)\ndata_k$V2 = as.numeric(data_k$V2)\ndata_k$V3 = as.numeric(data_k$V3)\n\n# plot kmer distributions\nggplot(data_k, aes(x = V2, y = V3)) +\n  geom_line(color = \"steelblue\", size = 1) +\n  scale_y_continuous(labels = function(x) format(x, big.mark = \",\", scientific = FALSE)) +\n  facet_wrap(~V1, scales = \"free\") +\n  labs(title = \"K-mer frequencies distribution\",\n       x = \"k-mer depth\",\n       y = \"k-mer frequency\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5),\n        axis.title = element_text(size = 18),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        panel.background = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill = NA),\n        strip.background = element_rect(colour = \"black\", fill = NA),\n        strip.text = element_text(size = 8))\n\n\n\n\nFigure 2: K-mer frequencies distribution.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#sec-lesson-learnt-feature-selection",
    "href": "p01-01-qc-and-genome-composition.html#sec-lesson-learnt-feature-selection",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.5 Lessons Learnt",
    "text": "1.5 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-01-qc-and-genome-composition.html#session-information",
    "href": "p01-01-qc-and-genome-composition.html#session-information",
    "title": "1  QC and Genome Composition assessment",
    "section": "1.6 Session Information",
    "text": "1.6 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.5.1 (2025-06-13)\nPlatform: x86_64-suse-linux-gnu\nRunning under: openSUSE Tumbleweed\n\nMatrix products: default\nBLAS:   /usr/lib64/R/lib/libRblas.so \nLAPACK: /usr/lib64/R/lib/libRlapack.so;  LAPACK version 3.12.1\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=it_IT.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] magrittr_2.0.3 gridExtra_2.3  ggplot2_3.5.2 \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5        cli_3.6.5          knitr_1.50         rlang_1.1.6       \n [5] xfun_0.52          generics_0.1.3     jsonlite_2.0.0     labeling_0.4.3    \n [9] glue_1.8.0         DT_0.33            htmltools_0.5.8.1  sass_0.4.10       \n[13] scales_1.4.0       rmarkdown_2.29     jquerylib_0.1.4    crosstalk_1.2.1   \n[17] evaluate_1.0.3     tibble_3.2.1       fastmap_1.2.0      yaml_2.3.10       \n[21] lifecycle_1.0.4    compiler_4.5.1     dplyr_1.1.4        RColorBrewer_1.1-3\n[25] htmlwidgets_1.6.4  pkgconfig_2.0.3    farver_2.1.2       digest_0.6.37     \n[29] R6_2.6.1           tidyselect_1.2.1   pillar_1.10.2      bslib_0.9.0       \n[33] withr_3.0.2        tools_4.5.1        gtable_0.3.6       cachem_1.1.0",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>QC and Genome Composition assessment</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html",
    "href": "p01-02-genome-assembly-and-annotation.html",
    "title": "2  Genome Assembly and Annotation",
    "section": "",
    "text": "2.1 On this page\nBiological insights and take-home messages are at the bottom of the page at section Lesson Learnt: Section 2.4.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#on-this-page",
    "href": "p01-02-genome-assembly-and-annotation.html#on-this-page",
    "title": "2  Genome Assembly and Annotation",
    "section": "",
    "text": "Here",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#de-novo-assembly",
    "href": "p01-02-genome-assembly-and-annotation.html#de-novo-assembly",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.2 De novo assembly",
    "text": "2.2 De novo assembly\nTo determine the genes in Kveiks samples, we need to do a de novo assembly and then to run an ab initio prediction of genes (using Saccharomyces proteins and genes as guide). We will use SPAdes assembler, follower by Redundans pipeline to collapse redundant contigs.\n\n\n## SPAdes assembly \nwhile read line ; do\n    python ~/bin/SPAdes-3.13.0-Linux/bin/spades.py \\\n        -1 ../00_trim_reads/\"${line}\".R1.tr.fq.gz \\\n        -2 ../00_trim_reads/\"${line}\".R2.tr.fq.gz \\\n        -o \"${line}\"_SPAdes \\\n        --threads 72 \\\n        -k 21,29,39,59,79,99,119,127\ndone &lt; ../sample.lst\n\n## redundans\ndocker run -v /home/andrea/03_KVEIK/:/mydata:rw -it lpryszcz/redundan2\n\nwhile read line ; do\n    /root/src/redundans/redundans.py \\\n        --verbose \\\n        --fastq /mydata/00_trim_reads/\"${line}\".R1.tr.fq.gz \\\n        /mydata/00_trim_reads/\"${line}\".R2.tr.fq.gz \\\n        --fasta /mydata/03_assemblies/\"${line}\".SPAdes.fa \\\n        --outdir /mydata/04_redundans/\"${line}\" \\\n        --threads 72 \\\n        --log /mydata/04_redundans/\"${line}\".SPAdes.redundans.log\ndone &lt; mydata/sample.lst \n\n## Generate assembly stats\nfor file in *redundans.fa; do \n    perl ~/scripts/Nstat.pl $file &gt; $file.Nstat;\ndone\n\necho \"Sample\"$'\\t'\"Total length (bp)\"$'\\t'\"# contigs\"$'\\t'\"longest (bp)\"$'\\t'\"N50 (bp)\" &gt; Vikings.assembly.stats.txt;\n    \nfor file in *.Nstat; do\n    NAME=$(basename $file .SPAdes.redundans.fa.Nstat);\n    LONGEST=$(tail $file | head -n 1 | tr ':' '\\t' | cut -f 1);\n    TOT_LEN=$(grep \"Total length\" $file | sed 's/Total length of sequence://g');\n    NCONT=$(grep \"Total number\" $file | sed 's/Total number of sequences://g');\n    N50=$(grep \"N50 stats:\" $file | sed 's/.*sequences &gt;= //g');\n    echo $NAME$'\\t'$TOT_LEN$'\\t'$NCONT$'\\t'$LONGEST$'\\t'$N50; done |\\\n        sed 's/ bp//g' &gt;&gt; Vikings.assembly.stats.txt;\ndone\n\n\n\n\n\n\n\nDespite being more or less fragmented, all assembled genomes are in the range of Saccharomyces sizes. Notable exceptions are: Granvin1 (???), Muri and k7R25 (which are S. cerevisiae, _ X S. eubayanus X S. uvarum triple hybrids).",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#genome-annotation",
    "href": "p01-02-genome-assembly-and-annotation.html#genome-annotation",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.3 Genome Annotation",
    "text": "2.3 Genome Annotation\nWe will perform ab initio annotation of the assembled genomes with the MAKER pipeline. We will use Saccharomyces RepeatMasker to mask repetitive regions, ab intio gene models are predicted with SNAP and augustus with the corresponding S. cerevisiae HMM models, ORFs from S288C_reference_genome_R64-2-1_20150113 reference genome and 1011 S. cerevisiae genomes as ESTs evidences, proteins from S288C_reference_genome_R64-2-1_20150113 genome and the following yeast proteomes as proteins evidences.\n\n\n\n\n\n\n\n2.3.1 Gene Models Annotation\n\n# run the MAKER pipeline\nfor file in *.redundans.fa; do\n    ~/bin/maker/bin/maker -genome $file \\\n        maker_bopts.ctl \\\n        maker_opts.ctl \\\n        maker_exe.ctl; \ndone \n\n# summary of transcripts and proteins\nfor DIR in *.maker.output; do\n    ~/bin/maker/bin/fasta_merge -d ./$DIR/*master_datastore_index.log;\n    ~/bin/maker/bin/gff3_merge -d ./$DIR/*master_datastore_index.log;\ndone\n\n# create gene IDs\nfor file in *.all.gff ; do\n    ~/bin/maker/bin/maker_map_ids \\\n        --prefix $(basename $file | sed 's/\\..*//g') \\\n        $file &gt; $(basename $file .gff).id.map;\n    ~/bin/maker/bin/map_gff_ids \\\n        $(basename $file .gff).id.map \\\n        $file;\n    ~/bin/maker/bin/map_fasta_ids \\\n        $(basename $file .gff).id.map \\\n        $(basename $file .gff).maker.transcripts.fasta;\n    ~/bin/maker/bin/map_fasta_ids \\\n        $(basename $file .gff).id.map \\\n        $(basename $file .gff).maker.proteins.fasta;\ndone\n\n## Generate annotation stats\necho \"Sample\"$'\\t'\"# Transcripts\"$'\\t'\"# Proteins\" &gt; Vikings.annotation.stats.txt;\nwhile read line; do\n    NAME=$line;\n    TRANS=$(grep \"&gt;\" $line.SPAdes.redundans.all.maker.transcripts.fasta | wc -l);\n    PROT=$(grep \"&gt;\" $line.SPAdes.redundans.all.maker.proteins.fasta | wc -l);\n    echo $NAME$'\\t'$TRANS$'\\t'$PROT &gt;&gt; Vikings.annotation.stats.txt;\ndone &lt; ../sample.lst\n\nBelow are the number of genes predicted for each de novo assembled farmhouse genome.\n\n\n\n\n\n\n\n\n2.3.2 Identification of Farmhouse-specific Gene Families\nDo kveiks harbor kveik-specific gene families? To answer this question we build protein orthogroups using proteomes from Kveiks, 302 industrail strains (from Gallone et al. 2019) and reference proteomes for S. cerevisiae, S. kudriavzevii, S. eubayanus, S. uvarum using the Orthofinder pipeline. This approach resulted to be successful for clustering HGT, so hopefully we can identify Orthogroups specific for kveik strains.\n\n# create Gene Families\n~/bin/OrthoFinder-2.3.3/orthofinder -f 00_aa_start/ \\\n  -t 72 \\\n  -M msa \\\n  -S diamond \\\n  -A mafft \\\n  -T iqtree \\\n  -I 2\n  \n# filter for Orthogroups enriched for kveiks\npython3.8 Vikings.GeneFamiliesFilter.py \\\n  --in Vikings.Orthogroups.GeneCount.tsv \\\n  &gt; Vikings.Orthoclusters.counts.tab\n\nWe select Orthogroups with 10 genes or more (6,811 out of 13,508 groups), and we look for gene families specific for kveiks or enriched in kveiks.\n\n# get yeasts gene families\nOrthogroups = read.delim(\"data/p01-02/Vikings.Orthoclusters.counts.tab\", header = FALSE)\ncolnames(Orthogroups) = Orthogroups[1, ]\nrownames(Orthogroups) = Orthogroups$Orthogroups\nOrthogroups = Orthogroups[-which(Orthogroups$Orthogroup == \"Orthogroups\"), ]\nOrthogroups = Orthogroups[, -which(colnames(Orthogroups) == \"Orthogroups\")]\nOrthogroups = dplyr::mutate_all(Orthogroups, function(x) as.numeric(as.character(x)))\n\n# drop columns if empty\nOrthogroups = Orthogroups[, colSums(Orthogroups != 0) &gt; 0]\n\n# reorder columns\nkveiks = c(\"14R30\", \"14R6\", \"16R23\", \"16R37\", \"17P5\", \"19R18\", \"1R16\", \"21P1\", \"21R38\",\n           \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\", \"2R23\", \"38R16\", \"39R20\", \n           \"3R11\", \"40R14\", \"40R1\", \"40R20\", \"41R10\", \"41R15\", \"42R20\", \"42R31\", \"44R32\", \"44R7\", \n           \"45P5\", \"45R11\", \"46R12\", \"46R37\", \"6R15\", \"7R7\", \"8R19\", \"9R40\", \"Granvin1\", \n           \"Hornindal1\", \"Hornindal2\", \"k7R25\", \"Laerdal2\", \"Muri\", \"SortdalEbbe1\", \"Voss1\")\nOrthogroups_k = Orthogroups[, which(colnames(Orthogroups) %in% kveiks)]\nOrthogroups_nk = Orthogroups[, -which(colnames(Orthogroups) %in% kveiks)]\nOrthogroups = cbind(Orthogroups_k, Orthogroups_nk)\n\n# plot heatmap\nComplexHeatmap::Heatmap(t(Orthogroups),\n                        cluster_rows = FALSE,\n                        cluster_columns = TRUE,\n                        column_dend_reorder = TRUE,\n                        col = colorRamp2(c(-1, 0, 1), rev(brewer.pal(n = 3, name = \"RdBu\"))),\n                        na_col = \"grey75\",\n                        show_row_names = TRUE,\n                        show_column_names = FALSE,\n                        show_row_dend = TRUE,\n                        show_heatmap_legend = FALSE,\n                        row_title = \"Orthogroups\",\n                        column_title_side = \"bottom\")\n\n\n\n\nFigure 1: Kveiks-specific gene families.\n\n\n\n\nWe could not identify any obvious evidences for Farmhouse-specific Orthogroups.\n\n\n2.3.3 Horizontal Gene Transfer\nTo identify genuine Bacterial (or Fungal) Horizontal Gene Transfer, we apply the following protocol:\n\nsequence similarity search against non-redundant proteins database, including taxonomic annotations\nidentify protein coding genes with best hits (top 5) to Bacterial proteins\nselect assembled contigs where putative bacterial genes are\ndiscard short contigs with only one bacterial hit (Noise)\nif putative bacterial gene flanked by Eukaryotic genes, manual sequence similarity search to confirm a bona fide hit\n\nTo have internal controls in this (and in the following analyses), we will add the ones of 18 S. cerevisiae industrial strains as well.\n\n2.3.3.1 Taxonomic annotation of predicted genes\nFor each predicted protein-coding gene, we can make a sequence similarity search against the non-redundant protein database at NCBI (nr). To assign the taxonomy id of the nr BLAST hit, we need the prot.accession2taxid.gz and nodes.dmp files provided by NCBI taxonomy. This can help us identify horizontal gene transfer and traces of contamination in the library prep of yeast samples.\nFor each sample, first we do a blast search using DIAMOND, and then we associate to the protein_id of the top 5 best hits to the corresponding taxonomy the python library ete and customs scripts. BLAST is run against nr, excluding Saccharomyces cerevisiae, so that we can judge if the protein was present in other yeasts, or if it is indeed of bacterial origin.\n\n# BLAST search\nfor file in *.all.maker.proteins.fasta; do\n  ~/bin/DIAMOND/diamond blastp \\\n    --query $file \\\n    --db ~/taxonomy/nr \\\n    --taxonmap ~/taxonomy/prot.accession2taxid.gz \\\n    --taxonnodes ~/taxonomy/nodes.dmp \\\n    --threads 70 \\\n    --sensitive \\\n    --max-target-seqs 5 \\\n    --outfmt 6 qseqid sseqid pident length mismatch gapopen qstart qend\n    sstart send evalue bitscore staxids &gt; $file.diamond\ndone\n\n# BLAST to taxid\nfor file in *.diamond; do\n  ~/anaconda_ete/bin/python3.6 Vikings.tax.topath.py --input $file &gt; $file.tax\ndone\nfor file in *.tax ; do\n  while read line ; do\n    grep $line $file | cut -f 1,5;\n    echo;\n  done &lt; &lt;(grep Bacteria $file | cut -f 1 | sort -u) &gt; $file.bact\ndone\n\nNow we have the full taxonomic annotation of the five best hits for each of the protein coding genes we annotated on the kveiks.\n\n\n2.3.3.2 Evidence for bacterial HGT\n\n# filter annot.gff files\nfor file in *.gff ; do\n  grep CDS $file &gt; $(basename $file .gff).CDSonly.gff;\n  gzip $file;\ndone\n\n# identify putative bacterial genes and the assembled contigs harbouring them\nfor file in *.tax; do cut -f 1,5 $file &gt; $file.all; done\nfor file in *.all; do grep Bact $file &gt; $(basename $file .all).bact; done\nfor file in *.bact; do\n  while read line; do\n    if [[ $line = \"\" ]]; then\n      continue;\n    else\n      GENE=$(echo $line | cut -d \" \" -f 1 );\n      CHR=$(grep \"${GENE}\" $(basename $file .maker.proteins.fasta.diamond.tax.bact).CDSonly.gff | cut -f 1 );\n      grep \"${CHR}\" $(basename $file .bact).all \\\n        | uniq \\\n        | grep -C5 \"${GENE}\" \\\n        | grep -v \"${GENE}\" \\\n        &gt;&gt; $(basename $file .maker.proteins.fasta.diamond.tax.bact).\"${GENE}\".tmp;\n    fi;\n  done &lt; &lt;(cut -f 1 $file | sort -u);\ndone\n\n# pull the putative bacterial contigs\nfor file in *.bact; do\n  cut -f 1 $file | sort -u &gt; $file.lst;\n  perl ~/scripts/SelectList_Fasta.pl \\\n    $(basename $file .diamond.tax.bact) \\\n    $file.lst \\\n    &gt; $file.fa;\ndone\n\n# check if putative bacterial transcripts are flanked by Euk genes\npython3.6 Vikings.check_eukbact_contigs.1.py --input ../samples.lst\nfor file in *HGT.table; do uniq $file &gt; temp; mv temp $file ; done\nfor file in *HGT.table; do\n  python3 ../Vikings.Bactmatch.py --input $file | cut -f 2 &gt; temp;\n  cp temp temp2;\n  paste temp temp2 | sed 's/\\t/\\|\\&gt;/g' &gt; $file.lst;\n  rm temp temp2;\ndone\nfor file in *HGT.table.lst; do\n  perl ~/scripts/SelectList_Fasta.pl \\\n    $(basename $file .HGT.table.lst).bact.fa \\\n    $file \\\n    &gt; $(basename $file .lst).fa;\ndone\n\nTHERE ARE NO EVIDENCES FOR SIGNIFICANT BACTERIAL HORIZONTAL GENE TRANSFER.\n\n\n2.3.3.3 Evidence for HGT from Ascomycota\nWe can check the presence of fungal non-Saccharomyces genes and operons starting from the DIAMOND blast results we have.\n\n# Select non Saccharomyces genes\n# filter for genes with no top hits to Saccharomyces\nfor file in *tax; do\n  grep Ascomycota $file | grep -v Saccharomyces &gt; $file.Asco;\n  while read line; do\n    grep $line $file &gt; $file.Asco.all;\n    if [[ $(grep $line $file | grep Saccharomyces) ]]; then\n      continue;\n    else\n      echo $line;\n    fi;\n  done &lt; &lt;(cut -f 1 $file.Asco | sort -u) &gt; $file.Asco.candidates;\ndone\n\n# retrieve fasta sequences\nfor file in *candidates; do\nperl ~/scripts/SelectList_Fasta.pl \\\n  ../../11_domestication/00_prot_DB/$(basename $file\n  .diamond.tax.Asco.candidates) \\\n  $file &gt; $file.fa;\ndone\n\n# generate table stats\nfor i in 2 3; do\n  wc -l *candidates \\\n    | sed \"s/.SPAdes.*//g\" \\\n    | sed \"s/.aa.*//g\" \\\n    | sed \"s/.contigs.*//g\" \\\n    | grep -v total \\\n    | sed \"s/  / /g\" \\\n    | sed \"s/  / /g\" \\\n    | cut -f $i -d \" \" \\\n    &gt; temp.$i;\ndone;\n\npaste temp.3 temp.2 &gt; Vikings.Asco.HGT.stats;\n\n# clean up\nrm temp.2 temp.3\n\n\n\n\n\n\n\nKveik strains seems to have a significant higher number of Ascomycetes genes than the other industrial strains analysed. Are there additional proteins shared between all the kveiks (or by some kveiks with same geographical origin?). We can group these proteins in gene families and see if we see a common pattern. If not, we can BLAST back the proteins and see which specific genes have been acquired.\n\n# group candidates in gene families\n~/bin/OrthoFinder-2.3.3/orthofinder -f ./ \\\n  -t 20 \\\n  -M msa \\\n  -S diamond \\\n  -A mafft \\\n  -T iqtree \\\n  -I 2\n\nFrom OrthoFinder output we can identify 49 orthogroups containing four genes or more. We visualize them as heatmap, anc we can see that kveiks strains have a higher number of common additional orthogroups that are absent from S288C and industrial strains. Interestingly, the distribution pattern does not seem to overlap with the geographical isolation of the kveik culture.\n\n# import table\nheatfile = read.delim(\"data/p01-02/Vikings.Asco.HGT.heatmap.tab\", header = FALSE)\nheatfile$V2 = stringr::str_replace_all(heatfile$V2, \"x\", \"X\")\nheatfile = heatfile[which(heatfile$V2 %in% c(\n  \"Voss1\", \"SortdalEbbe1\", \"Muri\", \"Laerdal2\", \"k7R25\", \"Hornindal2\", \"Hornindal1\",\n  \"Granvin1\", \"9R40\", \"8R19\", \"7R7\", \"6R15\", \"46R37\", \"46R12\", \"45R11\", \"45P5\", \"44R7\", \"44R32\",\n  \"42R31\", \"42R20\", \"41R15\", \"41R10\", \"40R20\", \"40R1\", \"40R14\", \"3R11\", \"39R20\", \"38R16\", \"2R23\",\n  \"28R8\", \"28R33\", \"28R21\", \"28P6\", \"28P1\", \"27R17\", \"21R38\", \"21P1\", \"1R16\", \"19R18\", \"17P5\",\n  \"16R37\", \"16R23\", \"14R6\", \"14R30\"\n)), ]\n\n# relevel\nheatfile$V2 = factor(\n  heatfile$V2,\n  levels = c(\"41R10\", \"21R38\", \"9R40\", \"17P5\", \"SortdalEbbe1\", \"3R11\", \"21P1\", \"41R15\", \"Hornindal1\",\n             \"Hornindal2\", \"1R16\", \"2R23\", \"8R19\", \"Muri\",\n             \"k7R25\", \"38R16\", \"44R32\", \"19R18\", \"44R7\", \"6R15\", \"Laerdal2\", \"7R7\", \"14R6\", \"14R30\",\n             \"27R17\", \"28P1\", \"28P6\", \"28R21\", \"28R33\", \"28R8\",\n             \"42R20\", \"42R31\", \"45P5\", \"45R11\", \n             \"46R12\", \"46R37\", \"16R23\", \"16R37\",\n             \"39R20\", \"40R14\", \"40R1\", \"40R20\",\n             \"Granvin1\", \"Voss1\")\n)\n\n# set color labels\ncol_label = fills = c(\"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\",\n                      \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#0571B0\", \"#92C5DE\", \"#92C5DE\",\n                      \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\", \"#92C5DE\",\n                      \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#008470\", \"#FFDA00\", \"#FFDA00\",\n                      \"#FFDA00\", \"#FFDA00\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#FBA01D\", \"#A6611A\", \"#A6611A\",\n                      \"#A6611A\", \"#A6611A\", \"grey75\", \"grey75\")\n\n\n# prepare heatmap\nggplot(heatfile) +\n  geom_tile(aes(x = V1, y = V2, fill = V3), color = \"grey75\") +\n  scale_fill_gradientn(na.value = \"white\", limits = c(0, 2),\n                       colours = c(\"white\", \"steelblue\", \"steelblue\"),\n                       breaks = c(0, 1, 2)) +\n  coord_cartesian(expand = FALSE) +\n  labs(fill = \"Gene presence\",\n       y = \"Strain\",\n       x = \"Orthologous groups\") +\n  theme(axis.title = element_text(size = 16),\n        axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.5),\n        axis.text.y = element_text(size = 16, colour = col_label),\n        legend.position = \"none\",\n        panel.border = element_rect(colour = \"black\", fill = NA, size = 0.75)) +\n  annotate(xmin = 25.5, xmax = 32.5, \n           ymin = -Inf, ymax = Inf, \n           geom = \"rect\", alpha = 0,\n           colour = \"red\", linewidth = 1.5)\n\n\n\n\nFigure 2: Ascomycota HTG orthogroup candidates.\n\n\n\n\nVery well. Now, what are the gene families that are transferred to kveiks strains? Are they genuine HGT, or it is just artifacts from heuristic sequence similarity search? Let’s do manual BLAST to NCBI for the Orthogroups and see what pops up.\n\n\n\n\n\n\nWe can clearly identify two operons (OG0000024-OG0000031) that were transferred from Zygosaccharomzces parabailli to kveik strains 16R37, 42R31, 45P5, 45R11 and 46R37.\nThese strains come all from a small geographic area (Latvia [42R31, 45P5, 45R11] and Lithuania [16R37, 46R37]), suggesting a common origin of the HGT event that then spread. Interestingly, other isolates from the same culture (i.e.: 16R23, 42R20, 46R12) do not present such a HGT, supporting the idea of heterogeneous kvieks cultures.\n\n\n2.3.3.4 Zygosaccharomyces parabailli transferred operon\nThe transferred operons code for the genes: YNR058W, YHR204W, YHR205W, YHR206W, YHR207C, YHR208W, YER182W, YER183C.\n\n\n\n\n\n\n\n2.3.3.4.1 Overrepresented GO BP terms\n\n### run over-represented analysis\nenriched_GOs = enrichGO(gene = HGT_genes$ENTREZ,\n                               universe = GO_universe,\n                               OrgDb = ref_DB_list[[1]],\n                               ont = \"BP\",\n                               pAdjustMethod = \"BH\",\n                               pvalueCutoff = 0.05,\n                               qvalueCutoff = 0.05)\n\nmy_table = enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ]\nmy_table = my_table %&gt;%\n  dplyr::mutate(\n    pvalue = base::signif(pvalue, digits = 3),\n    p.adjust = base::signif(p.adjust, digits = 3),\n    qvalue = base::signif(qvalue, digits = 3)\n  )\n\n# print table\nDT::datatable(\n  my_table,\n  extensions = c(\"FixedColumns\", \"FixedHeader\"),\n  caption = \"Table 7: Overrepresented BP terms in Zygosaccharomyces parabailli transferred operon.\", \n  plugins = \"ellipsis\",\n  options = list(\n    columnDefs = list(list(\n      targets = \"_all\",\n      render = JS(\"$.fn.dataTable.render.ellipsis( 30, false )\")\n    )),\n    overflow = \"hidden\",\n    whiteSpace = \"nowrap\",\n    scrollX = TRUE,\n    paging = TRUE,\n    fixedHeader = FALSE,\n    pageLength = 10\n  )\n)\n\n\n\n\n\n\n# plot GO dotplot\np0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5),\n        legend.position = \"bottom\",\n        strip.background = element_rect(fill = \"grey85\", colour = \"black\"),\n        strip.text = element_text(size = 12))\n\nprint(p0)\n\n\n\n\nFigure 3: Dotplot of overrepresented BP terms in Zygosaccharomzces parabailli transferred operon.\n\n\n\n\n\n\n2.3.3.4.2 Overrepresented GO MF terms\n\n### run over-represented analysis\nenriched_GOs = enrichGO(gene = HGT_genes$ENTREZ,\n                               universe = GO_universe,\n                               OrgDb = ref_DB_list[[1]],\n                               ont = \"MF\",\n                               pAdjustMethod = \"BH\",\n                               pvalueCutoff = 0.05,\n                               qvalueCutoff = 0.05)\n\nmy_table = enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ]\nmy_table = my_table %&gt;%\n  dplyr::mutate(\n    pvalue = base::signif(pvalue, digits = 3),\n    p.adjust = base::signif(p.adjust, digits = 3),\n    qvalue = base::signif(qvalue, digits = 3)\n  )\n\n# print table\nDT::datatable(\n  my_table,\n  extensions = c(\"FixedColumns\", \"FixedHeader\"),\n  caption = \"Table 8: Overrepresented MF terms in Zygosaccharomyces parabailli transferred operon.\", \n  plugins = \"ellipsis\",\n  options = list(\n    columnDefs = list(list(\n      targets = \"_all\",\n      render = JS(\"$.fn.dataTable.render.ellipsis( 30, false )\")\n    )),\n    overflow = \"hidden\",\n    whiteSpace = \"nowrap\",\n    scrollX = TRUE,\n    paging = TRUE,\n    fixedHeader = FALSE,\n    pageLength = 10\n  )\n)\n\n\n\n\n\n\n# plot GO dotplot\np0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) +\n  ggtitle(\"Zygosaccharomzces parabailli transferred operon over-represented GO MF terms sets\") +\n  scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, \"Reds\"))(37))) +\n  guides(colour = guide_colorbar(reverse = TRUE)) +\n  theme(plot.title = element_text(size = 22, hjust = 0.5),\n        legend.position = \"bottom\",\n        strip.background = element_rect(fill = \"grey85\", colour = \"black\"),\n        strip.text = element_text(size = 12))\n\nprint(p0)\n\n\n\n\nFigure 4: Dotplot of overrepresented MF terms in Zygosaccharomzces parabailli transferred operon.",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#sec-lesson-learnt-feature-selection",
    "href": "p01-02-genome-assembly-and-annotation.html#sec-lesson-learnt-feature-selection",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.4 Lessons Learnt",
    "text": "2.4 Lessons Learnt\nBased on the we have learnt:\n\nFr",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  },
  {
    "objectID": "p01-02-genome-assembly-and-annotation.html#session-information",
    "href": "p01-02-genome-assembly-and-annotation.html#session-information",
    "title": "2  Genome Assembly and Annotation",
    "section": "2.5 Session Information",
    "text": "2.5 Session Information\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: openSUSE Tumbleweed\n\nMatrix products: default\nBLAS/LAPACK: /home/andrea/miniforge3/envs/moai/lib/libmkl_rt.so.2;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=it_IT.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Brussels\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] org.Sc.sgd.db_3.18.0   AnnotationDbi_1.64.1   IRanges_2.36.0        \n [4] S4Vectors_0.40.2       Biobase_2.62.0         BiocGenerics_0.48.1   \n [7] RColorBrewer_1.1-3     magrittr_2.0.3         gridExtra_2.3         \n[10] ggplot2_3.5.1          DT_0.33                ComplexHeatmap_2.18.0 \n[13] clusterProfiler_4.10.1 circlize_0.4.16       \n\nloaded via a namespace (and not attached):\n  [1] jsonlite_1.8.9          shape_1.4.6.1           magick_2.8.5           \n  [4] farver_2.1.2            rmarkdown_2.29          GlobalOptions_0.1.2    \n  [7] fs_1.6.5                zlibbioc_1.48.2         vctrs_0.6.5            \n [10] Cairo_1.6-2             memoise_2.0.1           RCurl_1.98-1.16        \n [13] ggtree_3.10.1           htmltools_0.5.8.1       progress_1.2.3         \n [16] curl_6.4.0              gridGraphics_0.5-1      sass_0.4.9             \n [19] bslib_0.8.0             htmlwidgets_1.6.4       plyr_1.8.9             \n [22] cachem_1.1.0            igraph_2.1.4            lifecycle_1.0.4        \n [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.6-5           \n [28] R6_2.5.1                fastmap_1.2.0           gson_0.1.0             \n [31] GenomeInfoDbData_1.2.11 clue_0.3-66             digest_0.6.37          \n [34] aplot_0.2.4             enrichplot_1.22.0       colorspace_2.1-1       \n [37] patchwork_1.3.0         crosstalk_1.2.1         RSQLite_2.3.9          \n [40] labeling_0.4.3          filelock_1.0.3          httr_1.4.7             \n [43] polyclip_1.10-7         compiler_4.3.2          bit64_4.6.0-1          \n [46] withr_3.0.2             doParallel_1.0.17       BiocParallel_1.36.0    \n [49] viridis_0.6.5           DBI_1.2.3               ggforce_0.4.2          \n [52] biomaRt_2.58.2          MASS_7.3-60.0.1         rappdirs_0.3.3         \n [55] rjson_0.2.23            HDO.db_0.99.1           tools_4.3.2            \n [58] ape_5.8-1               scatterpie_0.2.4        glue_1.8.0             \n [61] nlme_3.1-167            GOSemSim_2.28.1         shadowtext_0.1.4       \n [64] cluster_2.1.8           reshape2_1.4.4          fgsea_1.28.0           \n [67] generics_0.1.3          gtable_0.3.6            tidyr_1.3.1            \n [70] data.table_1.16.4       hms_1.1.3               xml2_1.3.6             \n [73] tidygraph_1.3.1         XVector_0.42.0          ggrepel_0.9.6          \n [76] foreach_1.5.2           pillar_1.10.1           stringr_1.5.1          \n [79] yulab.utils_0.2.0       splines_4.3.2           dplyr_1.1.4            \n [82] tweenr_2.0.3            BiocFileCache_2.10.2    treeio_1.26.0          \n [85] lattice_0.22-6          bit_4.5.0.1             tidyselect_1.2.1       \n [88] GO.db_3.18.0            Biostrings_2.70.3       knitr_1.49             \n [91] xfun_0.50               graphlayouts_1.2.2      matrixStats_1.5.0      \n [94] stringi_1.8.4           lazyeval_0.2.2          ggfun_0.1.8            \n [97] yaml_2.3.10             evaluate_1.0.3          codetools_0.2-20       \n[100] ggraph_2.2.1            tibble_3.2.1            qvalue_2.34.0          \n[103] ggplotify_0.1.2         cli_3.6.3               jquerylib_0.1.4        \n[106] munsell_0.5.1           Rcpp_1.0.14             GenomeInfoDb_1.38.8    \n[109] dbplyr_2.5.0            png_0.1-8               XML_3.99-0.18          \n[112] parallel_4.3.2          blob_1.2.4              prettyunits_1.2.0      \n[115] DOSE_3.28.2             bitops_1.0-9            viridisLite_0.4.2      \n[118] tidytree_0.4.6          scales_1.3.0            purrr_1.0.2            \n[121] crayon_1.5.3            GetoptLong_1.0.5        rlang_1.1.5            \n[124] cowplot_1.1.3           fastmatch_1.1-6         KEGGREST_1.42.0",
    "crumbs": [
      "Part 1: Bioinformatics analyses",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Genome Assembly and Annotation</span>"
    ]
  }
]